<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>和我一起走进梅西耶天体(合集)</title>
      <link href="2021/08/18/%E5%92%8C%E6%88%91%E4%B8%80%E8%B5%B7%E8%B5%B0%E8%BF%9B%E6%A2%85%E8%A5%BF%E8%80%B6%E5%A4%A9%E4%BD%93/"/>
      <url>2021/08/18/%E5%92%8C%E6%88%91%E4%B8%80%E8%B5%B7%E8%B5%B0%E8%BF%9B%E6%A2%85%E8%A5%BF%E8%80%B6%E5%A4%A9%E4%BD%93/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><blockquote><p>  首先作为某大学的天文社活动部部长，我的天文知识实在是太贫乏了，马上就要开学了，面对一群热爱天文的学弟学妹，不想被他们吊打。还是要趁开学之前好好恶补一下，虽然这么实验室的事情也很多QAQ，但是既然决定做一件事，就要好好做好。</p></blockquote><p><a href="https://bler.top" class="LinkCard"><a href="https://bler.top/2021/08/17/%E4%B8%8A%E5%B8%9D%E4%B9%8B%E7%9C%BC%E5%92%8CM57/" class="LinkCard">上帝之眼</a></a></p><p> <a href="C:\Users\Public\Desktop\微信.lnk">微信.lnk</a> 网络流 5个题</p><p>写完树状数组 1 2</p><p>莫反：除了A题</p><p>LCA要写完</p><p>主席树 两个题A C</p><p>kmp 除了pqr 20个题</p><p>单调栈 除了最后一题其他都要写</p><p>学校oj 打弹珠，求和，一道简单的改编题（3道）</p><p>最短路 6个题（简直就是强人所难）</p><p>思维训练 1600以下都要写</p><p>CF讲过的题要写</p><p>线段树： O M N 扫描线 </p><p>dp 背包，最长上升，公共</p><p>最小生成树</p><p>不要用bool 和vector</p><p>char 结构查重标记text case</p><p>inline内联 快</p><p>关闭以后不要putchar啥的 read</p><p>不要用define，因为优先级会有问题</p><p>习惯使用全局变量（不要在main里面开一堆，把栈咋了）</p><p>建图：有时可以用vector建图</p><p>stl：啥呀你们说什么听不懂  尽量用map</p><p>哈希：哈？搞完什么 搞完什么 搞完什么？搞完什么？搞完什么？搞完什么？</p><p>我觉得好难 下半年都是网络赛</p><p>倍增，st表</p><p>思维训练 1600以下都要写</p><p>CF讲过的题要写</p>]]></content>
      
      
      <categories>
          
          <category> 天文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 🌟此处晴夜，彼处远星 </tag>
            
            <tag> 🌌梅西耶系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我认错上帝之眼了？！</title>
      <link href="2021/08/17/%E4%B8%8A%E5%B8%9D%E4%B9%8B%E7%9C%BC%E5%92%8CM57/"/>
      <url>2021/08/17/%E4%B8%8A%E5%B8%9D%E4%B9%8B%E7%9C%BC%E5%92%8CM57/</url>
      
        <content type="html"><![CDATA[<blockquote><p>   写在前面：估计也只有我才会把这两个星云弄混了吧，我一定是一个假的天文爱好者😶‍🌫️</p><p>   天文小白，而且穷，买不起镜子观星，只能接触理论，羡慕大佬四处寻星，摄影，我只能默默地增加的我的天文知识了</p><p>   天文小白一枚，如果文章有错误，请联系我修正错误，谢谢你们~</p></blockquote><p>先来一波盛世美颜暴击~~</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/image-20210817232708517.png" alt="image-20210817232708517"></p><p>​                                             m57（图源：NASA）</p><image src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/image-20210818194917907.png"><p>​                                             NGC 7293（图源：网络）</p><p>仔细观察，这两个长得一点都不一样好吧！！！虽然都是<a href="https://baike.baidu.com/item/%E8%A1%8C%E6%98%9F%E7%8A%B6%E6%98%9F%E4%BA%91/2474698">行星状星云</a>， 仔细观察，上帝之眼有眉毛，眼角也比较尖，单凭肉眼观测的话，上帝之眼整体比较暗。</p><h1 id="m57"><a href="#m57" class="headerlink" title="m57"></a>m57</h1><p>坐落于天琴座，最著名的<a href="https://baike.baidu.com/item/%E8%A1%8C%E6%98%9F%E7%8A%B6%E6%98%9F%E4%BA%91/2474698">行星状星云</a>，视星等8.8等,距离我们2300光年，换言之它的光在宇宙中孤独地旅行了2300年，只为遇见我们。</p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://www.nasa.gov/sites/default/files/thumbnails/image/ring-nebula-full_jpg.jpg"><p>图源：NASA</p><p>星云内部整体呈蓝绿色调，这是为什么呢？</p><p>这是双电离氧在495.7nm和500.7nm的发射线造成的。红色部分来自于氢在656.3nm的发射线，另外电离氮在654.8nm和658.3nm的禁线也有助于红色的体现。</p><p>人类肉眼可见的颜色在下列近似波长</p><p>400nm~480nm之间的紫色光、蓝色光</p><p>480nm~560nm之间的绿色光</p><p>560nm~590nm之间的黄色光</p><p>590mn~630nm之间的橙色光</p><p>630nm~700nm之间的红色光</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4364c415ca27fb4aaa2df25ffa6b8ed5.jpeg" alt="查看源图像"></p><p>​                                                           图源：网络</p><h1 id="上帝之眼"><a href="#上帝之眼" class="headerlink" title="上帝之眼"></a>上帝之眼</h1><p>也称螺旋星云（ NGC 7293 or C63），坐落于宝瓶座，距离我们约700光年，这个距离和其他行星状星云相比，非常小啦，因此它是最接近地球的<a href="https://baike.baidu.com/item/%E8%A1%8C%E6%98%9F%E7%8A%B6%E6%98%9F%E4%BA%91/2474698">行星状星云</a>之一，视星等7.3 等。</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/JICTOSXRYV4K1Q1O_%60B%60K~M.jpg" alt="img"></p><p>图源：网络</p><p>之所以命名为“上帝之眼”是因为从图片来看，像极了一颗在宇宙中的监视一切眼睛，美丽又迷人，令人敬畏，蔚蓝色瞳孔和白眼球的四周是肉色的眼睑。所以人们通常称为螺旋星云为上帝之眼。</p><p>星云中间有一个白色的小亮点，那是白矮星。像太阳这样的恒星，在生命终结时抛出气体，在外围形成螺旋结构，内核最终冷却成低光度、高密度、高温度的白矮星。因此太阳的在生命结束后会形成美丽的行星状星云，在宇宙中安静地度过一生。</p><p>参考：</p><p>百度百科：</p><p><a href="https://baike.baidu.com/item/M57/1791271">M57_百度百科 (baidu.com)</a></p><p>[NGC 7293_百度百科 (baidu.com)](<a href="https://baike.baidu.com/item/NGC">https://baike.baidu.com/item/NGC</a> 7293/5579661)</p><p>维基百科：</p><p><a href="https://zh.wikipedia.org/wiki/%E8%9E%BA%E6%97%8B%E6%98%9F%E9%9B%B2">螺旋星云 - 维基百科，自由的百科全书 (wikipedia.org)</a></p>]]></content>
      
      
      <categories>
          
          <category> 天文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 🌟此处晴夜，彼处远星🌌 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我们为什么把时间定义为第四维度</title>
      <link href="2021/08/14/%E6%88%91%E4%BB%AC%E4%B8%BA%E4%BB%80%E4%B9%88%E6%8A%8A%E6%97%B6%E9%97%B4%E5%AE%9A%E4%B9%89%E4%B8%BA%E7%AC%AC%E5%9B%9B%E7%BB%B4%E5%BA%A6/"/>
      <url>2021/08/14/%E6%88%91%E4%BB%AC%E4%B8%BA%E4%BB%80%E4%B9%88%E6%8A%8A%E6%97%B6%E9%97%B4%E5%AE%9A%E4%B9%89%E4%B8%BA%E7%AC%AC%E5%9B%9B%E7%BB%B4%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>  ps:这篇文章最先发布在知乎上，我的知乎账号是森屿li,原文章传送门：<a href="https://www.zhihu.com/question/280407863/answer/1655060011"> 我们为什么要把时间定义为第四维度？ - 知乎 (zhihu.com)</a></p></blockquote><p>我之前也一直不太清楚，为什么把时间当做第四维度，即使我看了很多关于维度的视频，也去查了百度，但是大多数名词都太专业，无法深刻理解。直到今天，我看了罗翔老师一个关于《西游记》中的冒名顶替的视频，视频结尾引发了我对平行世界的思考，终于在洗澡的时候顿悟了。</p><p><a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/BV1ua411c7L1?from=search&seid=6552491063737341680">【罗翔】细思恐极的《西游记》，从真假美猴王到唐僧的离奇身世_哔哩哔哩 (゜-゜)つロ 干杯~-bilibiliwww.bilibili.com/video/BV1ua411c7L1?from=search&amp;seid=6552491063737341680<img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://pic2.zhimg.com/v2-82bae7a47fd0b5a8291d42d3e8c7d649_180x120.jpg?source=c8b7c179" alt="img"></a></p><p>下面我将通过类比来助力想象。你们看一维是线，线动成面，无数条线构成面二维是面，面动成体，无数个面构成体三维是体，物体运动起来，就有了时间的概念。<img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://pic2.zhimg.com/80/v2-5ca776d9db8daf20da62deecfedd74ce_720w.jpg?source=c8b7c179" alt="img">ps：（时间的概念是 物质的运动、变化的持续性、顺序性的表现。）因此，如果从四维生物的角度来看三维生物，便可以清晰地看到三维生物的一生，从出生到死亡，因为那是无数个时刻的运动轨迹构成的，就像我们三维生物看二维（好像没有二维生物），我们可以看到无数的线构成平面，在四维种也是这样，看到不同时刻的自己在干些什么，也就是无数时刻。好了，现在我们已经有了四维时空的概念，即在三维中多了时间轴，那么五维的世界是怎么样的呢，别着急，慢慢来。<strong>五维</strong>在四维世界中，可以看到一个生物的一生，但是，这个生命的每个时刻，都可以做出不同的决定，每个决定，都意味着不同的结局。无数个时刻，对应着不同的节点。那么，我们现在把这个生物无数的命运，组合起来，就形成了五维世界，也就是我们平常所说的平行宇宙。<img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://pica.zhimg.com/80/v2-f12c02c6e0685070570f6e2ed3b1fba3_720w.jpg?source=c8b7c179" alt="img">PS：（这里引用了平行宇宙的概念，平行宇宙是指从某个宇宙中分离出来，与原宇宙平行存在着的既相似又不同的其他宇宙。）在每个平行宇宙里，都有一个自己，相似而不相似，因为每个节点做出的决定不同，所以每个自己的命运都不相同。（突然想到一个很恐怖的事，如果这个假设是真的，那么这个平行宇宙里的自己的命运似乎已经在一开始就决定了，再怎么也无法改变了。这里并不宣扬命运天定思想，只是突然想到了，感慨一下。）也就是说，我们可以回到过去，改变曾经做过的事。而轻松躲避祖父悖论，因为你穿越到的是另一个平行宇宙，你改变的是那个平行宇宙的自己的运动轨迹，而你原来所处的平行宇宙还是那样，没有任何改变。PS：（祖父悖论又称为外祖母悖论，是一种时间旅行的悖论。假设你回到过去，在自己出生前把自己的祖父母杀死；因为你祖父母死了，所以没有你的父亲；没有了你的父亲，你就不会出生；你没出生，就没有人把你祖父母杀死；若是没有人把你祖父母杀死，你就会存在并回到过去把你的祖父母杀死，于是矛盾出现了。）好了，现在我们来简单的总结一下：二维是一维的集合，三维是二维的集合，四维是三维的集合，五维是四维的集合。当然，越到高维，相邻维度之间并不是简单的组合，而是通过一些复杂的物理关系联系起来。这里只是做出简单的类比，帮助想象。六维世界到底是怎么样的，鄙人想象力有限，暂时没有想象出，可能，这就是低维生物的卑微之处吧。<img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/v2-bdf75a911128dc278599c60abfd58588_720w.jpg" alt="img">我们就像井底之蛙，以为看到井口的那一方田空，就是全部。殊不知，天空之外是太阳系，太阳系之外是银河系，银河系外是河外星系，河外星系之外是多元宇宙，多元宇宙之外……PS：以上解释完全来源于想象，并没有科学的证明。</p><p><a href="https://www.zhihu.com/question/280407863/answer/1655060011">编辑于 2020-12-31</a></p>]]></content>
      
      
      <categories>
          
          <category> 天文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 🌟此处晴夜，彼处远星🌌 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法</title>
      <link href="2021/07/28/%E7%AE%97%E6%B3%95/"/>
      <url>2021/07/28/%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="gcd"><a href="#gcd" class="headerlink" title="gcd"></a>gcd</h1><p>最大公约数</p><h2 id="辗转相除法"><a href="#辗转相除法" class="headerlink" title="辗转相除法"></a>辗转相除法</h2><h3 id="while循环版"><a href="#while循环版" class="headerlink" title="while循环版"></a>while循环版</h3><p>这里可以证明(a,b)=(b,r),证明见高数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;<span class="comment">//a,b可以为0</span></span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line">    <span class="keyword">while</span>(b&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        r=a%b;</span><br><span class="line">        a=b;</span><br><span class="line">        b=r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三目运算版："><a href="#三目运算版：" class="headerlink" title="三目运算版："></a>三目运算版：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;<span class="comment">//a,b可以为0</span></span><br><span class="line">    <span class="keyword">return</span> b&gt;<span class="number">0</span> ? <span class="built_in">gcd</span>(b,a%b):a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="lcm"><a href="#lcm" class="headerlink" title="lcm"></a>lcm</h1><p>两个整数的最小公倍数与最大公因数之间有如下的关系：</p><p><em>l<strong>c</strong>m</em>(<em>a</em>,<em>b</em>)=∣<em>a</em>⋅<em>b</em>∣/<em>g<strong>c</strong>d</em>(<em>a</em>,<em>b</em>)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lcm</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a * b / <span class="built_in">gcd</span>(a, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">101</span>],b[<span class="number">101</span>],m[<span class="number">101</span>];</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a, ll n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">qpow</span>(a, n - <span class="number">1</span>) * a % mod;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        ll temp = <span class="built_in">qpow</span>(a, n / <span class="number">2</span>) % mod;</span><br><span class="line">        <span class="keyword">return</span> temp * temp % mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">while</span>(n--)&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a,b,k,x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld %lld&quot;</span>,&amp;a,&amp;b,&amp;k);</span><br><span class="line">x=k/<span class="number">2</span>;</span><br><span class="line">x=<span class="built_in">qpow</span>(<span class="number">2</span>,x);</span><br><span class="line"><span class="keyword">if</span>(k%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld %lld\n&quot;</span>,(x*a)%mod,(b*x)%mod);</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> y=((a-b)*x)%mod;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> m=((a+b)*x)%mod;</span><br><span class="line"><span class="keyword">if</span>(y&lt;<span class="number">0</span>)y=y+mod;</span><br><span class="line"><span class="keyword">if</span>(m&lt;<span class="number">0</span>)m=m+mod;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld %lld\n&quot;</span>,m,y);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>取模运算的性质：</p><p>(a×b)%p==[(a%p)×(b%p)]%p</p><p>如果取模以后是负数的话，要再加一个mod.</p><h2 id="正题"><a href="#正题" class="headerlink" title="正题"></a>正题</h2><p>如果我们要算3^10^，暴力的做法是ans=1，ans*=3，一直×10次，但是如果不是10，而是10^9^,这个增量是可怕的，long long类型也不能装下，直接溢出了，所以我们要对ans进行取模。取模以后，算10^9^次，这个对计算机一秒的运算量也是达到了极限，所以我们可以再优化一下，还是拿3^10^ 来举例，我们可以先算出3^5^,然后让其自乘，那么我们如何计算出3^5^呢，这是我们发现指数5不能均分，但是我们可以拆成3×3^2^×3^2^.以此类推，3^2^=3×3.</p><p>我们可以总结如下规律：</p><ul><li><p>  如果指数是偶数，那么将指数均分，让底数幂相乘</p></li><li><p>  如果指数是偶数，先拿出一个底数，再与均分后的底数幂相乘</p></li></ul><p>上代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ll <span class="title">fast_power</span><span class="params">(ll a,ll b)</span></span>&#123;</span><br><span class="line">ll ans=<span class="number">1</span>;</span><br><span class="line">a%=mod;<span class="comment">//为了防止输入的a过大，直接对a取模 </span></span><br><span class="line"><span class="keyword">while</span>(b)&#123;</span><br><span class="line"><span class="keyword">if</span>(b&amp;<span class="number">1</span>)&#123;<span class="comment">//在二进制下，如果b是奇数，那么最后一位是1，和1&amp;之后，应该还是1 </span></span><br><span class="line">ans=(ans*a)%mod;</span><br><span class="line">&#125;</span><br><span class="line">a=(a*a)%mod;</span><br><span class="line">b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h1><h2 id="一维前缀和"><a href="#一维前缀和" class="headerlink" title="一维前缀和"></a>一维前缀和</h2><p>sum[i,j]=sum[j]-sum[i-1]</p><p>问题：</p><p>求l，r区间的前缀和</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[maxn]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> b[maxn]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n,t;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line">b[i]=b[i<span class="number">-1</span>]+a[i];</span><br><span class="line">&#125;</span><br><span class="line">cin&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line">cin&gt;&gt;l&gt;&gt;r;</span><br><span class="line">cout&lt;&lt;b[r]-b[l<span class="number">-1</span>]&lt;&lt;endl; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.luogu.com.cn/problem/P5638">P5638 【CSGRound2】光骓者的荣耀 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll sum[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ll x,n,k;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">sum[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;x;</span><br><span class="line">sum[i]+=sum[i<span class="number">-1</span>]+x;<span class="comment">//计算前缀和 </span></span><br><span class="line">&#125;</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=k;i&lt;=n;i++)&#123;</span><br><span class="line">ans=<span class="built_in">max</span>(ans,sum[i]-sum[i-k]);<span class="comment">//找到距离为k的两城市最大时间 </span></span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;sum[n]-ans&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二维前缀和"><a href="#二维前缀和" class="headerlink" title="二维前缀和"></a>二维前缀和</h2><p><code>sum[x1,y1][x2,y2]=sum[x2][y2]-sum[x2][y1-1]-sum[x1-1][y2]-sum[x1-1][y1-1]//多减的要加回来 那么sum是怎么算出来的？ sum[i][j]=sum[i][j-1]+sum[i-1][j]+g[i][j]-sum[i-1][j-1] 注意当i=0，j=0时，sum[0][0]=g[0][0] 当i=0时，相当于前缀和 sum[0][j]=sum[0][j-1]+g[0][j] 当j=0时，相当于一维前缀和 sum[i][0]=sum[i-1][0]+g[i][0]</code></p><p>计算(x1,y1)到(x2,y2)那部分粉色的区域和，可以用sum(x2,y2)-绿色部分-深蓝色部分，但是浅绿色部分减了两次，因此要加回来。</p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/二维前缀和.png"><p>特别地，当x1=0时，只需要减去深蓝色部分即可。</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/%5DH%60ITVZBPNEQX7%60%60EKW%7BESD.png" alt="img"></p><p>同理，当y1=0时，也是只需要减去深蓝色部分即可。</p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/3JE6S_}EDBPP00A8(SU63QR.png"><p>贴代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> t[<span class="number">1001</span>][<span class="number">1001</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> n=<span class="number">3</span>,m=<span class="number">4</span>;</span><br><span class="line"><span class="keyword">int</span> sum[n][m];</span><br><span class="line"><span class="keyword">int</span> g[n][m]=&#123; &#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>&#125;,</span><br><span class="line">              &#123;<span class="number">9</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">3</span>&#125;,</span><br><span class="line">  &#123;<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>&#125;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre_sum</span><span class="params">()</span></span>&#123;</span><br><span class="line">sum[<span class="number">0</span>][<span class="number">0</span>]=g[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)sum[i][<span class="number">0</span>]=sum[i<span class="number">-1</span>][<span class="number">0</span>]+g[i][<span class="number">0</span>];<span class="comment">//第一列</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;m;j++)sum[<span class="number">0</span>][j]=sum[<span class="number">0</span>][j<span class="number">-1</span>]+g[<span class="number">0</span>][j];<span class="comment">//第一行</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;m;j++)&#123;</span><br><span class="line">sum[i][j]=g[i][j]+sum[i][j<span class="number">-1</span>]+sum[i<span class="number">-1</span>][j]-sum[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_sum</span><span class="params">(<span class="keyword">int</span> x1,<span class="keyword">int</span> y1,<span class="keyword">int</span> x2,<span class="keyword">int</span> y2)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x1==<span class="number">0</span>&amp;&amp;y1==<span class="number">0</span>)<span class="keyword">return</span> sum[x2][y2];<span class="comment">//相当于求左上角，直接返回sum[i][j]即可</span></span><br><span class="line"><span class="keyword">if</span>(x1==<span class="number">0</span>)<span class="keyword">return</span> sum[x2][y2]-sum[x2][y1<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">if</span>(x2==<span class="number">0</span>)<span class="keyword">return</span> sum[x2][y2]-sum[x1<span class="number">-1</span>][y2];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> sum[x2][y2]-sum[x2][y1<span class="number">-1</span>]-sum[x1<span class="number">-1</span>][y2]+sum[x1<span class="number">-1</span>][y1<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">pre_sum</span>();</span><br><span class="line">cout&lt;&lt;<span class="built_in">get_sum</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>)&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;<span class="built_in">get_sum</span>(<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下标为1写法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> sum[<span class="number">1001</span>][<span class="number">1001</span>];</span><br><span class="line"><span class="keyword">int</span> g[<span class="number">1001</span>][<span class="number">1001</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre_sum</span><span class="params">()</span></span>&#123;</span><br><span class="line">sum[<span class="number">0</span>][<span class="number">0</span>]=g[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">sum[i][j]=g[i][j]+sum[i][j<span class="number">-1</span>]+sum[i<span class="number">-1</span>][j]-sum[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_sum</span><span class="params">(<span class="keyword">int</span> x1,<span class="keyword">int</span> y1,<span class="keyword">int</span> x2,<span class="keyword">int</span> y2)</span></span>&#123;</span><br><span class="line"> <span class="keyword">return</span> sum[x2][y2]-sum[x2][y1<span class="number">-1</span>]-sum[x1<span class="number">-1</span>][y2]+sum[x1<span class="number">-1</span>][y1<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">cin&gt;&gt;g[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pre_sum</span>();</span><br><span class="line">cout&lt;&lt;<span class="built_in">get_sum</span>(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>)&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;<span class="built_in">get_sum</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题目连接：<a href="https://www.luogu.com.cn/problem/P2004">P2004 领地选择 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> g[<span class="number">3002</span>][<span class="number">3002</span>];</span><br><span class="line"><span class="keyword">int</span> sum[<span class="number">3002</span>][<span class="number">3002</span>];</span><br><span class="line"><span class="keyword">int</span> maxx=<span class="number">-9999999999999</span>;</span><br><span class="line"><span class="keyword">int</span> xi,yi;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m&gt;&gt;a;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">cin&gt;&gt;g[i][j]; </span><br><span class="line">sum[i][j]=sum[i<span class="number">-1</span>][j]+sum[i][j<span class="number">-1</span>]-sum[i<span class="number">-1</span>][j<span class="number">-1</span>]+g[i][j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n-a+<span class="number">1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m-a+<span class="number">1</span>;j++)&#123;<span class="comment">//i+a-1,j+a-1为右下角下标</span></span><br><span class="line"><span class="keyword">int</span> ans=sum[i+a<span class="number">-1</span>][j+a<span class="number">-1</span>]-sum[i+a<span class="number">-1</span>][j<span class="number">-1</span>]-sum[i<span class="number">-1</span>][j+a<span class="number">-1</span>]+sum[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">if</span>(maxx&lt;ans)&#123;</span><br><span class="line">maxx=ans;</span><br><span class="line">xi=i,yi=j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;xi&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;yi&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h1><h2 id="一维差分"><a href="#一维差分" class="headerlink" title="一维差分"></a>一维差分</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> d[<span class="number">6</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">d[l]+=v;</span><br><span class="line">d[r+<span class="number">1</span>]-=v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">5</span>]=&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="built_in">add</span>(<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line"><span class="built_in">add</span>(<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">add</span>(<span class="number">0</span>,<span class="number">2</span>,<span class="number">-3</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">d[i]+=d[i<span class="number">-1</span>];</span><br><span class="line">cout&lt;&lt;d[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">arr[i]+=d[i];</span><br><span class="line">cout&lt;&lt;arr[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(d));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于优化，这里我们不用一个数组记录值，减少一个数组的空间，但是我们要记录前一项的值。</p><p>•题目链接：<a href="https://www.acwing.com/problem/content/799/">AcWing</a><a href="https://www.acwing.com/problem/content/799/"> </a><a href="https://www.acwing.com/problem/content/799/">【</a><a href="https://www.acwing.com/problem/content/799/">797. </a><a href="https://www.acwing.com/problem/content/799/">差分</a><a href="https://www.acwing.com/problem/content/799/">】</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> m,n,l,r,c;</span><br><span class="line"><span class="keyword">int</span> b[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">int</span> last=<span class="number">0</span>,now;<span class="comment">//last记录前一项的值</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;now;</span><br><span class="line">b[i]=now-last;</span><br><span class="line">last=now;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">cin&gt;&gt;l&gt;&gt;r&gt;&gt;c;</span><br><span class="line">b[l]+=c;</span><br><span class="line">b[r+<span class="number">1</span>]-=c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">sum+=b[i];</span><br><span class="line">cout&lt;&lt;sum&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="语文成绩"><a href="#语文成绩" class="headerlink" title="语文成绩"></a>语文成绩</h3><p>传送门：<a href="https://www.luogu.com.cn/problem/P2367">P2367 语文成绩 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>语文考试结束了，成绩还是一如既往地有问题。</p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>语文老师总是写错成绩，所以当她修改成绩的时候，总是累得不行。她总是要一遍遍地给某些同学增加分数，又要注意最低分是多少。你能帮帮她吗？</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行有两个整数 n<em>n</em>，p<em>p</em>，代表学生数与增加分数的次数。</p><p>第二行有 n<em>n</em> 个数，a_1 \sim a_n<em>a</em>1∼<em>a**n</em>，代表各个学生的初始成绩。</p><p>接下来 p<em>p</em> 行，每行有三个数，x<em>x</em>，y<em>y</em>，z<em>z</em>，代表给第 x<em>x</em> 个到第 y<em>y</em> 个学生每人增加 z<em>z</em> 分。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出仅一行，代表更改分数后，全班的最低</p><p>参考代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span><span class="comment">//分配空间 </span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">5e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn],d[maxn]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">d[l]+=v;</span><br><span class="line">d[r+<span class="number">1</span>]-=v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">cin&gt;&gt;a[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> x,y,z;</span><br><span class="line">cin&gt;&gt;x&gt;&gt;y&gt;&gt;z; </span><br><span class="line"><span class="built_in">add</span>(x<span class="number">-1</span>,y<span class="number">-1</span>,z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">d[i]+=d[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> minn=a[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">a[i]+=d[i]; </span><br><span class="line">minn=<span class="built_in">min</span>(minn,a[i]);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;minn&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二维差分"><a href="#二维差分" class="headerlink" title="二维差分"></a>二维差分</h2><p>二维差分和二维前缀和类似，多减去的区域要加回来。</p><p>在(x1,y2+1)-v，影响的区域是粉色部分，</p><p>在(x2,y1+1)-v，影响的区域是绿色部分。</p><p>二者重叠部分是浅绿色区域。</p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/二维差分.png"><p>上代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> n=<span class="number">3</span>,m=<span class="number">4</span>;</span><br><span class="line"><span class="keyword">int</span> sum[n][m];</span><br><span class="line"><span class="keyword">int</span> d[n+<span class="number">1</span>][m+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> g[n][m]=&#123; &#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>&#125;,</span><br><span class="line">              &#123;<span class="number">9</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">3</span>&#125;,</span><br><span class="line">  &#123;<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>&#125;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre_sum</span><span class="params">()</span></span>&#123;<span class="comment">//对修改后的d进行前缀和，看看改动的终态 </span></span><br><span class="line">sum[<span class="number">0</span>][<span class="number">0</span>]=d[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)sum[i][<span class="number">0</span>]=sum[i<span class="number">-1</span>][<span class="number">0</span>]+d[i][<span class="number">0</span>];<span class="comment">//第一列</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;m;j++)sum[<span class="number">0</span>][j]=sum[<span class="number">0</span>][j<span class="number">-1</span>]+d[<span class="number">0</span>][j];<span class="comment">//第一行</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;m;j++)&#123;</span><br><span class="line">sum[i][j]=d[i][j]+sum[i][j<span class="number">-1</span>]+sum[i<span class="number">-1</span>][j]-sum[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)g[i][j]+=sum[i][j];<span class="comment">//g[i][j]原数组加上变化终态即是结果 </span></span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x1,<span class="keyword">int</span> y1,<span class="keyword">int</span> x2,<span class="keyword">int</span> y2,<span class="keyword">int</span> v)</span></span>&#123;<span class="comment">//二维差分 </span></span><br><span class="line">d[x1][y1]+=v;</span><br><span class="line">d[x2+<span class="number">1</span>][y1]-=v;</span><br><span class="line">d[x1][y2+<span class="number">1</span>]-=v;</span><br><span class="line">d[x2+<span class="number">1</span>][y2+<span class="number">1</span>]+=v; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">add</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line"><span class="built_in">add</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">pre_sum</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)cout&lt;&lt;g[i][j]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">cout&lt;&lt;endl; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="冒泡"><a href="#冒泡" class="headerlink" title="冒泡"></a>冒泡</h2><p>略，时间复杂度O(n^2)</p><h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><p>时间复杂度O(n^2)</p><p>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。</p><p>再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</p><p>重复第二步，直到所有元素均排序完毕</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[]=&#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>&#125;,len=<span class="number">7</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len<span class="number">-1</span>;i++)&#123;<span class="comment">//最后一次不用排了，已经全部有序</span></span><br><span class="line"><span class="keyword">int</span> min=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;len;j++)&#123;<span class="comment">//注意这里j&lt;len</span></span><br><span class="line"><span class="keyword">if</span>(a[j]&lt;a[min])min=j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">swap</span>(a[min],a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)cout&lt;&lt;a[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">cout&lt;&lt;endl; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><p>将第一待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。</p><p>从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。（如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertion_sort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> key=a[i];</span><br><span class="line"><span class="keyword">int</span> j=i<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>((j&gt;=<span class="number">0</span>)&amp;&amp;(key&lt;a[j]))&#123;</span><br><span class="line">a[j+<span class="number">1</span>]=a[j];<span class="comment">//右移1</span></span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line">a[j+<span class="number">1</span>]=key;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用数组0位置来充当暂存单元</span></span><br><span class="line"><span class="comment">/*假设第一个序列（ i=1）为有序序列，则后面都是无序序列*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertsort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">a[<span class="number">0</span>]=a[i];<span class="comment">//a[0]暂存a[i]的值，防止后面移动数组覆盖丢失</span></span><br><span class="line"><span class="keyword">int</span> j=i<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(a[<span class="number">0</span>]&lt;a[j])&#123;<span class="comment">//a[0]在查找插入位置循环中充当件事哨兵 </span></span><br><span class="line">a[j+<span class="number">1</span>]=a[j];</span><br><span class="line">j--;</span><br><span class="line">&#125; </span><br><span class="line">a[j+<span class="number">1</span>]=a[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//ps:此写法数组下标必须从1开始</span></span><br></pre></td></tr></table></figure><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p>时间复杂度：O(nlog2n)</p><p>先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录”基本有序”时，再对全体记录进行依次直接插入排序。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下标从1开始</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shellsort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> d=n/<span class="number">2</span>;d&gt;=<span class="number">1</span>;d/=<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=d+<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">a[<span class="number">0</span>]=a[i];</span><br><span class="line"><span class="keyword">int</span> j=i-d;</span><br><span class="line"><span class="keyword">while</span>(j&gt;<span class="number">0</span>&amp;&amp;a[<span class="number">0</span>]&lt;a[j])&#123;</span><br><span class="line">a[j+d]=a[j];</span><br><span class="line">j-=d;</span><br><span class="line">&#125;</span><br><span class="line">a[j+d]=a[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//下标从0开始</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shellsort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> d=n/<span class="number">2</span>;d&gt;=<span class="number">1</span>;d/=<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=d;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> temp=a[i];</span><br><span class="line"><span class="keyword">int</span> j=i-d;</span><br><span class="line"><span class="keyword">while</span>(j&gt;=<span class="number">0</span>&amp;&amp;temp&lt;a[j])&#123;</span><br><span class="line">a[j+d]=a[j];</span><br><span class="line">j-=d;</span><br><span class="line">&#125;</span><br><span class="line">a[j+d]=temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然希尔排序有三重循环，但是一开始d比较大，分的组多，每个组的元素少，因此比较的速度快，之后数组逐渐变得有序，因此后期也不需要过多的操作，因此速度会快。</p><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>数组排序任务也可以按如下完成： </p><p>1）设<em>k</em>=<em>a</em>[0], 将<em>k</em>挪到适当位置，使得比<em>k</em>小的元素都在<em>k</em>左边,比<em>k</em>大的元素都在<em>k</em>右边，和<em>k</em>相等的，不关心在<em>k</em>左右出现均可 （O(<em>n</em>)时间完成）</p><p>2 ）把<em>k</em>左边的部分快速排序 </p><p>3 ）把<em>k</em>右边的部分快速排序</p><p>快速排序的三个优化方法：</p><p>\1. 规模很小时（如end－first＜10），使用插入排序代替快速排序。</p><p>\2. 使用栈模拟递归。</p><p>\3. 极端数据（如比较有序的数组）会使快速排序变慢，甚至退化为冒泡排序。可以采用“三者取中法”来解决这个问题：令<em>k</em>等于a[first]、a[end]、a[(first+end)/2]中的中间值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> first,<span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i=first;</span><br><span class="line"><span class="keyword">int</span> j=end;</span><br><span class="line"><span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line"><span class="keyword">while</span>(i&lt;j&amp;&amp;a[i]&lt;=a[j])j--;</span><br><span class="line"><span class="keyword">if</span>(i&lt;j)<span class="built_in">swap</span>(a[i],a[j]);</span><br><span class="line"><span class="keyword">while</span>(i&lt;j&amp;&amp;a[i]&lt;=a[j])i++;</span><br><span class="line"><span class="keyword">if</span>(i&lt;j)<span class="built_in">swap</span>(a[i],a[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quicksort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> first,<span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(first&lt;end)&#123;</span><br><span class="line"><span class="keyword">int</span> pos=<span class="built_in">partition</span>(a,first,end);</span><br><span class="line"><span class="built_in">quicksort</span>(a,first,pos<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">quicksort</span>(a,pos+<span class="number">1</span>,end); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">qsort</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span><span class="comment">//应用二分思想</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid=a[(l+r)/<span class="number">2</span>];<span class="comment">//中间数</span></span><br><span class="line">    <span class="keyword">int</span> i=l,j=r;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(a[i]&lt;mid) i++;<span class="comment">//查找左半部分比中间数大的数</span></span><br><span class="line">        <span class="keyword">while</span>(a[j]&gt;mid) j--;<span class="comment">//查找右半部分比中间数小的数</span></span><br><span class="line">        <span class="keyword">if</span>(i&lt;=j)<span class="comment">//如果有一组不满足排序条件（左小右大）的数</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">swap</span>(a[i],a[j]);<span class="comment">//交换</span></span><br><span class="line">            i++;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">while</span>(i&lt;=j);<span class="comment">//这里注意要有=</span></span><br><span class="line">    <span class="keyword">if</span>(l&lt;j) <span class="built_in">qsort</span>(l,j);<span class="comment">//递归搜索左半部分</span></span><br><span class="line">    <span class="keyword">if</span>(i&lt;r) <span class="built_in">qsort</span>(i,r);<span class="comment">//递归搜索右半部分</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>数组排序任务可以如下完成： </p><p>1） 把前一半排序 </p><ol start="2"><li> 把后一半排序 </li></ol><p>3)将这两半归并到一个新的有序数组，然后再拷贝回原数组，排序完成。</p><p>●时间复杂度O(nlogn)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span><span class="comment">//分配空间</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//合并</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> tmpa[],<span class="keyword">int</span> left,<span class="keyword">int</span> mid,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line"><span class="comment">//标记左半区间第一个未排序的元素</span></span><br><span class="line"><span class="keyword">int</span> l_pos=left; </span><br><span class="line"><span class="comment">//标记右半区间第一个未标记的元素</span></span><br><span class="line"><span class="keyword">int</span> r_pos=mid+<span class="number">1</span>;</span><br><span class="line"><span class="comment">//临时数组的下标</span></span><br><span class="line"><span class="keyword">int</span> i =left;</span><br><span class="line"><span class="comment">//合并</span></span><br><span class="line"><span class="keyword">while</span>(l_pos&lt;=mid&amp;&amp;r_pos&lt;=right)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[l_pos]&lt;a[r_pos])<span class="comment">//左半区间第一个剩余元素更小</span></span><br><span class="line">tmpa[i++]=a[l_pos++];</span><br><span class="line"><span class="keyword">else</span> tmpa[i++]=a[r_pos++]; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//合并左半区间剩余的元素 </span></span><br><span class="line"><span class="keyword">while</span>(l_pos&lt;=mid)tmpa[i++]=a[l_pos++];</span><br><span class="line"><span class="comment">//合并右半区间剩余的元素</span></span><br><span class="line"><span class="keyword">while</span>(r_pos&lt;=right)tmpa[i++]=a[r_pos++];</span><br><span class="line"><span class="comment">//把临时数组合并后的元素复制到原来的数组 </span></span><br><span class="line"><span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">a[left]=tmpa[left];</span><br><span class="line">left++;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//归并排序入口</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">msort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> tmpa[],<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line"><span class="comment">//若只有一个元素，则无需划分，直接归并即可</span></span><br><span class="line"><span class="keyword">if</span>(left&lt;right)&#123;</span><br><span class="line"><span class="keyword">int</span> mid=(left+right)/<span class="number">2</span>;</span><br><span class="line"><span class="built_in">msort</span>(a,tmpa,left,mid);</span><br><span class="line"><span class="built_in">msort</span>(a,tmpa,mid+<span class="number">1</span>,right);</span><br><span class="line"><span class="built_in">merge</span>(a,tmpa,left,mid,right);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//归并排序入口 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergesort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> *tmpa=(<span class="keyword">int</span>*)<span class="built_in">malloc</span>(n*<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="keyword">if</span> (tmpa)&#123;<span class="comment">//辅助数组分配成功</span></span><br><span class="line"> <span class="built_in">msort</span>(a,tmpa,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line"> <span class="built_in">free</span>(tmpa);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><blockquote><p>  参考自<a href="https://labuladong.gitbook.io/algo/mu-lu-ye/dong-tai-gui-hua-xiang-jie-jin-jie">动态规划解题套路框架 - labuladong的算法小抄 (gitbook.io)</a></p></blockquote><p>但凡遇到需要递归的问题，最好都画出递归树，这对你分析算法的复杂度，寻找算法低效的原因都有巨大帮助。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="comment">//边界条件</span></span><br><span class="line"><span class="keyword">if</span> (n==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">1</span>||n==<span class="number">2</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//开辟长度为n+1的dp数组，元素初始化为0</span></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;<span class="built_in">dp</span>(n+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">dp[<span class="number">1</span>]=dp[<span class="number">2</span>]=<span class="number">1</span>;<span class="comment">//边界条件初始化</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=n;i++)&#123;<span class="comment">//自底而上求出dp</span></span><br><span class="line">dp[i]=dp[i<span class="number">-1</span>]+dp[i<span class="number">-2</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[n];<span class="comment">//返回顶部的dp值，即所求</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">cout&lt;&lt;<span class="built_in">fib</span>(n)&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为当前状态之和前两个状态有关，所以没有必要开一个长度为n+1的数组，只需要用三个变量存储即可。将空间复杂度压缩为O(1).</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">1</span>||n==<span class="number">2</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>,pre=<span class="number">1</span>,now=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=n;i++)&#123;</span><br><span class="line">sum=pre+now;</span><br><span class="line">pre=now;</span><br><span class="line">now=sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">cout&lt;&lt;<span class="built_in">fib</span>(n)&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>  简单说说子序列和子串的区别，子序列是分开的，而子串是连续的。</p><p>  例如23456的子序列可以是246(可分散)，而子串可以是456(必须连续)。</p><p>  不能用暴力搜索，因为一个长度为n的序列拥有 2的n次方个子序列，它的时间复杂度是指数阶。直接炸掉。这时，我们需要借助动态规划来解决这个问题。</p></blockquote><h2 id="最长上升子序列问题（LIS）"><a href="#最长上升子序列问题（LIS）" class="headerlink" title="最长上升子序列问题（LIS）"></a>最长上升子序列问题（LIS）</h2><p>1.设计状态</p><p>记f(i)为以a[i]结尾的LIS长度，那么LIS=max{f(i)}</p><p>2.推导f(i),f(i)从何而来</p><p>考虑比i小的每一个j，如果a[i]&gt;a[j],那么f(i)=f(j)+1</p><p>3.状态转移方程</p><p>f(i)=max(f(i),f(j)+1) 前提：j&lt;i,a[j]&lt;a[i]</p><p>最后贴一下代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn],f[maxn];</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">f[i]=<span class="number">1</span>;<span class="comment">//初始化为1</span></span><br><span class="line">cin&gt;&gt;a[i]; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;i;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[j]&lt;a[i])</span><br><span class="line">f[i]=<span class="built_in">max</span>(f[i],f[j]+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)ans=<span class="built_in">max</span>(ans,f[i]);</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最长上升子串问题"><a href="#最长上升子串问题" class="headerlink" title="最长上升子串问题"></a>最长上升子串问题</h2><p>题目链接<a href="https://codeforces.com/problemset/problem/580/A">Problem - 580A - Codeforces</a></p><p>（最好不要这样写，会超时）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn],f[maxn];</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">f[i]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;f[i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;i;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[j]&lt;=a[i]&amp;&amp;i-j==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">f[i]=<span class="built_in">max</span>(f[i],f[j]+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans=<span class="built_in">max</span>(ans,f[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 推荐简单写法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#include</span> &lt;iostream&gt;</span><br><span class="line"><span class="selector-id">#include</span> &lt;cstdio&gt;</span><br><span class="line"><span class="selector-id">#include</span> &lt;cstring&gt;</span><br><span class="line"><span class="selector-id">#include</span> &lt;algorithm&gt;</span><br><span class="line">const int maxn=1e6+5;</span><br><span class="line">int <span class="selector-tag">a</span><span class="selector-attr">[maxn]</span>;</span><br><span class="line">int f<span class="selector-attr">[maxn]</span>;</span><br><span class="line">using namespace std;</span><br><span class="line">int <span class="selector-tag">main</span>()&#123;</span><br><span class="line">int n,ans=0,maxx=1,pos=0;</span><br><span class="line">scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">for(int i=0;i&lt;n;i++)cin&gt;&gt;a[i];</span><br><span class="line">int cnt=1;</span><br><span class="line">for(int i=1;i&lt;n;i++)&#123;</span><br><span class="line">if(a[i]&gt;=a[i-1])&#123;</span><br><span class="line">cnt++;</span><br><span class="line">maxx=(maxx,cnt);</span><br><span class="line">&#125;</span><br><span class="line">else cnt=1;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%d\n&quot;,maxx);</span><br><span class="line">return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最长公共子序列-LCS"><a href="#最长公共子序列-LCS" class="headerlink" title="最长公共子序列(LCS)"></a>最长公共子序列(LCS)</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">char</span> a[<span class="number">1001</span>], b[<span class="number">1001</span>];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">1001</span>][<span class="number">1001</span>], len1, len2;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lcs</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=len1; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>; j&lt;=len2; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i<span class="number">-1</span>] == b[j<span class="number">-1</span>])</span><br><span class="line">                dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>] + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(dp[i<span class="number">-1</span>][j] &gt; dp[i][j<span class="number">-1</span>])</span><br><span class="line">                dp[i][j] = dp[i<span class="number">-1</span>][j];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                dp[i][j] = dp[i][j<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot; %s&quot;</span>,a))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot; %s&quot;</span>, b);</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(dp));</span><br><span class="line">        len1 = <span class="built_in">strlen</span>(a);</span><br><span class="line">        len2 = <span class="built_in">strlen</span>(b);</span><br><span class="line">        <span class="built_in">lcs</span>(len1, len2);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, dp[len1][len2]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="子序列出现的次数"><a href="#子序列出现的次数" class="headerlink" title="子序列出现的次数"></a>子序列出现的次数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[<span class="number">5005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">char</span> s1[<span class="number">5005</span>],s2[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%s %s&quot;</span>,s1,s2)!=<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> len1=<span class="built_in">strlen</span>(s1);</span><br><span class="line"><span class="keyword">int</span> len2=<span class="built_in">strlen</span>(s2);</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(dp));</span><br><span class="line"><span class="keyword">if</span>(s1[<span class="number">0</span>]==s2[<span class="number">0</span>])dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len1;++i)&#123;</span><br><span class="line">dp[i][<span class="number">0</span>]=dp[i<span class="number">-1</span>][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span>(s1[i]==s2[<span class="number">0</span>])++dp[i][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len1;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;len2;++j)&#123;</span><br><span class="line"><span class="keyword">if</span>(s1[i]==s2[j])&#123;</span><br><span class="line">dp[i][j]=(dp[i<span class="number">-1</span>][j]+dp[i<span class="number">-1</span>][j<span class="number">-1</span>])%<span class="number">1000000007</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> dp[i][j]=dp[i<span class="number">-1</span>][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,dp[len1<span class="number">-1</span>][len2<span class="number">-1</span>]%<span class="number">1000000007</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h2><h4 id="01背包问题"><a href="#01背包问题" class="headerlink" title="01背包问题"></a>01背包问题</h4><p>未优化版</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> c[<span class="number">100</span>],w[<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> m,n;</span><br><span class="line">cin&gt;&gt;m&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;w[i]&gt;&gt;c[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(j&lt;w[i])dp[i][j]=dp[i<span class="number">-1</span>][j];</span><br><span class="line"><span class="keyword">else</span> dp[i][j]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][j],dp[i<span class="number">-1</span>][j-w[i]]+c[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出dp 数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=m;j++)</span><br><span class="line">&#123;</span><br><span class="line"> cout&lt;&lt;dp[i][j]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;dp[n][m]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>优化版</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"><span class="keyword">int</span> a,b,d,k,cnt;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans1,ans2;</span><br><span class="line"><span class="keyword">bool</span> st[maxn];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> c[<span class="number">100</span>],w[<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> m,n;</span><br><span class="line">cin&gt;&gt;m&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;w[i]&gt;&gt;c[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=m;j&gt;=<span class="number">1</span>;j--)&#123;</span><br><span class="line"><span class="keyword">if</span>(j&gt;=w[i])</span><br><span class="line">dp[j]=<span class="built_in">max</span>(dp[j],dp[j-w[i]]+c[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//for(int k=1;k&lt;=m;k++)cout&lt;&lt;dp[k]&lt;&lt;&quot; &quot;;</span></span><br><span class="line"><span class="comment">//cout&lt;&lt;endl;</span></span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;dp[m]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="完全背包问题"><a href="#完全背包问题" class="headerlink" title="完全背包问题"></a>完全背包问题</h4><p>未优化版本</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100005</span>;</span><br><span class="line"><span class="keyword">int</span> a,b,d,k,cnt;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans1,ans2;</span><br><span class="line"><span class="keyword">bool</span> st[maxn];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> c[<span class="number">100</span>],w[<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> m,n;</span><br><span class="line">cin&gt;&gt;m&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;w[i]&gt;&gt;c[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=m;j&gt;=<span class="number">1</span>;j--)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=j/w[i];k++)</span><br><span class="line">dp[j]=<span class="built_in">max</span>(dp[j],dp[j-k*w[i]]+k*c[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;dp[m]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>优化版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h1 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h1><h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><p>并查集(Union-find Sets)主要用来处理一些不相交集合的合并问题。</p><p>如求连通子图，求最小生成树的Kruskal算法和求最近公共祖先(LCA)等。</p><p>并查集的基本操作：</p><ol><li> 初始化init</li><li> 查询find</li><li> 合并union</li></ol><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> fa[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">fa[i]=i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用fa[]来存储每个元素的父结点。开始时，我们将它们的父结点初始化为它们自己。</p><p>因为最开始它们没有任何关系。之后合并才产生关系。</p><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>找到i的祖先直接返回，未进行路径压缩。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(fa[i]==i)<span class="keyword">return</span> i;<span class="comment">//递归出口</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">find</span>(fa[i]);<span class="comment">//不断向上查找祖先</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i_fa=<span class="built_in">find</span>(i);<span class="comment">//找到i的祖先</span></span><br><span class="line"><span class="keyword">int</span> j_fa=<span class="built_in">find</span>(j);<span class="comment">//找到j的祖先</span></span><br><span class="line">fa[i_fa]=fa[j_fa];<span class="comment">//i的祖先指向j的祖先</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这样我们会发现，每次都会重复找，效率非常低下，比如我们要合并(4,5),要去找4的祖先，合并(4,7)，还是要4的祖先，合并(4,100000000),依旧要找4的祖先，这条链很长，重复找的话会使时间复杂度变大。我们思考：那有什么办法可以压缩路径节省时间呢。</p><h3 id="路径压缩"><a href="#路径压缩" class="headerlink" title="路径压缩"></a>路径压缩</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i==fa[i])<span class="keyword">return</span> i;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">fa[i]=<span class="built_in">find</span>(fa[i]);<span class="comment">//直接设置f[i]的父结点</span></span><br><span class="line"><span class="keyword">return</span> fa[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>before:</p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/wyslj.png"><p>after:</p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/ljys.png"><p>题目：<a href="https://www.luogu.com.cn/problem/P3367">P3367 【模板】并查集 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><p>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> fa[maxn],b[maxn],map[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i==fa[i])<span class="keyword">return</span> i;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">fa[i]=<span class="built_in">find</span>(fa[i]);<span class="comment">//直接设置f[i]的父结点</span></span><br><span class="line"><span class="keyword">return</span> fa[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unionn</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i_fa=<span class="built_in">find</span>(i);<span class="comment">//找到i的祖先</span></span><br><span class="line"><span class="keyword">int</span> j_fa=<span class="built_in">find</span>(j);<span class="comment">//找到j的祖先</span></span><br><span class="line">fa[i_fa]=fa[j_fa];<span class="comment">//i的祖先指向j的祖先</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;<span class="comment">//父结点初始化为自己</span></span><br><span class="line">fa[i]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> x,y,z;</span><br><span class="line">cin&gt;&gt;z&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="keyword">if</span>(z==<span class="number">1</span>)<span class="built_in">unionn</span>(x,y);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">find</span>(x)==<span class="built_in">find</span>(y))cout&lt;&lt;<span class="string">&quot;Y&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;N&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h1><h2 id="基本定义"><a href="#基本定义" class="headerlink" title="基本定义"></a>基本定义</h2><p>顾名思义，采用贪心策略，保证每次操作都是局部最优，从而使最后得到的结果是全局最优的。</p><h2 id="分配问题"><a href="#分配问题" class="headerlink" title="分配问题"></a>分配问题</h2><p>有一群孩子和一堆饼干，每个孩子有一个饥饿度，每个饼干由一个大小。每个饼干有个大小。每个孩子只能吃最多一个饼干，且只有饼干的大小大于孩子的饥饿度时，孩子才能吃饱。求解最多有多少孩子可以吃饱。</p><p>输入输出样例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：2 3</span><br><span class="line">     1 2</span><br><span class="line">     1 2 3</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure><p>题解：</p><p>因为饥饿度最小的孩子最容易吃饱，所以我们先考虑这个孩子。为了尽量使得剩下的饼干可以满足饥饿度更大的孩子，所以我们应该把大于等于这个孩子饥饿度的、且大小最小的饼干给这个孩子。满足了这个孩子之后，我们采取同样的策略，考虑剩下孩子里饥饿度最小的孩子，直到没有满足条件的饼干存在。</p><p>简而言之，这里的贪心策略是，给<strong>剩余孩子里最小饥饿度的孩子分配最小的能饱腹的饼干</strong>。至于具体实现，因为我们需要获得大小关系，一个便捷的方法就是把孩子和饼干分别排序。这样我们就可以从饥饿度最小的孩子和大小最小的饼干出发，计算有多少个对子可以满足条件。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> cookies[maxn];</span><br><span class="line"><span class="keyword">int</span> children[maxn];</span><br><span class="line"><span class="keyword">int</span> n,m;<span class="comment">//孩子和饼干数量 </span></span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)cin&gt;&gt;children[i]; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)cin&gt;&gt;cookies[i];</span><br><span class="line"><span class="built_in">sort</span>(children,children+n);</span><br><span class="line"><span class="built_in">sort</span>(cookies,cookies+m);</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;n&amp;&amp;j&lt;m)&#123;</span><br><span class="line"><span class="keyword">if</span>(children[i]&lt;=cookies[j++])i++;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;i&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="区间问题"><a href="#区间问题" class="headerlink" title="区间问题"></a>区间问题</h2><p>给定多个区间，计算让这些区间互不重叠所需要移除区间的最少个数。起止相连不算重叠。</p><p>输入输出样例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">input: <span class="number">3</span></span><br><span class="line">   <span class="number">1</span> <span class="number">2</span></span><br><span class="line">       <span class="number">2</span> <span class="number">4</span></span><br><span class="line">       <span class="number">1</span> <span class="number">3</span></span><br><span class="line">output:<span class="number">1</span></span><br></pre></td></tr></table></figure><p>移除[1,3]，剩下区间便不会重叠</p><p><strong>题解</strong></p><p>在选择要保留区间时，区间的结尾十分重要:<strong>选择的区间结尾越小</strong>，余留给其它区间的空间就越大，就越能保留更多的区间。</p><p>因此，我们采取的贪心策略为，优先保留结尾小且不相交的区间。具体实现方法为， 先把区间按照结尾的大小进行增序排序，每次选择结尾最小且和前一个选择的区间不重叠的区间。在样例中，排序后的数组为[[1,2], [1,3], [2,4]]。按照我们的贪心策略，首先初始化为区间[1,2]; 由于[1,3]与[1,2]相交,我们跳过该区间;由于[2,4]与[1,2]不相交,我们将其保留。因此最终保留的区间为[[1 ,2], [2,4]]。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cnt</span>&#123;</span>  </span><br><span class="line">    <span class="keyword">int</span> a;  </span><br><span class="line">    <span class="keyword">int</span> b;  </span><br><span class="line">&#125; node[<span class="number">103</span>];  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmd</span><span class="params">(cnt x, cnt y)</span></span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> x.b &lt; y.b;  </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n; </span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">cin&gt;&gt;node[i].a&gt;&gt;node[i].b;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(node,node+n,cmd);</span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;<span class="comment">//满足的区间个数 </span></span><br><span class="line"><span class="keyword">int</span> pre=node[<span class="number">0</span>].b;<span class="comment">//第一个元素的结尾 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(node[i].b&gt;=pre)&#123;<span class="comment">//当前元素 的结尾大于前一个元素的结尾，说明是可以选择的 </span></span><br><span class="line">++count;</span><br><span class="line">pre=node[i].b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;n-count&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="买卖股票的最佳时机"><a href="#买卖股票的最佳时机" class="headerlink" title="买卖股票的最佳时机"></a>买卖股票的最佳时机</h2><p>给定一个数组，它的第i个元素是一支给定 股票第i天的价格。</p><p>股票)</p><p>注意:你不能同时参与多笔交易(你必须在再次购买前出售掉之前的股票)。</p><p>输入输出样例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入:7 1 5 3 6 4</span><br><span class="line">输出:7</span><br><span class="line">&#x2F;&#x2F;在第二天（price&#x3D;1）的时候买入，在第三天（price&#x3D;5）的时候卖出，这笔交易所能获得利润&#x3D;5-1&#x3D;4</span><br><span class="line">随后，在第4天（price&#x3D;3）的时候买入，在第5天（price&#x3D;6）的时候卖出，这笔交易所能获得利润&#x3D;6-3&#x3D;3.</span><br></pre></td></tr></table></figure><p>题解</p><p>贪心的思想：如果今天买明天卖可以赚钱，那就买入。</p><p>贴代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[maxn],n=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(cin&gt;&gt;a[n])&#123;</span><br><span class="line"><span class="keyword">if</span>(cin.<span class="built_in">get</span>()==<span class="string">&#x27;\n&#x27;</span>)<span class="keyword">break</span>;</span><br><span class="line">n++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> profit=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]&lt;a[i+<span class="number">1</span>])profit+=a[i+<span class="number">1</span>]-a[i];</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;profit&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过很多时候贪心往往得不到最优解，所以选择贪心的时候一定要慎重。</p><h1 id="数论"><a href="#数论" class="headerlink" title="数论"></a>数论</h1><h2 id="莫比乌斯反演"><a href="#莫比乌斯反演" class="headerlink" title="莫比乌斯反演"></a>莫比乌斯反演</h2><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><h4 id="容斥原理"><a href="#容斥原理" class="headerlink" title="容斥原理"></a>容斥原理</h4><p>两集合容斥原理：</p><p>AUB=A+B-A∩B=总数-外</p><p>三集合容斥原理：</p><p>W=AUBUC-A∩B-A∩C-B∩C+A∩B∩C</p><h3 id="素数筛"><a href="#素数筛" class="headerlink" title="素数筛"></a>素数筛</h3><p>也叫[Eratosthenes筛法(埃式筛法)</p><p>时间复杂度O(nloglogn)</p><p>理论依据：唯一分解定力（算术基本定理）</p><p>任何一个数至少存在一个小于等于自己的质因子。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">bool</span> a[<span class="number">100001000</span>];<span class="comment">//初始化为0说明一开始都是素数 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,s=<span class="number">0</span>;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;<span class="comment">//1肯定不是素数，略过 </span></span><br><span class="line"><span class="keyword">if</span>(a[i]==<span class="number">0</span>)&#123;<span class="comment">//如果a[i]是素数，那么它的倍数一定不是素数，筛掉 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>;j*i&lt;=n;j++)&#123;<span class="comment">//它的倍数从2倍开始，j倍的i小于等于N </span></span><br><span class="line">a[j*i]=<span class="number">1</span>;<span class="comment">//筛掉 ，就是达标记 </span></span><br><span class="line">&#125;</span><br><span class="line">s++;<span class="comment">//记录下a[i]这个素数 </span></span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">cout&lt;&lt;s&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线性筛"><a href="#线性筛" class="headerlink" title="线性筛"></a>线性筛</h3><p>时间复杂度O(n)</p><p>思想：用最小的质因子把它筛掉</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> prime[<span class="number">100001000</span>];<span class="comment">//prime[i]就是i的最小质因子 </span></span><br><span class="line"><span class="keyword">int</span> tag[<span class="number">100001000</span>];</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prim</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">tag[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">tag[<span class="number">2</span>]=<span class="number">0</span>;</span><br><span class="line">prime[<span class="number">0</span>]=<span class="number">2</span>;</span><br><span class="line">cnt=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=n;i+=<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(!tag[i])&#123;</span><br><span class="line">prime[cnt++]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;cnt&amp;&amp;i*prime[j]&lt;=n;j++)&#123;</span><br><span class="line">tag[i*prime[j]]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(i%prime[j]==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,s=<span class="number">0</span>;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">cout&lt;&lt;<span class="built_in">prim</span>(n)&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 🪐ACM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>思维训练</title>
      <link href="2021/07/26/%E6%80%9D%E7%BB%B4%E8%AE%AD%E7%BB%83/"/>
      <url>2021/07/26/%E6%80%9D%E7%BB%B4%E8%AE%AD%E7%BB%83/</url>
      
        <content type="html"><![CDATA[<h1 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h1><h2 id="快读"><a href="#快读" class="headerlink" title="快读"></a>快读</h2><p>因为scanf和cin很慢，我们发现使用getchar读取字符非常快，所以我们读取数字也用getchar来加快读取速度。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)f=<span class="number">-1</span>;ch=<span class="built_in">getchar</span>();&#125;<span class="comment">//负数情况</span></span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>;ch=<span class="built_in">getchar</span>();&#125;<span class="comment">//读取字符，转换为整数</span></span><br><span class="line">    <span class="keyword">return</span> x*f;<span class="comment">//考虑到负数，相乘以后再输出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Multiply-by-2-divide-by-6"><a href="#Multiply-by-2-divide-by-6" class="headerlink" title="Multiply by 2, divide by 6"></a>Multiply by 2, divide by 6</h1><p>You are given an integer nn. In one move, you can either multiply nn by two or divide nn by 66 (if it is divisible by 66 without the remainder).</p><p>Your task is to find the minimum number of moves needed to obtain 11 from nn or determine if it’s impossible to do that.</p><p>You have to answer tt independent test cases.</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>The first line of the input contains one integer tt (1≤t≤2⋅1041≤t≤2⋅104) — the number of test cases. Then tt test cases follow.</p><p>The only line of the test case contains one integer nn (1≤n≤1091≤n≤109).</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>For each test case, print the answer — the minimum number of moves needed to obtain 11 from nn if it’s possible to do that or -1 if it’s impossible to obtain 11 from nn.</p><p>Example</p><h2 id="Input-1"><a href="#Input-1" class="headerlink" title="Input"></a>Input</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">7</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">12</span><br><span class="line">12345</span><br><span class="line">15116544</span><br><span class="line">387420489</span><br></pre></td></tr></table></figure><h2 id="Output-1"><a href="#Output-1" class="headerlink" title="Output"></a>Output</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">-1</span><br><span class="line">2</span><br><span class="line">-1</span><br><span class="line">-1</span><br><span class="line">12</span><br><span class="line">36</span><br></pre></td></tr></table></figure><h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h2><p>Consider the sixth test case of the example. The answer can be obtained by the following sequence of moves from the given integer 1511654415116544:</p><ol><li><p> Divide by 66 and get 25194242519424;</p></li><li><p> divide by 66 and get 419904419904;</p></li><li><p> divide by 66 and get 6998469984;</p></li><li><p> divide by 66 and get 1166411664;</p></li><li><p> multiply by 22 and get 2332823328;</p></li><li><p> divide by 66 and get 38883888;</p></li><li><p> divide by 66 and get 648648;</p></li><li><p> divide by 66 and get 108108;</p></li><li><p> multiply by 22 and get 216216;</p></li><li><p> divide by 66 and get 3636;</p></li><li><p> divide by 66 and get 66;</p></li><li><p>divide by 66 and get 11.</p><p> 分析：</p><blockquote><p>  ×2÷6等价于÷3，而÷6等价于÷2÷3，分解因子，设x能分解成sum2个2和sum3个3，如果sum2的个数大于sum3的个数，则说明不能得到1，因为要÷2只能通过÷6这个操作，而这个操作本身又在÷3，所有直接输出-1即可。</p><p>  否则，3的个数大于2，那么可以通过×2乘回来，它们的差加上3的个数就是答案。</p><p>  另一种思路，也是最容易想到的，先一值除以6，如果不能整除了，就一直除以3，如果不能整除，则输出NO，否则输出yes</p></blockquote></li></ol><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ll t,x,sum3,sum2;</span><br><span class="line">cin&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line">cin&gt;&gt;x;</span><br><span class="line">sum3=sum2=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x%<span class="number">2</span>==<span class="number">0</span>)&#123;<span class="comment">//分解因子2</span></span><br><span class="line">x/=<span class="number">2</span>;</span><br><span class="line">sum2++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(x%<span class="number">3</span>==<span class="number">0</span>)&#123;<span class="comment">//分解因子3</span></span><br><span class="line">x/=<span class="number">3</span>;</span><br><span class="line">sum3++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x&gt;<span class="number">1</span>||sum2&gt;sum3)cout&lt;&lt;<span class="string">&quot;-1&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;(sum3-sum2)+sum3&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Zero-Remainder-Array"><a href="#Zero-Remainder-Array" class="headerlink" title="Zero Remainder Array"></a>Zero Remainder Array</h1><p>You are given an array aa consisting of nn positive integers.</p><p>Initially, you have an integer x=0x=0. During one move, you can do one of the following two operations:</p><ol><li> Choose exactly one ii from 11 to nn and increase aiai by xx (ai:=ai+xai:=ai+x), then increase xx by 11 (x:=x+1x:=x+1).</li><li> Just increase xx by 11 (x:=x+1x:=x+1).</li></ol><p>The first operation can be applied no more than once to each ii from 11 to nn.</p><p>Your task is to find the minimum number of moves required to obtain such an array that each its element is divisible by kk (the value kk is given).</p><p>You have to answer tt independent test cases.</p><h2 id="Input-2"><a href="#Input-2" class="headerlink" title="Input"></a>Input</h2><p>The first line of the input contains one integer tt (1≤t≤2⋅1041≤t≤2⋅104) — the number of test cases. Then tt test cases follow.</p><p>The first line of the test case contains two integers nn and kk (1≤n≤2⋅105;1≤k≤1091≤n≤2⋅105;1≤k≤109) — the length of aa and the required divisior. The second line of the test case contains nn integers a1,a2,…,ana1,a2,…,an (1≤ai≤1091≤ai≤109), where aiai is the ii-th element of aa.</p><p>It is guaranteed that the sum of nn does not exceed 2⋅1052⋅105 (∑n≤2⋅105∑n≤2⋅105).</p><h2 id="Output-2"><a href="#Output-2" class="headerlink" title="Output"></a>Output</h2><p>For each test case, print the answer — the minimum number of moves required to obtain such an array that each its element is divisible by kk.</p><p>Example</p><h2 id="Input-3"><a href="#Input-3" class="headerlink" title="Input"></a>Input</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">4 3</span><br><span class="line">1 2 1 3</span><br><span class="line">10 6</span><br><span class="line">8 7 1 8 3 7 5 10 8 9</span><br><span class="line">5 10</span><br><span class="line">20 100 50 20 100500</span><br><span class="line">10 25</span><br><span class="line">24 24 24 24 24 24 24 24 24 24</span><br><span class="line">8 8</span><br><span class="line">1 2 3 4 5 6 7 8</span><br></pre></td></tr></table></figure><h2 id="Output-3"><a href="#Output-3" class="headerlink" title="Output"></a>Output</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">18</span><br><span class="line">0</span><br><span class="line">227</span><br><span class="line">8</span><br></pre></td></tr></table></figure><h2 id="Note-1"><a href="#Note-1" class="headerlink" title="Note"></a>Note</h2><p>Consider the first test case of the example:</p><ol><li> x=0x=0, a=[1,2,1,3]a=[1,2,1,3]. Just increase xx;</li><li> x=1x=1, a=[1,2,1,3]a=[1,2,1,3]. Add xx to the second element and increase xx;</li><li> x=2x=2, a=[1,3,1,3]a=[1,3,1,3]. Add xx to the third element and increase xx;</li><li> x=3x=3, a=[1,3,3,3]a=[1,3,3,3]. Add xx to the fourth element and increase xx;</li><li> x=4x=4, a=[1,3,3,6]a=[1,3,3,6]. Just increase xx;</li><li> x=5x=5, a=[1,3,3,6]a=[1,3,3,6]. Add xx to the first element and increase xx;</li><li> x=6x=6, a=[6,3,3,6]a=[6,3,3,6]. We obtained the required array.</li></ol><p>Note that you can’t add xx to the same element more than once.</p><blockquote><p>  题目大意：最开始给你一个x=0，还有一个长度为n的数组，你可以执行两个操作：</p><p>  ①要么x+1</p><p>  ②要么ai+x，然后x再+1</p><p>  最后要让数组a的所有元素都能整除k，问最少的操作次数。</p><p>  这个题目有点绕，就是先对ai求余，然后找到相同余数x出现最多的次数maxx，如果出现次数相同那就找最小的，</p><p>  比如余数3 3 2 2 1，假设k=4，这里2和3都出现2次，找2，因为2要变成4，要加2,3要变成4，要加1，处理2要比处理3麻烦，所以要找最小的。因为有两个2，x是递增的，第一个2加2，就能变成4，而第二个只能变成8，即2k，要加上6，（maxx-1）*k，答案就是（maxx-1）×k+k-余数x+1</p></blockquote><p>参考代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">map&lt;ll,ll&gt;m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">ll t,n,k,x;</span><br><span class="line">cin&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">m.<span class="built_in">clear</span>();</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line">ll maxx=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">cin&gt;&gt;x;</span><br><span class="line">x%=k;</span><br><span class="line">m[x]++;</span><br><span class="line"><span class="keyword">if</span>(x&amp;&amp;maxx&lt;m[x])&#123;</span><br><span class="line">maxx=m[x];</span><br><span class="line">ans=x;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(x&amp;&amp;m[x]==maxx&amp;&amp;x&lt;ans)&#123;</span><br><span class="line">ans=x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans==<span class="number">0</span>)cout&lt;&lt;<span class="string">&quot;0&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;(maxx<span class="number">-1</span>)*k+k-ans+<span class="number">1</span>&lt;&lt;endl; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Social-Distance"><a href="#Social-Distance" class="headerlink" title="Social Distance"></a>Social Distance</h1><p>Polycarp and his friends want to visit a new restaurant. The restaurant has nn tables arranged along a straight line. People are already sitting at some tables. The tables are numbered from 11 to nn in the order from left to right. The state of the restaurant is described by a string of length nn which contains characters “1” (the table is occupied) and “0” (the table is empty).</p><p>Restaurant rules prohibit people to sit at a distance of kk or less from each other. That is, if a person sits at the table number ii, then all tables with numbers from i−ki−k to i+ki+k (except for the ii-th) should be free. In other words, the absolute difference of the numbers of any two occupied tables must be strictly greater than kk.</p><p>For example, if n=8n=8 and k=2k=2, then:</p><ul><li>  strings “10010001”, “10000010”, “00000000”, “00100000” satisfy the rules of the restaurant;</li><li>  strings “10100100”, “10011001”, “11111111” do not satisfy to the rules of the restaurant, since each of them has a pair of “1” with a distance less than or equal to k=2k=2.</li></ul><p>In particular, if the state of the restaurant is described by a string without “1” or a string with one “1”, then the requirement of the restaurant is satisfied.</p><p>You are given a binary string ss that describes the current state of the restaurant. It is guaranteed that the rules of the restaurant are satisfied for the string ss.</p><p>Find the maximum number of free tables that you can occupy so as not to violate the rules of the restaurant. Formally, what is the maximum number of “0” that can be replaced by “1” such that the requirement will still be satisfied?</p><p>For example, if n=6n=6, k=1k=1, s=s= “100010”, then the answer to the problem will be 11, since only the table at position 33 can be occupied such that the rules are still satisfied.</p><h2 id="Input-4"><a href="#Input-4" class="headerlink" title="Input"></a>Input</h2><p>The first line contains a single integer tt (1≤t≤1041≤t≤104) — the number of test cases in the test. Then tt test cases follow.</p><p>Each test case starts with a line containing two integers nn and kk (1≤k≤n≤2⋅1051≤k≤n≤2⋅105) — the number of tables in the restaurant and the minimum allowed distance between two people.</p><p>The second line of each test case contains a binary string ss of length nn consisting of “0” and “1” — a description of the free and occupied tables in the restaurant. The given string satisfy to the rules of the restaurant — the difference between indices of any two “1” is more than kk.</p><p>The sum of nn for all test cases in one test does not exceed 2⋅1052⋅105.</p><h2 id="Output-4"><a href="#Output-4" class="headerlink" title="Output"></a>Output</h2><p>For each test case output one integer — the number of tables that you can occupy so as not to violate the rules of the restaurant. If additional tables cannot be taken, then, obviously, you need to output 00.</p><p>Example</p><h2 id="Input-5"><a href="#Input-5" class="headerlink" title="Input"></a>Input</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">6 1</span><br><span class="line">100010</span><br><span class="line">6 2</span><br><span class="line">000000</span><br><span class="line">5 1</span><br><span class="line">10101</span><br><span class="line">3 1</span><br><span class="line">001</span><br><span class="line">2 2</span><br><span class="line">00</span><br><span class="line">1 1</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h2 id="Output-5"><a href="#Output-5" class="headerlink" title="Output"></a>Output</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>参考代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line">cin&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="keyword">int</span> n,k,ans=<span class="number">0</span>,j;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">string s;</span><br><span class="line">cin&gt;&gt;s;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">j=i+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(s[j]==<span class="string">&#x27;0&#x27;</span>&amp;&amp;j&lt;s.<span class="built_in">size</span>()&amp;&amp;j-i&lt;=k)j++;</span><br><span class="line"><span class="keyword">if</span>(j-i&gt;k||j==s.<span class="built_in">size</span>())&#123;</span><br><span class="line">ans++;</span><br><span class="line">i+=k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> i=j<span class="number">-1</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> i+=k;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="XXXXX"><a href="#XXXXX" class="headerlink" title="XXXXX"></a>XXXXX</h1><p>Ehab loves number theory, but for some reason he hates the number xx. Given an array aa, find the length of its longest subarray such that the sum of its elements isn’t divisible by xx, or determine that such subarray doesn’t exist.</p><p>An array aa is a subarray of an array bb if aa can be obtained from bb by deletion of several (possibly, zero or all) elements from the beginning and several (possibly, zero or all) elements from the end.</p><h2 id="Input-6"><a href="#Input-6" class="headerlink" title="Input"></a>Input</h2><p>The first line contains an integer tt (1≤t≤5)(1≤t≤5) — the number of test cases you need to solve. The description of the test cases follows.</p><p>The first line of each test case contains 2 integers nn and xx (1≤n≤1051≤n≤105, 1≤x≤1041≤x≤104) — the number of elements in the array aa and the number that Ehab hates.</p><p>The second line contains nn space-separated integers a1a1, a2a2, ……, anan (0≤ai≤1040≤ai≤104) — the elements of the array aa.</p><h2 id="Output-6"><a href="#Output-6" class="headerlink" title="Output"></a>Output</h2><p>For each testcase, print the length of the longest subarray whose sum isn’t divisible by xx. If there’s no such subarray, print −1−1.</p><p>Example</p><h2 id="Input-7"><a href="#Input-7" class="headerlink" title="Input"></a>Input</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">3 3</span><br><span class="line">1 2 3</span><br><span class="line">3 4</span><br><span class="line">1 2 3</span><br><span class="line">2 2</span><br><span class="line">0 6</span><br></pre></td></tr></table></figure><h2 id="Output-7"><a href="#Output-7" class="headerlink" title="Output"></a>Output</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br><span class="line">-1</span><br></pre></td></tr></table></figure><p>参考代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span> </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line">cin&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="keyword">int</span> n,x,ans=<span class="number">0</span>,sum=<span class="number">0</span>,i,j;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;x;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line"><span class="keyword">if</span>(a[i]%x==<span class="number">0</span>)ans++;</span><br><span class="line">sum+=a[i]; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(sum%x!=<span class="number">0</span>)cout&lt;&lt;n&lt;&lt;endl;<span class="comment">//如果整个数组的和可以不整除x，则数组长度就是最大长度</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ans==n)cout&lt;&lt;<span class="string">&quot;-1&quot;</span>&lt;&lt;endl;<span class="comment">//如果数组的每个元素都能整除x，则输出-1</span></span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)<span class="comment">//整个数组 的和不可以整除x，分别从左边和右边找到第一个不能整除x的元素，比较左边的长度和右边，谁大输出谁即可</span></span><br><span class="line"><span class="keyword">if</span>(a[i]%x!=<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">for</span>(j=n;j&gt;<span class="number">0</span>;j--)</span><br><span class="line"><span class="keyword">if</span>(a[j]%x!=<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">cout&lt;&lt;<span class="built_in">max</span>(n-i,j<span class="number">-1</span>)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Most-socially-distanced-subsequence"><a href="#Most-socially-distanced-subsequence" class="headerlink" title="Most socially-distanced subsequence"></a>Most socially-distanced subsequence</h1><p>Given a permutation pp of length nn, find its subsequence s1s1, s2s2, ……, sksk of length at least 22 such that:</p><ul><li>  |s1−s2|+|s2−s3|+…+|sk−1−sk||s1−s2|+|s2−s3|+…+|sk−1−sk| is as big as possible over all subsequences of pp with length at least 22.</li><li>  Among all such subsequences, choose the one whose length, kk, is as small as possible.</li></ul><p>If multiple subsequences satisfy these conditions, you are allowed to find any of them.</p><p>A sequence aa is a subsequence of an array bb if aa can be obtained from bb by deleting some (possibly, zero or all) elements.</p><p>A permutation of length nn is an array of length nn in which every element from 11 to nn occurs exactly once.</p><h2 id="Input-8"><a href="#Input-8" class="headerlink" title="Input"></a>Input</h2><p>The first line contains an integer tt (1≤t≤2⋅1041≤t≤2⋅104) — the number of test cases. The description of the test cases follows.</p><p>The first line of each test case contains an integer nn (2≤n≤1052≤n≤105) — the length of the permutation pp.</p><p>The second line of each test case contains nn integers p1p1, p2p2, ……, pnpn (1≤pi≤n1≤pi≤n, pipi are distinct) — the elements of the permutation pp.</p><p>The sum of nn across the test cases doesn’t exceed 105105.</p><h2 id="Output-8"><a href="#Output-8" class="headerlink" title="Output"></a>Output</h2><p>For each test case, the first line should contain the length of the found subsequence, kk. The second line should contain s1s1, s2s2, ……, sksk — its elements.</p><p>If multiple subsequences satisfy these conditions, you are allowed to find any of them.</p><p>Example</p><h2 id="Input-9"><a href="#Input-9" class="headerlink" title="Input"></a>Input</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br><span class="line">3 2 1</span><br><span class="line">4</span><br><span class="line">1 3 4 2</span><br></pre></td></tr></table></figure><h2 id="Output-9"><a href="#Output-9" class="headerlink" title="Output"></a>Output</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">3 1 </span><br><span class="line">3</span><br><span class="line">1 4 2 </span><br></pre></td></tr></table></figure><p>参考代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn],t[maxn];</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> test;</span><br><span class="line">cin&gt;&gt;test;</span><br><span class="line"><span class="keyword">while</span>(test--)&#123;</span><br><span class="line"><span class="keyword">int</span> n,k=<span class="number">1</span>;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(a));</span><br><span class="line"><span class="built_in">memset</span>(t,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(t));</span><br><span class="line">t[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n<span class="number">-1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;a[i<span class="number">-1</span>]&amp;&amp;a[i]&gt;a[i+<span class="number">1</span>]||a[i]&lt;a[i<span class="number">-1</span>]&amp;&amp;a[i]&lt;a[i+<span class="number">1</span>])t[++k]=i;</span><br><span class="line">&#125;</span><br><span class="line">t[++k]=n;</span><br><span class="line">cout&lt;&lt;k&lt;&lt;endl;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)cout&lt;&lt;a[t[i]]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="博弈论"><a href="#博弈论" class="headerlink" title="博弈论"></a>博弈论</h1><h2 id="Road-to-Arabella"><a href="#Road-to-Arabella" class="headerlink" title="Road to Arabella"></a>Road to Arabella</h2><p> Ayoub and Kilani felt board while they are going to ArabellaCPC in (Amman-Irbid) road, so Kilani invented a new game to play with Ayoub.</p><p>The game is described by the following rules :</p><p>Ayoub picks a random integer $$$n$$$ $$$(1 \leq n \leq 10^{9})$$$ , and Kilani picks a random integer $$$k$$$ $$$(1 \leq k \leq n)$$$, then they will start playing. In each turn a player can choose any number $$$x$$$ $$$(1 \leq x \leq max(1 , m-k) )$$$ (which $$$m$$$ is the current value of $$$n$$$) and subtract it from $$$n$$$. if $$$n$$$ equals zero then the player can’t make a move. The player who can’t make a move is considered to lose the game.</p><p>If Kilani starts, and each player played optimally, who would be the winner?</p><p>题目炸了，这里给出链接：</p><p><a href="https://vjudge.net/problem/Gym-102263B">Road to Arabella - Gym 102263B - Virtual Judge (vjudge.net)</a></p><p>题解：</p><p>考虑极端情况，如果n-k&lt;=1,这种情况每次只能减1，可以改变奇偶性，这时，如果n是奇数，先手就会获胜，否则后手获胜</p><p>其他情况先手总能找到一个x使一轮以后出现极端情况并且让n是奇数，这种情况下先手必胜</p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line">cin&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line"><span class="keyword">if</span>(n-k&lt;=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">1</span>)</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Kilani&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;Ayoub&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt; <span class="string">&quot;Kilani&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="Check-The-Text"><a href="#Check-The-Text" class="headerlink" title="Check The Text"></a><a href="https://vjudge.net/problem/Gym-102263C">Check The Text</a></h2><p> Roze has a special keyboard which consists only of 29 keys:</p><p>-26 alphabetic a-z keys, which prints the 26 lowercase Latin letters.</p><p>-“Space” key, which prints a single space.</p><p>-“CapsLock” key, which converts the status of the letters keys from lowercase to uppercase and vice versa. The status initially is lowercase.</p><p>-“Backspace” key, which deletes the last letter/space that was written on the screen.</p><p>If Roze presses “Backspace” and there is nothing to delete on the screen, nothing will happen.</p><p>Given the text that Roze had to print and the order of the keys she has pressed on the keyboard, check if Roze has printed the text correctly (including exactly one space between every two words).</p><p>由于题目还是乱码，我先放个链接</p><p><a href="https://vjudge.net/problem/Gym-102263C">Check The Text - Gym 102263C - Virtual Judge (vjudge.net)</a></p><p>简单模拟即可，不过如果像我这样写很多分支的话，一定要注意，第一次这样卡在45个样例，贴一下WA代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,flag=<span class="number">0</span>;<span class="comment">//0代表小写 </span></span><br><span class="line">string sum,s=<span class="string">&quot;&quot;</span>,total,ans;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;s;</span><br><span class="line">total+=s+<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//注意这里会多一个空格</span></span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line">cin&gt;&gt;m;</span><br><span class="line">cout&lt;&lt;sum.<span class="built_in">length</span>()&lt;&lt;endl;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">cin&gt;&gt;s;</span><br><span class="line"><span class="keyword">if</span>(s==<span class="string">&quot;Backspace&quot;</span>&amp;&amp;sum.<span class="built_in">length</span>()!=<span class="number">0</span>)&#123;<span class="comment">//注意这里，如果s=backspace并且sum.length=0就会进入下面那个flag的分支，导致错误</span></span><br><span class="line">sum=sum.<span class="built_in">substr</span>(<span class="number">0</span>,sum.<span class="built_in">length</span>()<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s==<span class="string">&quot;CapsLock&quot;</span>)&#123;</span><br><span class="line">flag=<span class="number">1</span>-flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s==<span class="string">&quot;Space&quot;</span>)&#123;</span><br><span class="line">sum+=<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(flag==<span class="number">0</span>)&#123;</span><br><span class="line">    sum+=s[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(flag==<span class="number">1</span>)&#123;</span><br><span class="line">sum+=(s[<span class="number">0</span>]<span class="number">-32</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sum+=<span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="comment">//cout&lt;&lt;total&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//cout&lt;&lt;sum&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">if</span>(total==sum)cout&lt;&lt;<span class="string">&quot;Correct&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;Incorrect&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>AC代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,flag=<span class="number">0</span>;<span class="comment">//0代表小写 </span></span><br><span class="line">string sum,s=<span class="string">&quot;&quot;</span>,total,ans;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;s;</span><br><span class="line">total+=s+<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">   <span class="comment">//注意这里会多一个空格</span></span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line">cin&gt;&gt;m;</span><br><span class="line">cout&lt;&lt;sum.<span class="built_in">length</span>()&lt;&lt;endl;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">cin&gt;&gt;s;</span><br><span class="line"><span class="keyword">if</span>(s==<span class="string">&quot;Backspace&quot;</span>)&#123;<span class="comment">//这样如果s=backspace就会保证它一定会进入这个分支</span></span><br><span class="line"><span class="keyword">if</span>(sum.<span class="built_in">length</span>()!=<span class="number">0</span>)</span><br><span class="line">sum=sum.<span class="built_in">substr</span>(<span class="number">0</span>,sum.<span class="built_in">length</span>()<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s==<span class="string">&quot;CapsLock&quot;</span>)&#123;</span><br><span class="line">flag=<span class="number">1</span>-flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s==<span class="string">&quot;Space&quot;</span>)&#123;</span><br><span class="line">sum+=<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(flag==<span class="number">0</span>)&#123;</span><br><span class="line">    sum+=s[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(flag==<span class="number">1</span>)&#123;</span><br><span class="line">sum+=(s[<span class="number">0</span>]<span class="number">-32</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sum+=<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">cout&lt;&lt;total&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line"><span class="keyword">if</span>(total==sum)cout&lt;&lt;<span class="string">&quot;Correct&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;Incorrect&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h1 id="Kefa-and-Company"><a href="#Kefa-and-Company" class="headerlink" title="Kefa and Company"></a>Kefa and Company</h1><p>题目链接：<a href="http://codeforces.com/contest/580/problem/B">http://codeforces.com/contest/580/problem/B</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> m,s;</span><br><span class="line">&#125;num[maxn]; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(Node a,Node b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.m&lt;b.m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)f=<span class="number">-1</span>;ch=<span class="built_in">getchar</span>();&#125;<span class="comment">//负数情况</span></span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;x=x*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>;ch=<span class="built_in">getchar</span>();&#125;<span class="comment">//读取字符，转换为整数</span></span><br><span class="line">    <span class="keyword">return</span> x*f;<span class="comment">//考虑到负数，相乘以后再输出</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,d;</span><br><span class="line">ll sum,maxn,ans,j;</span><br><span class="line"><span class="keyword">while</span>(n=<span class="built_in">read</span>(),d=<span class="built_in">read</span>())&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">num[i].m=<span class="built_in">read</span>();</span><br><span class="line">num[i].s=<span class="built_in">read</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(num,num+n,cmp);</span><br><span class="line">sum=<span class="number">0</span>;</span><br><span class="line">maxn=<span class="number">0</span>;</span><br><span class="line">j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">sum+=num[i].s;</span><br><span class="line"><span class="keyword">while</span>(num[i].m-num[j].m&gt;=d)&#123;</span><br><span class="line">sum-=num[j].s;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(maxn&lt;sum)maxn=sum;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,maxn);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>KMP系列</title>
      <link href="2021/07/15/KMP%E7%B3%BB%E5%88%97/"/>
      <url>2021/07/15/KMP%E7%B3%BB%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h2 id="A-Number-Sequence"><a href="#A-Number-Sequence" class="headerlink" title="A - Number Sequence"></a>A - Number Sequence</h2><p>Given two sequences of numbers : a[1], a[2], …… , a[N], and b[1], b[2], …… , b[M] (1 &lt;= M &lt;= 10000, 1 &lt;= N &lt;= 1000000). Your task is to find a number K which make a[K] = b[1], a[K + 1] = b[2], …… , a[K + M - 1] = b[M]. If there are more than one K exist, output the smallest one.</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>The first line of input is a number T which indicate the number of cases. Each case contains three lines. The first line is two numbers N and M (1 &lt;= M &lt;= 10000, 1 &lt;= N &lt;= 1000000). The second line contains N integers which indicate a[1], a[2], …… , a[N]. The third line contains M integers which indicate b[1], b[2], …… , b[M]. All integers are in the range of [-1000000, 1000000].</p><h4 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h4><p>For each test case, you should output one line which only contain K described above. If no such K exists, output -1 instead.</p><h4 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">13 5</span><br><span class="line">1 2 1 2 3 1 2 3 1 3 2 1 2</span><br><span class="line">1 2 3 1 3</span><br><span class="line">13 5</span><br><span class="line">1 2 1 2 3 1 2 3 1 3 2 1 2</span><br><span class="line">1 2 3 2 1</span><br></pre></td></tr></table></figure><h4 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">-1</span><br></pre></td></tr></table></figure><blockquote><p>  题目大意：找到子串的位置，返回第一个下标，否则返回-1</p></blockquote><p>参考代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> ne[<span class="number">10005</span>];</span><br><span class="line"><span class="keyword">int</span> t[<span class="number">10005</span>];</span><br><span class="line"><span class="keyword">int</span> s[<span class="number">1000005</span>];</span><br><span class="line"><span class="keyword">int</span> lens,lent;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getne</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line">j=<span class="number">-1</span>,i=<span class="number">0</span>;</span><br><span class="line">ne[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line"><span class="comment">//int len=strlen(t);</span></span><br><span class="line"><span class="keyword">while</span>(i&lt;lent)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j==<span class="number">-1</span>||t[i]==t[j])</span><br><span class="line">&#123;</span><br><span class="line">j++;</span><br><span class="line">i++;</span><br><span class="line">ne[i]=j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">j=ne[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">KMP</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line">j=<span class="number">0</span>,i=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(i&lt;lens&amp;&amp;j&lt;lent)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j==<span class="number">-1</span>||s[i]==t[j]) </span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">j=ne[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(j==lent)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> i-j+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> m,x;</span><br><span class="line"></span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">while</span>(n--)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">cin&gt;&gt;m&gt;&gt;x;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;s[i]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;x;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;t[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(ne,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(ne));</span><br><span class="line">lent=x;</span><br><span class="line">lens=m;</span><br><span class="line"><span class="built_in">getne</span>();</span><br><span class="line">cout&lt;&lt;<span class="built_in">KMP</span>()&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="B-Oulipo"><a href="#B-Oulipo" class="headerlink" title="B-Oulipo"></a>B-Oulipo</h2><p>The French author Georges Perec (1936–1982) once wrote a book, La disparition, without the letter ‘e’. He was a member of the Oulipo group. A quote from the book:</p><p>Tout avait Pair normal, mais tout s’affirmait faux. Tout avait Fair normal, d’abord, puis surgissait l’inhumain, l’affolant. Il aurait voulu savoir où s’articulait l’association qui l’unissait au roman : stir son tapis, assaillant à tout instant son imagination, l’intuition d’un tabou, la vision d’un mal obscur, d’un quoi vacant, d’un non-dit : la vision, l’avision d’un oubli commandant tout, où s’abolissait la raison : tout avait l’air normal mais…</p><p>Perec would probably have scored high (or rather, low) in the following contest. People are asked to write a perhaps even meaningful text on some subject with as few occurrences of a given “word” as possible. Our task is to provide the jury with a program that counts these occurrences, in order to obtain a ranking of the competitors. These competitors often write very long texts with nonsense meaning; a sequence of 500,000 consecutive ‘T’s is not unusual. And they never use spaces.</p><p>So we want to quickly find out how often a word, i.e., a given string, occurs in a text. More formally: given the alphabet {‘A’, ‘B’, ‘C’, …, ‘Z’} and two finite strings over that alphabet, a word W and a text T, count the number of occurrences of W in T. All the consecutive characters of W must exactly match consecutive characters of T. Occurrences may overlap.</p><h3 id="Input-1"><a href="#Input-1" class="headerlink" title="Input"></a>Input</h3><p>The first line of the input file contains a single number: the number of test cases to follow. Each test case has the following format:</p><p>One line with the word W, a string over {‘A’, ‘B’, ‘C’, …, ‘Z’}, with 1 ≤ |W| ≤ 10,000 (here |W| denotes the length of the string W).<br>One line with the text T, a string over {‘A’, ‘B’, ‘C’, …, ‘Z’}, with |W| ≤ |T| ≤ 1,000,000.</p><h3 id="Output-1"><a href="#Output-1" class="headerlink" title="Output"></a>Output</h3><p>For every test case in the input file, the output should contain a single number, on a single line: the number of occurrences of the word W in the text T.</p><h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input"></a>Sample Input</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">BAPC</span><br><span class="line">BAPC</span><br><span class="line">AZA</span><br><span class="line">AZAZAZA</span><br><span class="line">VERDI</span><br><span class="line">AVERDXIVYERDIAN</span><br></pre></td></tr></table></figure><h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output"></a>Sample Output</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">3</span><br><span class="line">0</span><br></pre></td></tr></table></figure><blockquote><p>  题目大意：求子串在母串中出现的次数</p><p>  和上一题差不多，只需要统计即可</p></blockquote><p>参考代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> ne[<span class="number">10005</span>];</span><br><span class="line">string s,t;</span><br><span class="line"><span class="keyword">int</span> lens,lent;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getne</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line">j=<span class="number">-1</span>,i=<span class="number">0</span>;</span><br><span class="line">ne[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;lent)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j==<span class="number">-1</span>||t[i]==t[j])</span><br><span class="line">&#123;</span><br><span class="line">j++;</span><br><span class="line">i++;</span><br><span class="line">ne[i]=j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">j=ne[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">KMPCOUNT</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line">j=<span class="number">0</span>,i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(lent==<span class="number">1</span>&amp;&amp;lens==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s[<span class="number">0</span>]==t[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(i&lt;lens&amp;&amp;j&lt;lent)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j==<span class="number">-1</span>||s[i]==t[j]) </span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">j=ne[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(j==lent)</span><br><span class="line">&#123;</span><br><span class="line">j=ne[j];</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">while</span>(n--)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;t;</span><br><span class="line">cin&gt;&gt;s;</span><br><span class="line">lent=t.<span class="built_in">size</span>();</span><br><span class="line">lens=s.<span class="built_in">size</span>();</span><br><span class="line"><span class="built_in">getne</span>();</span><br><span class="line">cout&lt;&lt;<span class="built_in">KMPCOUNT</span>()&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-剪花布条"><a href="#C-剪花布条" class="headerlink" title="C - 剪花布条"></a>C - 剪花布条</h2><p>一块花布条，里面有些图案，另有一块直接可用的小饰条，里面也有一些图案。对于给定的花布条和小饰条，计算一下能从花布条中尽可能剪出几块小饰条来呢？</p><h3 id="Input-2"><a href="#Input-2" class="headerlink" title="Input"></a>Input</h3><p>输入中含有一些数据，分别是成对出现的花布条和小饰条，其布条都是用可见ASCII字符表示的，可见的ASCII字符有多少个，布条的花纹也有多少种花样。花纹条和小饰条不会超过1000个字符长。如果遇见#字符，则不再进行工作。</p><h3 id="Output-2"><a href="#Output-2" class="headerlink" title="Output"></a>Output</h3><p>输出能从花纹布中剪出的最多小饰条个数，如果一块都没有，那就老老实实输出0，每个结果之间应换行。</p><h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input"></a>Sample Input</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">abcde a3</span><br><span class="line">aaaaaa  aa</span><br><span class="line">#</span><br></pre></td></tr></table></figure><h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output"></a>Sample Output</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>这题和上一题略有不同，因为是减花布条，母串剪完就没有了，所以如果剪出一个布条以后，j要回溯到-1位置。</p><p>参考代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> ne[<span class="number">10005</span>];</span><br><span class="line">string s,t;</span><br><span class="line"><span class="keyword">int</span> lens,lent;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getne</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line">j=<span class="number">-1</span>,i=<span class="number">0</span>;</span><br><span class="line">ne[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;lent)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j==<span class="number">-1</span>||t[i]==t[j])</span><br><span class="line">&#123;</span><br><span class="line">j++;</span><br><span class="line">i++;</span><br><span class="line">ne[i]=j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">j=ne[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">KMPCOUNT</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line">j=<span class="number">0</span>,i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(lent==<span class="number">1</span>&amp;&amp;lens==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s[<span class="number">0</span>]==t[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(i&lt;lens&amp;&amp;j&lt;lent)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j==<span class="number">-1</span>||s[i]==t[j]) </span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">j=ne[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(j==lent)</span><br><span class="line">&#123;</span><br><span class="line">j=<span class="number">-1</span>;</span><br><span class="line">i--;<span class="comment">//i在++以后已经不匹配了，要减1，回溯到上一步</span></span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(cin&gt;&gt;s&gt;&gt;t&amp;&amp;s[<span class="number">0</span>]!=<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">lent=t.<span class="built_in">size</span>();</span><br><span class="line">lens=s.<span class="built_in">size</span>();</span><br><span class="line"><span class="built_in">getne</span>();</span><br><span class="line">cout&lt;&lt;<span class="built_in">KMPCOUNT</span>()&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>exkmp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">string s,x;</span><br><span class="line"><span class="keyword">int</span> lenx,lens;</span><br><span class="line"><span class="keyword">int</span> ne[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> ex[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getne</span> <span class="params">()</span></span>&#123;</span><br><span class="line">ne[<span class="number">0</span>] = lenx;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span> , p = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;lenx ; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i&gt;=p || i+ne [i-a] &gt;=p) &#123;</span><br><span class="line">p= <span class="built_in">max</span>(p,i);</span><br><span class="line"><span class="keyword">while</span>(p&lt;lenx &amp;&amp; x[p]==x[p-i]) p++;</span><br><span class="line">ne[i] = p-i;</span><br><span class="line">a = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> ne [i] = ne[i-a];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getex</span><span class="params">()</span> </span>&#123;<span class="comment">// s的每个后缀与x匹配前缀 </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">getne</span> () ;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span> , p = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lens; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i&gt;=p || i+ne [i-a] &gt;=p) &#123;</span><br><span class="line">p = <span class="built_in">max</span>(p,i);</span><br><span class="line"><span class="keyword">while</span> (p&lt;lens &amp;&amp;p-i&lt;lenx &amp;&amp; s[p]==x[p-i]) p++;</span><br><span class="line">ex[i]= p-i;</span><br><span class="line">a = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> ex[i]= ne [i-a] ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin&gt;&gt;x&gt;&gt;s;</span><br><span class="line">lenx=x.<span class="built_in">size</span>();</span><br><span class="line">lens=x.<span class="built_in">size</span>();</span><br><span class="line"><span class="built_in">getne</span>();</span><br><span class="line"><span class="built_in">getex</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;ne[i]&lt;&lt;<span class="string">&quot; &quot;</span>; </span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)</span><br><span class="line">cout&lt;&lt;ex[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//x:aaaaac</span></span><br><span class="line"><span class="comment">//S:aaaaabbb</span></span><br></pre></td></tr></table></figure><h2 id="D-Power-Strings"><a href="#D-Power-Strings" class="headerlink" title="D-Power Strings"></a>D-Power Strings</h2><p>Given two strings a and b we define a<em>b to be their concatenation. For example, if a = “abc” and b = “def” then a</em>b = “abcdef”. If we think of concatenation as multiplication, exponentiation by a non-negative integer is defined in the normal way: a^0 = “” (the empty string) and a^(n+1) = a*(a^n).</p><h3 id="Input-3"><a href="#Input-3" class="headerlink" title="Input"></a>Input</h3><p>Each test case is a line of input representing s, a string of printable characters. The length of s will be at least 1 and will not exceed 1 million characters. A line containing a period follows the last test case.</p><h3 id="Output-3"><a href="#Output-3" class="headerlink" title="Output"></a>Output</h3><p>For each s you should print the largest n such that s = a^n for some string a.</p><h3 id="Sample-Input-3"><a href="#Sample-Input-3" class="headerlink" title="Sample Input"></a>Sample Input</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">abcd</span><br><span class="line">aaaa</span><br><span class="line">ababab</span><br><span class="line">.</span><br></pre></td></tr></table></figure><h3 id="Sample-Output-3"><a href="#Sample-Output-3" class="headerlink" title="Sample Output"></a>Sample Output</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">4</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>Hint</p><p>This problem has huge input, use scanf instead of cin to avoid time limit exceed.</p><blockquote><p>  题目大意：求字符串中子串循环出现的最大次数</p><p>  这题我最开始是把字符串切片，然后一个一个统计，如果大于之前的次数就更新次数，但是运行超时了，也不奇怪，1000000个字母，不超时才怪。</p><p>  这题主要考察的是对next数组的理解。定义一个j=i-ne[i],这个就是之前匹配的最大前缀长度。用i%j,如果能整除，说明一定能输出</p></blockquote><p>参考代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">string s,t;</span><br><span class="line"><span class="keyword">int</span> ne[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getne</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line">j=<span class="number">-1</span>,i=<span class="number">0</span>;</span><br><span class="line">ne[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;len)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j==<span class="number">-1</span>||s[i]==s[j])</span><br><span class="line">&#123;</span><br><span class="line">j++;</span><br><span class="line">i++;</span><br><span class="line">ne[i]=j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">j=ne[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(cin&gt;&gt;s&amp;&amp;s!=<span class="string">&quot;.&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(ne,<span class="number">-1</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(ne));</span><br><span class="line">len=s.<span class="built_in">size</span>();</span><br><span class="line"><span class="built_in">getne</span>();</span><br><span class="line"><span class="keyword">if</span>(len%(len-ne[len])==<span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,len/(len-ne[len]));</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">&quot;1\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM训练题集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html</title>
      <link href="2021/07/12/html/"/>
      <url>2021/07/12/html/</url>
      
        <content type="html"><![CDATA[<h1 id="网页的相关概念"><a href="#网页的相关概念" class="headerlink" title="网页的相关概念"></a>网页的相关概念</h1><h2 id="网页"><a href="#网页" class="headerlink" title="网页"></a>网页</h2><p>网站是网页的集合。</p><p>网页是网站中的一页，通常是<strong>HTML格式的文件</strong>，要通过浏览器阅读。</p><p>通常以.htm或.html后缀结尾的文件，因此俗称HTML文件。</p><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p>超文本标记语言(Hyper Text Markup Language)，描述网页的一种语言.</p><p>非编程语言,是标记语言.</p><p>标记语言是一套标记标签.(markup tag)</p><h2 id="常用的浏览器"><a href="#常用的浏览器" class="headerlink" title="常用的浏览器"></a>常用的浏览器</h2><ul><li><p>浏览器内核</p><p>  即渲染引擎：负责读取网页内容，整理讯息，计算网页的显示方式并显示页面。</p><table><thead><tr><th>浏览器</th><th>内核</th><th>备注</th></tr></thead><tbody><tr><td>IE</td><td>Trident</td><td>IE、猎豹、360极速浏览器、百度浏览器</td></tr><tr><td>firefox</td><td>Gecko</td><td>火狐浏览器内核</td></tr><tr><td>Safari</td><td>Webikit</td><td>苹果浏览器内核</td></tr><tr><td>chrome/Opera</td><td>Blink</td><td>chrome/opera浏览器内核.Blink其实是WebKit的分支。</td></tr></tbody></table></li></ul><h2 id="Web标准"><a href="#Web标准" class="headerlink" title="Web标准"></a>Web标准</h2><p>Web标准是一系列标准的集合。W3C（万维网联盟）是国际最著名的标准化组织。</p><h3 id="Web标准的功能"><a href="#Web标准的功能" class="headerlink" title="Web标准的功能"></a>Web标准的功能</h3><p>遵循Web标准可以让不同开发人员写出的页面更标准、统一外，还有以下优点。</p><ul><li>  前景广阔</li><li>  广泛设备访问</li><li>  更容易搜索引擎</li><li>  降低网站流量费用</li><li>  使网站更易于维护</li><li>  提高页面浏览速度</li></ul><h3 id="Web标准的构成"><a href="#Web标准的构成" class="headerlink" title="Web标准的构成"></a>Web标准的构成</h3><p>包括：结构，表现，行为</p><ul><li>  结构：对网页元素进行分类和整理，HTML</li><li>  表现：网页元素的版式、颜色、大小等外观样式，CSS</li><li>  网页模型的定义和交互的编写，Javascript</li></ul><p><strong>Web标准的最佳体验方案：结构，样式、行为相分离</strong></p><h1 id="HTML标签"><a href="#HTML标签" class="headerlink" title="HTML标签"></a>HTML标签</h1><h2 id="HTML语法规范"><a href="#HTML语法规范" class="headerlink" title="HTML语法规范"></a>HTML语法规范</h2><p>1.HTML标签是由尖括号包围的关键字，例如<html>.</p><p>2.标签通常是成对出现的，例如<html>和</html>，前者为开始标签，后者为结束标签。</p><p>3.单标签：有些特殊的标签必须是单个标签，如<br /></p><h3 id="标签的关系"><a href="#标签的关系" class="headerlink" title="标签的关系"></a>标签的关系</h3><p>包含或嵌套关系。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br></pre></td></tr></table></figure><p>并列关系</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><h2 id="HTML的基本结构标签"><a href="#HTML的基本结构标签" class="headerlink" title="HTML的基本结构标签"></a>HTML的基本结构标签</h2><h3 id="第一个HTML网页"><a href="#第一个HTML网页" class="headerlink" title="第一个HTML网页"></a>第一个HTML网页</h3><p>每个网页都会有一个基本的结构标签（骨架标签），页面内容是在基本标签上写的，HTML页面也称为HTML文档。</p><table><thead><tr><th>标签名</th><th>定义</th><th>说明</th></tr></thead><tbody><tr><td><html></html></td><td>HTML标签</td><td>最大标签，根标签</td></tr><tr><td><head></head></td><td>文档的头部</td><td>在head的标签中我们必须设置的标签是tiltle</td></tr><tr><td><title></title></td><td>文档的标题</td><td>网页标题（再看一下嘛，不要走）</td></tr><tr><td><body></body></td><td>文档主体</td><td>元素包含文档的所有内容，页面内容基本搜索放到body里面的</td></tr></tbody></table><p>案例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>第一个页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">此岸花未，彼岸花开。</span><br><span class="line">      <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><p>vscode</p><h3 id="文档类型声明标签"><a href="#文档类型声明标签" class="headerlink" title="文档类型声明标签"></a>文档类型声明标签</h3><!DOCTYPE><pre><code>作用是告诉浏览器使用哪种HTML版本来显示网页。</code></pre><p>eg：<br><!DOCTYOE html>  用html5来显示网页，必须写在第一行，它不是HTML标签，它既是文档类型声明标签</p><h3 id="lang语言种类"><a href="#lang语言种类" class="headerlink" title="lang语言种类"></a>lang语言种类</h3><p>en–英文</p><p>zh-CN–中文</p><p>fr–法文</p><h3 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br></pre></td></tr></table></figure><p>必须要写，否则可能引起乱码的情况，一般情况下，统一使用UTF-8万国码）</p><p>PS:GB2312（简体中文）、BIG5（繁体）、GBK（简繁）</p><h2 id="HTML常用标签"><a href="#HTML常用标签" class="headerlink" title="HTML常用标签"></a>HTML常用标签</h2><h3 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签-"></a>标题标签<h1>-<h6></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt; 一级标题 &lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure><h3 id="分段和换行标签"><a href="#分段和换行标签" class="headerlink" title="分段和换行标签"></a>分段和换行标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt; 段落 &lt;&#x2F;p&gt;</span><br><span class="line">&lt;br &#x2F;&gt;</span><br></pre></td></tr></table></figure><h3 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a>文本格式化标签</h3><p>粗体，斜体，下划线等效果</p><table><thead><tr><th>语义</th><th>标签</th><th>说明</th></tr></thead><tbody><tr><td>加粗</td><td><strong></strong>or<b></b></td><td>推荐前者</td></tr><tr><td>斜体</td><td><em></em>or<i></i></td><td>推荐前者</td></tr><tr><td>删除线</td><td><del></del>or<s></s></td><td>推荐前者</td></tr><tr><td>下划线</td><td><ins></ins>or<u></u></td><td>推荐前者</td></tr></tbody></table><h3 id="盒子标签"><a href="#盒子标签" class="headerlink" title="盒子标签"></a>盒子标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span> 这是头部 <span class="tag">&lt;/<span class="name">div</span>&gt;</span> 分割，分区</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span> 今日价格 <span class="tag">&lt;/<span class="name">span</span>&gt;</span> 跨度</span><br></pre></td></tr></table></figure><p>特点：</p><ul><li>  div用来布局，但是一行只能放一个div，大盒子</li><li>  span标签用来布局，一行上可以多个span，小盒子</li></ul><h3 id="图像标签和路径"><a href="#图像标签和路径" class="headerlink" title="图像标签和路径"></a>图像标签和路径</h3><h4 id="1-图像标签"><a href="#1-图像标签" class="headerlink" title="1.图像标签"></a>1.图像标签</h4><table><thead><tr><th>属性</th><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>src</td><td>图片路径</td><td>必须属性</td></tr><tr><td>alt</td><td>文本</td><td>替换文本，图像不能显示时显示文字</td></tr><tr><td>title</td><td>文本</td><td>提示文本，鼠标放到图像上，显示文字</td></tr><tr><td>width</td><td>像素</td><td>设置图像的宽度</td></tr><tr><td>height</td><td>像素</td><td>设置图像的高度</td></tr><tr><td>border</td><td>像素</td><td>设置图像的边框粗细</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;图像URL&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><p>eg</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span> 图像标签的使用：<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img.jpg&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span> alt 替换文本，图像显示不出来的时候用文字替换：<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;这是彼岸花的图片&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h3><p>上一级：../</p><p>上两级：../../</p><p>eg:../images/img.jpg</p><h3 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h3><p>\</p><h3 id="超链接标签"><a href="#超链接标签" class="headerlink" title="超链接标签"></a>超链接标签</h3><h4 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;跳转目标&quot; target&#x3D;&quot;目标窗口的弹出方式&quot;&gt; 文本或图像 &lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><p>a：锚</p><p>两个属性的作用如下：</p><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>href</td><td>用于指定链接目录的url地址，（必须属性）</td></tr><tr><td>target</td><td>用于指定链接页面的打开方式，_self默认值，__blank在新窗口中打开</td></tr></tbody></table><p>链接分类：</p><p>1.外部链接，如<a href="http://www.baidu.com">百度</a></p><p>2.内部链接：网站内部页面之间的相互链接，直接链接内部页面名称即可。</p><p>3.空连接</p><p>4.下载链接</p><p>5.网页元素链接：在网页中的各种网页元素，如文本，图像，表格，视频都可以添加链接</p><p>6.锚点链接：点击链接，可以快速定位到页面中的某个位置</p><ul><li>  在链接文本的href属性中，设置属性值为**#名字**的形式</li><li>  找到目标位置的标签，里面添加一个id属性=刚才的名字</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>超链接标签<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>1.外部标签<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://bler.top&quot;</span>&gt;</span>我的博客<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://bler.top&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>我的博客<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>2.内部标签<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;03-vscode创建页面.html&quot;</span>&gt;</span>hh<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;03-vscode创建页面.html&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>hh<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>3.空链接<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>无地点<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>4.下载链接 下载的链接是 文件.exe或者是zip等压缩包形式<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;hh.zip&quot;</span>&gt;</span>下载文件<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>5.网页元素的链接<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://bler.top&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/hh.jpg&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>注释以”<!--"开头，以"-->“结束</p><p>快捷键：ctrl+/</p><h3 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h3><p>一些特殊的符号很难或者不方便直接使用，可用下面的字符代替。</p><p>空格：&amp;nbsp；</p><p>&lt;:&amp;lt；</p><p>大于:&amp;gt；</p><h3 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h3><h4 id="1-基本语法"><a href="#1-基本语法" class="headerlink" title="1.基本语法"></a>1.基本语法</h4><ol><li>```html <table></table> //定义表格标签 <tr></tr>//定义表格的行标签，必须嵌套在table标签中 <td></td>//单元格，必须嵌套  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">字母td指的是表格数据table data，即数据单元格内容</span><br><span class="line"></span><br><span class="line">#### 表格单元标签</span><br><span class="line"></span><br><span class="line">表头单元格里面的文本内容加粗居中显示。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;html</span><br><span class="line">&lt;th&gt;</span><br></pre></td></tr></table></figure></li></ol><p>标签表示HTML表格的表头部分(table head缩写)</p><h4 id="表格属性"><a href="#表格属性" class="headerlink" title="表格属性"></a>表格属性</h4><p>这部分实际开发不常用，之后通过CSS来设置。</p><p>目的：</p><ul><li>  记住这些英文单词，后面CSS会用</li><li>直观感受表格的外观形态</li></ul><table><thead><tr><th>属性名</th><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>align</td><td>left,center,right</td><td>规定表格相对周围元素的对齐方式</td></tr><tr><td>border</td><td>1or””</td><td>规定表格单元是否拥有边框，默认为“”,表示没有边框</td></tr><tr><td>cellpadding</td><td>像素值</td><td>规定单元边沿与其内容之间的空白，默认1像素</td></tr><tr><td>cellspacing</td><td>像素值</td><td>规定单元格之间的空白，默认2像素</td></tr><tr><td>width</td><td>像素值or百分比</td><td>规定表格的宽度</td></tr></tbody></table><p>​                           |但是这些属性要写到表格标签table里面</p><table><thead><tr><th>《table》《/table》</th><th>表格标签</th><th>就是一个四方的盒子</th></tr></thead><tbody><tr><td>《tr》《/tr》</td><td>表格行标签</td><td>行标签要再table标签内部才有意义</td></tr><tr><td>《td&gt;&lt;/td》</td><td>单元格标签</td><td>单元格标签是个容器级元素，可以放任何东西</td></tr><tr><td>《th&gt;&lt;/th》</td><td>表头单元格标签</td><td>它还是一个单元格，但是里面的文字会居中且加粗</td></tr><tr><td>《caption&gt;&lt;/caption》</td><td>表格标题标签</td><td>表格的标题，跟着表格</td></tr><tr><td>clospan 和 rowspan</td><td>合并属性</td><td>用来合并单元格的</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h4 id="表格结构标签"><a href="#表格结构标签" class="headerlink" title="表格结构标签"></a>表格结构标签</h4><p>把表格分割成表格头部和表格主体两大部分。</p><p>头部区域：《thead&gt;,必须有tr标签，一般位于第一行</p><p>主体区域：《tbody&gt;，主要用于存放数据本体</p><p>以上标签是放在table标签中。</p><h4 id="小说排行榜案例"><a href="#小说排行榜案例" class="headerlink" title="小说排行榜案例"></a>小说排行榜案例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>今日小说排行榜<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span> <span class="attr">height</span>=<span class="string">&quot;249&quot;</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>排名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>关键词<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>趋势<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>进入搜索<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>最近七日<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>相关链接<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>三体<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;上箭头.png&quot;</span> <span class="attr">width</span>=<span class="string">16</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>456<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>123<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>贴吧<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>百科<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>明朝那些事儿<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;下箭头.png&quot;</span> <span class="attr">width</span>=<span class="string">16</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>456<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>123<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>贴吧<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>百科<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>围城<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;上箭头.png&quot;</span> <span class="attr">width</span>=<span class="string">16</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>456<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>123<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>贴吧<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>百科<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>杀死一只知更鸟<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;上箭头.png&quot;</span> <span class="attr">width</span>=<span class="string">16</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>456<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>123<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>贴吧<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>百科<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>6<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>人类简史<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;下箭头.png&quot;</span> <span class="attr">width</span>=<span class="string">16</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>456<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>123<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>贴吧<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>百科<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>7<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>红楼梦<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;上箭头.png&quot;</span> <span class="attr">width</span>=<span class="string">16</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>456<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>123<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>贴吧<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>百科<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>8<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>白鹿原<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;上箭头.png&quot;</span> <span class="attr">width</span>=<span class="string">16</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>456<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>123<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>贴吧<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>百科<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/小说排行榜.png"><h4 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h4><h5 id="方式"><a href="#方式" class="headerlink" title="方式"></a>方式</h5><ul><li>  跨行合并：rowspan=“合并单元格的个数”</li><li>  跨列合并：colspan=”合并单元格的个数”</li></ul><h5 id="目标单元格-写合并代码"><a href="#目标单元格-写合并代码" class="headerlink" title="目标单元格(写合并代码)"></a>目标单元格(写合并代码)</h5><ul><li>  跨行：最上侧单元格为目标单元格，写合并代码</li><li>  跨列：最左侧单元格为目标单元格，写合并代码</li></ul><h5 id="合并单元格三部曲"><a href="#合并单元格三部曲" class="headerlink" title="合并单元格三部曲"></a>合并单元格三部曲</h5><ol><li> 确定跨行还是跨列</li><li> 找到目标单元格，写上合并方式=合并单元格数量。比如&lt;td colspan=”2”》&lt;/td》。</li><li> 删除多余的单元格</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>合并单元格<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span> <span class="attr">height</span>=<span class="string">&quot;249&quot;</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h3><p>表格是用来显示数据的，那么<code>列表就是用来布局的。</code></p><p><code>列表</code>最大的特点就是整齐、整洁、有序，它作为布局会更加自由和方便。</p><p>根据使用情景 不同，列表可以分为三大类：</p><ul><li>  无序列表</li><li>  有序列表</li><li>  自定义列表</li></ul><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><p>ul标签表示TTML页面中项目的无序列表，一般会以项目符号呈现列表项，而列表项使用li标签定义。</p><p>无序列表语法格式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">u1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>列表1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    ……</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>  无序列表是无序的， 并列</li><li>  ul只能嵌套li</li><li>  li里面可以容纳任何元素</li></ul><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><p>ol标签用于定义有序列表，列表排序以数字显示，并且用li标签定义列表项。</p><p>有序列表的基本语法格式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    ……</span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p>性质和无序列表一致。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>有序列表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>英雄尺寸排行榜<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>墨燃<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>梅寒雪<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>金龙盘玉柱<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h4><p>使用场景：</p><p>用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号。</p><p>dl用于定义描述列表（定义列表），该标签会与dt（定义项目/名字）je dd(描述每一个项目/名字)一起使用。</p><p>基本语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>名词1<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词解释1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>&lt;名词解释2/dd&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：</p><p>dl里面只能包含dt和dd</p><p>dt和dd没有个数限制，经常是一个dt包含 多个dd</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=&lt;&gt;&gt;, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span>关注我们<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>新浪微博<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>官方微信<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span>联系我们<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h3><p>目的：收集<code>用户信息</code>。</p><h4 id="表单的组成"><a href="#表单的组成" class="headerlink" title="表单的组成"></a>表单的组成</h4><ol><li> 表单域</li><li> 表单控件（表单元素）</li><li> 提示信息</li></ol><h4 id="表单域"><a href="#表单域" class="headerlink" title="表单域"></a>表单域</h4><p><code>表单域</code>是一个包含表单元素的区域。</p><p>form标签用于定义表单域，以实现用户信息的收集和传递。</p><p><code>form会把它范围内的表单元素信息提交给服务器</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;url地址&quot;</span> <span class="attr">method</span>=<span class="string">&quot;提交范式&quot;</span> <span class="attr">name</span>=<span class="string">&quot;表单域名称&quot;</span>&gt;</span></span><br><span class="line">各种表单元素控件</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h5><table><thead><tr><th>属性</th><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>action</td><td>url地址</td><td>用于指定接收并处理表单数据的服务程序的url地址</td></tr><tr><td>method</td><td>get/post</td><td>用于设置表单数据的提交发方式，其取值为get或post</td></tr><tr><td>name</td><td>名称</td><td>用于指定表单名称，以区分同一个页面中多个表单域</td></tr></tbody></table><p>ps：</p><ul><li>  写表单元素之前，应该有个表单域把它们进行包含</li><li>  表单域是form标签</li></ul><h5 id="表单控件"><a href="#表单控件" class="headerlink" title="表单控件"></a>表单控件</h5><p>在表单域中可以定义各种表单元素，这些表单元素就是允许用户在表单中输入或者选择的内容控件。</p><ul><li>  input输入表单元素</li><li>  select下拉表单元素</li><li>  textarea文本域元素</li></ul><h6 id="input表单元素"><a href="#input表单元素" class="headerlink" title="input表单元素"></a>input表单元素</h6><p>input标签用于收集用户信息。</p><p>在此标签中，包含一个<code>type</code>属性，根据不同的<code>type</code>属性值，输入字段拥有很多种形式（可以是文本字段、复选框、掩码后的文本控件、单选按钮、按钮等）。</p><blockquote><p>  <code>&lt;input type=&quot;属性值&quot;&gt;</code></p></blockquote><ul><li>  input标签为单标签</li><li>  type属性设置不同的属性值用来指定不同控件类型</li></ul><p><code>type</code>属性值如下</p><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>button</td><td>定义可点击按钮（多数情况下，用于通过javascript启动脚本)</td></tr><tr><td>checkbox</td><td>定义复选框</td></tr><tr><td>file</td><td>定义输入字段和”浏览”按钮，供文件上传</td></tr><tr><td>hidden</td><td>定义隐藏的输入字段</td></tr><tr><td>image</td><td>定义图像形式的提交按钮</td></tr><tr><td>password</td><td>定义密码字段，该字段中的字符被掩码。</td></tr><tr><td>radio</td><td>定义单选按钮</td></tr><tr><td>reset</td><td>定义重置按钮。重置按钮会 清除表单中的所有数据</td></tr><tr><td>submit</td><td>定义提交按钮，提交按钮会把表单数据发送到服务器。</td></tr><tr><td>text</td><td>定义单行的输入字段,用户可在其中输入文本。默认宽度为20个字符。</td></tr></tbody></table><table><thead><tr><th>属性</th><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>用户自定义</td><td>定义input元素的名称</td></tr><tr><td>value</td><td>用户自定义</td><td>规定input元素的值</td></tr><tr><td>checked</td><td>checked</td><td>规定此input元素首次加载时应当被选中</td></tr><tr><td>maxlength</td><td>正整数</td><td>规定输入字段中的字符的最大长度</td></tr></tbody></table><ol><li> name和value是每个表单元素都有的属性值，主要给后台人员使用。</li><li> name表单元素的名字，要求<code>单选按钮和复选框要有相同的name值</code>。</li><li> <code>checked属性主要针对于单选按钮和复选框</code>，主要作用一打开页面，就可以默认选中某个表单元素。</li><li> maxlength是用户可以在表单元素输入的最大字符数，一般较少使用。</li></ol><p>eg:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>input 表单域<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;xxx.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- text文本框 用户可以在里面输入任何文字 --&gt;</span></span><br><span class="line">       用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;请输入用户名&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;6&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- password 密码框 用户看不见输入的密码 --&gt;</span></span><br><span class="line">       密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- radio 单选按钮 --&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- name 是表单元素名字 这里性别单选按钮必须有相同的名字name,才可以实现多选1 --&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 单选框和复选框可以设置checked属性，当页面打开的时候就可以默认选中这个按钮 --&gt;</span></span><br><span class="line">       性别:男 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>&gt;</span> 女 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- checkbox 复选框 --&gt;</span></span><br><span class="line">       爱好：吃饭<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;吃饭&quot;</span>&gt;</span> 睡觉<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;睡觉&quot;</span>&gt;</span> 打豆豆 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;打豆豆&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 点击了提交按钮，可以把表单域form里面的表单元素里面的值提交给后台服务器 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;免费注册&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 恢复默认状态 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重新填写&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 普通按钮 button 后期结合js到使用 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;获取短信验证码&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 文件域  --&gt;</span></span><br><span class="line">       上传头像: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/YYAMI0J_ZO%7D54Z4O%7D@F%9_7.png" alt="img"></p><p><strong>label标签</strong></p><p>label标签为input元素定义标注（标签）</p><p>label标签用于绑定一个表单元素，当点击label标签内的文本时，浏览器就会自动将焦点（光标）转到或者选择对应的表单元素上，用来增加用户体验。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sex&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>核心：lable标签的<code>for属性</code>应当与相关元素的<code>id属性相同</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>label标签<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;text&quot;</span>&gt;</span>用户名:<span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;man&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;man&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;woman&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;woman&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="select-下拉表单元素"><a href="#select-下拉表单元素" class="headerlink" title="select 下拉表单元素"></a>select 下拉表单元素</h6><p>使用场景：多个选项供用户选择，用此标签可以借用页面空间.我们可以使用select定义下拉列表。</p><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ootion</span>&gt;</span>选项1<span class="tag">&lt;/<span class="name">ootion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ootion</span>&gt;</span>选项2<span class="tag">&lt;/<span class="name">ootion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ootion</span>&gt;</span>选项3<span class="tag">&lt;/<span class="name">ootion</span>&gt;</span></span><br><span class="line">    ……</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ps：在option中定义select=”selected”时，当前项即为默认选中项。</p><p>eg：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>select标签<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    籍贯:</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>山东<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>广西<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>  <span class="attr">selected</span>=<span class="string">&quot;selected&quot;</span>&gt;</span>火星<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>M12<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="textarea文本域元素"><a href="#textarea文本域元素" class="headerlink" title="textarea文本域元素"></a>textarea文本域元素</h6><p>使用场景：当用户输入内容较多的情况下，我们就不能使用文本框表单了，我们可以使用textarea标签在表单元素中，textarea标签是用于定义多行文本输入的控件。</p><p>使用多行文本输入控件，可以输入更多文字，该控件常见于留言板，评论。</p><p>语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">&quot;3&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line">    文本内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><p>cols和rows控制列数，行数，实际开发不用，一般用CSS设置。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>textarea 文本域<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">        留言板:</span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">&quot;50&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;5&quot;</span>&gt;</span> </span><br><span class="line">            这里，我期待与你相遇！</span><br><span class="line">        <span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=&lt;&gt;, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>青春不常在，抓紧谈恋爱<span class="tag">&lt;/<span class="name">h4</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                性别:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;man&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/男.png&quot;</span> <span class="attr">width</span>=<span class="string">&quot;16&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;man&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;woman&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/女.png&quot;</span> <span class="attr">width</span>=<span class="string">&quot;16&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;woman&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                生日:</span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>1985<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>1986<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>1987<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>1988<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>1989<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>1990<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>=<span class="string">&quot;selected&quot;</span>&gt;</span>-请选择年-<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>01<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>02<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>03<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>04<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>05<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>06<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>=<span class="string">&quot;selected&quot;</span>&gt;</span>-请选择月-<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>01<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>02<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>03<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>04<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>05<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span>&gt;</span>06<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>=<span class="string">&quot;selected&quot;</span>&gt;</span>-请选择日-<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 第三行 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;dq&quot;</span>&gt;</span>所在地区:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;adress&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dq&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 第四行 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                婚姻状况</span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;marry&quot;</span> <span class="attr">id</span>=<span class="string">&quot;m&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;m&quot;</span>&gt;</span>未婚<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;marry&quot;</span> <span class="attr">id</span>=<span class="string">&quot;li&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;li&quot;</span>&gt;</span>离婚<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 第五行 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;degree&quot;</span>&gt;</span>学历<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;de&quot;</span> <span class="attr">id</span>=<span class="string">&quot;degree&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 第六行 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                喜欢的类型</span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;kind&quot;</span> <span class="attr">id</span>=<span class="string">&quot;k&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;k&quot;</span>&gt;</span>可爱的<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;kind&quot;</span> <span class="attr">id</span>=<span class="string">&quot;k&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;k&quot;</span>&gt;</span>可爱的<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;kind&quot;</span> <span class="attr">id</span>=<span class="string">&quot;ki&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;ki&quot;</span>&gt;</span>妩媚的<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;kind&quot;</span> <span class="attr">id</span>=<span class="string">&quot;xiao&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;xiao&quot;</span>&gt;</span>小鲜肉<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;kind&quot;</span> <span class="attr">id</span>=<span class="string">&quot;lao&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;lao&quot;</span>&gt;</span>老腊肉<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;kind&quot;</span> <span class="attr">id</span>=<span class="string">&quot;all&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;all&quot;</span>&gt;</span>都喜欢<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                自我介绍</span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">&quot;50&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;5&quot;</span>&gt;</span> </span><br><span class="line">                    自我介绍</span><br><span class="line">                <span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;免费注册&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span> &gt;</span>我同意服务条款<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>我是会员，立即登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h4</span>&gt;</span>我承诺<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>年满18，单身<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>抱着严肃的态度<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>真诚寻找另一半<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> &gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="css简介"><a href="#css简介" class="headerlink" title="css简介"></a>css简介</h2><p>美化布局，页面布局</p><p>CSS是层叠样式表的简称。（级联样式表）</p><p>CSS也是一种标记语言。</p><p><code>CSS规则由两个主要的部分构成：选择器以及一条或多条声明。</code></p><ul><li>  选择器用于指定CSS样式的<code>HTML标签</code>，花括号内是对该对象设置的具体样式。</li><li>  属性和属性值以“键值对”形式出现。</li><li>  属性是指对指定的对象设置的样式属性，例如字体大小、文本颜色等</li><li>  属性和属性值之间用用“；”隔开，一定要隔开！！</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;体验CSS语法规范&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        <span class="comment">/* 选择器&#123;样式&#125; */</span></span><br><span class="line">        <span class="comment">/* 给谁改样式&#123;改什么样式&#125; */</span></span><br><span class="line">        <span class="selector-tag">p</span>&#123;</span><br><span class="line">            <span class="attribute">color</span>: lightcoral;</span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;有点意思&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">html</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="CSS代码风格"><a href="#CSS代码风格" class="headerlink" title="CSS代码风格"></a>CSS代码风格</h2><ol><li> 样式格式书写</li><li> 样式大小风格</li><li> 样式空格风格</li></ol><p><strong>样式格式书写</strong></p><p>①紧凑格式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h3</span> &#123; <span class="attribute">color</span>: deeppink;<span class="attribute">font-size</span>: <span class="number">20px</span>;&#125;</span><br></pre></td></tr></table></figure><p>②展开格式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h3</span> &#123; </span><br><span class="line"><span class="attribute">color</span>: deeppink;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;<span class="comment">/*更直观*/</span></span><br></pre></td></tr></table></figure><p><strong>空格规范</strong></p><ul><li>  属性值前面，冒号后面，保留一个空格</li><li>  选择器（标签）和大括号中间保留空格</li></ul><h2 id="CSS基础选择器"><a href="#CSS基础选择器" class="headerlink" title="CSS基础选择器"></a>CSS基础选择器</h2><p>选择器作用：<code>选择标签用的</code>。</p><p>选对人+做对事</p><h3 id="选择器分类"><a href="#选择器分类" class="headerlink" title="选择器分类"></a>选择器分类</h3><p>选择器分为基础选择器和复合选择器两个大类。</p><p>基础选择器是由单个选择器组成的。</p><p>基础选择器又包括：<code>标签选择器、类选择器、id选择器和通配选择器</code></p><h4 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h4><p>即用HTML标签名称作为选择器，按标签名称分类，为页面中某一类标签指定统一的CSS样式。</p><p>语法</p><blockquote><p>  标签名 {</p><p>  ​    属性1：属性值1；</p><p>  ​    属性2：属性值2；</p><p>  ​    属性3：属性值3；</p><p>  ​    ……</p><p>  }</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;IE=edge&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;标签选择器&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    p &#123;</span><br><span class="line">        color: green;</span><br><span class="line">    &#125;</span><br><span class="line">    div &#123;</span><br><span class="line">        color: pink;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;p&gt;男生&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;男生&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;男生&lt;/p&gt;</span><br><span class="line">    &lt;div&gt;女生&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;女生&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;女生&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h4><p>如果想要差异化选择不同的标签，单独选一个或者几个标签，可以使用<code>选择器</code></p><blockquote><p>  .类名 {</p><p>  ​    属性1： 属性值1；</p><p>  ​    ……</p><p>  }</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;标签选择器&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-class">.red</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">ul</span>&gt;</span><br><span class="line">        &lt;li class=&quot;red&quot;&gt;男生&lt;/li&gt;</span><br><span class="line">        &lt;<span class="selector-tag">li</span>&gt;男生&lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">li</span>&gt;男生&lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">li</span>&gt;女生&lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">li</span>&gt;女生&lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">li</span>&gt;女生&lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">ul</span>&gt;</span><br><span class="line">    &lt;div class=&quot;red&quot;&gt;花花&lt;/div&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">html</span>&gt;</span><br></pre></td></tr></table></figure><p>ps：</p><ul><li>  类选择器使用”.”（英文点号）进行标识，后面紧跟类名（自定义）</li><li>  长名称或词组可以使用横线为选择器命名</li><li>  不要使用纯数字或中午命名，尽量使用英文命名</li><li>  命名尽量有意义</li><li>  命名规范：web前端开发规范手册</li></ul><h5 id="下面是常见的命名参考规范："><a href="#下面是常见的命名参考规范：" class="headerlink" title="下面是常见的命名参考规范："></a>下面是常见的命名参考规范：</h5><p>头部：header</p><p>内容：content/container</p><p>尾部：footer</p><p>导航：nav</p><p>侧栏：sidebar</p><p>栏目：column</p><p>整体布局：wrapper</p><p>左右中：left / right / center</p><p>登录条：loginbar</p><p>标志：logo</p><p>广告：banner</p><p>页面主体：main</p><p>热点：hot</p><p>新闻：news</p><p>下载：download</p><p>子导航：subnav</p><p>菜单：menu</p><p>子菜单：submenu</p><p>搜索：search</p><p>友情链接：friendlink</p><p>页脚：footer</p><p>版权：copyright</p><p>滚动：scroll</p><p>标签页：tab</p><p>文章列表：list</p><p>提示信息：msg</p><p>小技巧：tips</p><p>栏目标题：title</p><p>加入：join</p><p>指南：guild</p><p>服务：service</p><p>注册：regsiter</p><p>状态：status</p><p>投票：vote</p><p>合作伙伴：partner</p><h4 id="类选择器-多类名"><a href="#类选择器-多类名" class="headerlink" title="类选择器-多类名"></a>类选择器-多类名</h4><p>我们可以给一个标签指定多个类名，从而达到更多的选择目的。简单理解就是一个标签有多个名字。</p><p>使用方式：用空格隔开即可。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;多类名的使用&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        <span class="selector-class">.red</span> &#123;</span><br><span class="line">            <span class="attribute">color</span>: pink;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.font-35</span> &#123;</span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">35px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;div class=&quot;red font-35&quot;&gt;花花&lt;/div&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">html</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h4><p>id选择器可以为标有特定id的HTML元素指定的样式。</p><p>HTML元素以id属性来设置id选择器，CSS中id选择器以“#”来定义。</p><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#id</span>名 &#123;</span><br><span class="line">属性<span class="number">1</span>: 属性值<span class="number">1</span>;</span><br><span class="line">……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和类选择器的区别</p><ol><li> 类选择器可以被多个对象使用</li><li> id选择器就行身份证号码，唯一，不能重复使用</li><li> 最大区别：使用次数不同</li><li> 类选择器在修改样式中用的最多，id选择器一般用于页面唯一性的元素上，经常和JavaScript搭配使用。</li></ol><h4 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h4><p>通配符选择器用“*”定义，它表示页面中所有元素（标签）</p><p>语法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">属性<span class="number">1</span>: 属性值<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ps:</p><ul><li>  通配符选择器不需要调用，自动就给所有元素使用样式。</li><li>  特殊情况下才使用（后面讲）</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;通配符&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        * &#123;</span><br><span class="line">            <span class="attribute">color</span>: lightblue;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span>&gt;落日归山海，山海藏深意&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">span</span>&gt;s深爱却迟解，将爱且晚秋&lt;/<span class="selector-tag">span</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">ul</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">li</span>&gt;</span><br><span class="line">            闲坐看云，静听流水.</span><br><span class="line">        &lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">ul</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">html</span>&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>基础选择器</th><th>作用</th><th>特点</th><th>使用情况</th><th>用法</th></tr></thead><tbody><tr><td>标签选择器</td><td>可以选出所用相同的标签</td><td>不能差异化选择</td><td>较多</td><td>p {color: red;}</td></tr><tr><td>类选择器</td><td>可以选出一个或多个标签</td><td>可以根据需求选择</td><td>非常多</td><td>.nav {color : red;}</td></tr><tr><td>id选择器</td><td>一次只能选择一个标签</td><td>ID选择器只能在每个HTML文档中出现一次</td><td>一般和js搭配</td><td>#nav {color: red;}</td></tr><tr><td>通配符选择器</td><td>选择所有标签</td><td>选择的太多，有部分不需要</td><td>特殊情况使用</td><td>* {color: red;}</td></tr></tbody></table><p>如果是修改样式，类选择器是使用最多的。</p><h3 id="CSS字体属性"><a href="#CSS字体属性" class="headerlink" title="CSS字体属性"></a>CSS字体属性</h3><p>CSS Fonts属性用于字体系列、大小、粗细和文字样式（斜体）</p><h4 id="字体更改"><a href="#字体更改" class="headerlink" title="字体更改"></a>字体更改</h4><ul><li>  各种字体之间必须使用英文状态下的逗号隔开</li><li>  一般情况下，如果有空格隔开的多个单词组成的字体，加引号</li><li>  尽量使用系统默认自带字体，保证在任何用户浏览器中都能正常显示</li><li>  最常见的几个字体：body{font-family:”Microsoft YaHei”,tohoma,arial,’Hiragino Sans GB’;}</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;CSS字体属性系列&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        <span class="selector-tag">h2</span> &#123;</span><br><span class="line">            <span class="attribute">font-family</span>: <span class="string">&quot;微软雅黑&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">p</span> &#123;</span><br><span class="line">            <span class="attribute">font-family</span>: Georgia, <span class="string">&#x27;Times New Roman&#x27;</span>, Times, serif;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">h2</span>&gt;山河&lt;/<span class="selector-tag">h2</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;高山流水，知音难觅&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;山河不足重，重在遇知己.&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;知己既去，何若玉碎&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;你若不在了，千山暮雪我孤翼只影向谁去&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">html</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="字体大小"><a href="#字体大小" class="headerlink" title="字体大小"></a>字体大小</h4><p>font-size定义字体大小</p><ul><li>  px大小是网页中最常用的单位</li><li>  谷歌浏览器默认文字大小为16px</li><li>  不用浏览器默认显示的字号大小不一致，我们尽量给出一个明确的大小，不要默认大小</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;CSS字体属性系列&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        <span class="selector-tag">body</span> &#123;</span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 标题标签比较特殊，需要单独制定文字大小 */</span></span><br><span class="line">        <span class="selector-tag">h2</span> &#123;</span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">h2</span>&gt;山河&lt;/<span class="selector-tag">h2</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;高山流水，知音难觅&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;山河不足重，重在遇知己.&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;知己既去，何若玉碎&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;你若不在了，千山暮雪我孤翼只影向谁去&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">html</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="字体粗细"><a href="#字体粗细" class="headerlink" title="字体粗细"></a>字体粗细</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;CSS字体属性系列&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        <span class="selector-class">.bold</span> &#123;</span><br><span class="line">            <span class="comment">/* font-weight: bold; 等价于下面那行*/</span></span><br><span class="line">            <span class="comment">/* 实际开发喜欢使用数字改变粗细，不写px */</span></span><br><span class="line">            <span class="comment">/* nomal=400 */</span></span><br><span class="line">            <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">h2</span>&gt;山河&lt;/<span class="selector-tag">h2</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;高山流水，知音难觅&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;山河不足重，重在遇知己.&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">    &lt;p class=&quot;bold&quot;&gt;知己既去，何若玉碎&lt;/p&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;你若不在了，千山暮雪我孤翼只影向谁去&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">html</span>&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>normal</td><td>默认值（不加粗)</td></tr><tr><td>bold</td><td>定义粗体</td></tr><tr><td>100-900</td><td>400=normal，700=bold，注意 这个数字后面不跟单位</td></tr></tbody></table><p>实际开发时，喜欢用数字表示粗细。</p><h4 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h4><p>CSS使用font-style属性设置文本风格</p><blockquote><p>  p {</p><p>  ​    font-style: normal;</p><p>  }</p></blockquote><table><thead><tr><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>normal</td><td>默认值，浏览器会显示标准的字体样式 font-style:normal；</td></tr><tr><td>italic</td><td>斜体</td></tr></tbody></table><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;CSS字体属性系列&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        <span class="selector-tag">p</span> &#123;</span><br><span class="line">            <span class="attribute">font-style</span>: italic;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">em</span> &#123;</span><br><span class="line">            <span class="attribute">font-style</span>: normal;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">        </span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">h2</span>&gt;山河&lt;/<span class="selector-tag">h2</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;高山流水，知音难觅&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;山河不足重，重在遇知己.&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">    &lt;p class=&quot;bold&quot;&gt;知己既去，何若玉碎&lt;/p&gt;</span><br><span class="line">    &lt;<span class="selector-tag">em</span>&gt;你若不在了，千山暮雪我孤翼只影向谁去&lt;/<span class="selector-tag">em</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">html</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="css字体复合属性"><a href="#css字体复合属性" class="headerlink" title="css字体复合属性"></a>css字体复合属性</h4><p>节约代码</p><blockquote><p>  body {</p><p>  ​    font: font-style font-weight font-size/line-height font-family;</p><p>  }</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;CSS字体属性系列&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        <span class="selector-tag">div</span> &#123;</span><br><span class="line">            <span class="comment">/* 复合属性：简写的方式 节约代码 */</span></span><br><span class="line">            <span class="comment">/* font: font-style font-weight font-size/line-height font-famliy */</span></span><br><span class="line">            <span class="attribute">font</span>: italic <span class="number">700</span> <span class="number">16px</span> <span class="string">&#x27;Mcrosoft yahei&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">        </span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">h2</span>&gt;山河&lt;/<span class="selector-tag">h2</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;高山流水，知音难觅&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;山河不足重，重在遇知己.&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">    &lt;p class=&quot;bold&quot;&gt;知己既去，何若玉碎&lt;/p&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span>&gt;你若不在了，千山暮雪我孤翼只影向谁去&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">html</span>&gt;</span><br></pre></td></tr></table></figure><ul><li>  使用font属性时，必须要按上面的语法格式顺序书写，每个属性用空格隔开。</li><li>  不需要设置的属性可以省略(取默认值)，但<code>必须保留font-size</code>和<code>font-family属性</code>，否则font属性将不起作用</li></ul><h3 id="CSS文本属性"><a href="#CSS文本属性" class="headerlink" title="CSS文本属性"></a>CSS文本属性</h3><h4 id="文本颜色"><a href="#文本颜色" class="headerlink" title="文本颜色"></a>文本颜色</h4><p>color 属性用于定义文本颜色</p><blockquote><p>  `div {</p><p>  ​    color: red;</p><p>  }`</p></blockquote><p>十六进制写法：<code>#a1ebc6</code>双击会出现调色盘</p><p>RGB写法：rgb(255,0,0)或rgb(100%,0%,0%)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;CSS文本属性之颜色&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        <span class="selector-tag">div</span> &#123;</span><br><span class="line">            <span class="attribute">color</span>: <span class="number">#a1ebc6</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">        </span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">h2</span>&gt;山河&lt;/<span class="selector-tag">h2</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;高山流水，知音难觅&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;山河不足重，重在遇知己.&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">    &lt;p class=&quot;bold&quot;&gt;知己既去，何若玉碎&lt;/p&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span>&gt;你若不在了，千山暮雪我孤翼只影向谁去&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">html</span>&gt;</span><br></pre></td></tr></table></figure><p>开发中最常用的是十六进制颜色</p><h4 id="对齐文本"><a href="#对齐文本" class="headerlink" title="对齐文本"></a>对齐文本</h4><p><code>text-align</code>属性用于设置内文本内容水平对齐方式</p><blockquote><p>  div {</p><p>  ​    text-align: center;</p><p>  }</p></blockquote><table><thead><tr><th>属性值</th><th>解释</th></tr></thead><tbody><tr><td>left</td><td>左对齐（默认）</td></tr><tr><td>right</td><td>右对齐</td></tr><tr><td>center</td><td>居中对齐</td></tr></tbody></table><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    &lt;title&gt;CSS文本之文字对齐&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        <span class="selector-tag">h1</span> &#123;</span><br><span class="line">            <span class="attribute">text-align</span>: center;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">h1</span>&gt;居中对齐标题&lt;/<span class="selector-tag">h1</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="装饰文本"><a href="#装饰文本" class="headerlink" title="装饰文本"></a>装饰文本</h4><p>text-decoration属性规定添加文本的修饰。可以给文本添加下划线、删除线、上划线。</p><blockquote><p>  div {</p><p>  ​    text-decoration: underline:</p><p>  }</p></blockquote><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>none</td><td>默认。没有装饰线（最常用）</td></tr><tr><td>underline</td><td>下划线。链接a自带下划线（常用）</td></tr><tr><td>overline</td><td>上划线</td></tr><tr><td>line-throngh</td><td>删除线</td></tr></tbody></table><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">    &lt;title&gt;文本属性之装饰文本&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        <span class="selector-tag">div</span> &#123;</span><br><span class="line">            <span class="comment">/* text-decoration: underline; */</span></span><br><span class="line">            <span class="comment">/* text-decoration: line-through; */</span></span><br><span class="line">            <span class="attribute">text-decoration</span>: overline;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">a</span> &#123;</span><br><span class="line">            <span class="comment">/* 取消a默认的下划线 */</span></span><br><span class="line">            <span class="attribute">text-decoration</span>: none;</span><br><span class="line">            <span class="attribute">color</span>: <span class="number">#333</span></span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span>&gt;夏天的风&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;a href=&quot;#&quot;&gt;夏天的风&lt;/a&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure><p>重点：添加下划线，删除下划线</p><h4 id="文本缩进"><a href="#文本缩进" class="headerlink" title="文本缩进"></a>文本缩进</h4><p>text-indent属性用来指定文本的第一行缩进，段落首行缩进</p><blockquote><p>  div {</p><p>  ​    text-indent: 10px;</p><p>  }</p></blockquote><p>有个特别灵性的单位<code>em</code></p><blockquote><p>  p {</p><p>  ​    text-indent: 2em;</p><p>  }</p></blockquote><p><code>em</code>是一个相对单位，就是当前元素(font-size)1个文字的大小，如果当前元素没有设置大小，则会按照父元素的1个文字大小</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    &lt;title&gt;文本缩进&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        <span class="selector-tag">p</span> &#123;</span><br><span class="line">            <span class="comment">/* text-indent: 20px; */</span></span><br><span class="line">            <span class="attribute">text-indent</span>: <span class="number">2em</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">        </span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">h2</span>&gt;山河&lt;/<span class="selector-tag">h2</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;高山流水，知音难觅&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;山河不足重，重在遇知己.&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">    &lt;p class=&quot;bold&quot;&gt;知己既去，何若玉碎&lt;/p&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;你若不在了，千山暮雪我孤翼只影向谁去.无问归期。十年生死两茫茫，不思量，自难忘。千里孤坟，唯有泪千行。你若不在了，千山暮雪我孤翼只影向谁去.无问归期。十年生死两茫茫，不思量，自难忘。千里孤坟，唯有泪千行。你若不在了，千山暮雪我孤翼只影向谁去.无问归期。十年生死两茫茫，不思量，自难忘。千里孤坟，唯有泪千行。你若不在了，千山暮雪我孤翼只影向谁去.无问归期。十年生死两茫茫，不思量，自难忘。千里孤坟，唯有泪千行。&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="行间距"><a href="#行间距" class="headerlink" title="行间距"></a>行间距</h4><p><code>line-height</code>属性用于设置行间距。</p><blockquote><p>  p {</p><p>  ​    line-height: 26px;</p><p>  }</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;行间距&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        <span class="selector-tag">div</span> &#123;</span><br><span class="line">            <span class="comment">/* text-indent: 20px; */</span></span><br><span class="line">            <span class="attribute">line-height</span>: <span class="number">26px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">        </span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span>&gt;山河&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;高山流水，知音难觅&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;山河不足重，重在遇知己.&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">    &lt;p class=&quot;bold&quot;&gt;知己既去，何若玉碎&lt;/p&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;你若不在了，千山暮雪我孤翼只影向谁去.无问归期。十年生死两茫茫，不思量，自难忘。千里孤坟，唯有泪千行。你若不在了，千山暮雪我孤翼只影向谁去.无问归期。十年生死两茫茫，不思量，自难忘。千里孤坟，唯有泪千行。你若不在了，千山暮雪我孤翼只影向谁去.无问归期。十年生死两茫茫，不思量，自难忘。千里孤坟，唯有泪千行。你若不在了，千山暮雪我孤翼只影向谁去.无问归期。十年生死两茫茫，不思量，自难忘。千里孤坟，唯有泪千行。&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">html</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="CSS的引入方式"><a href="#CSS的引入方式" class="headerlink" title="CSS的引入方式"></a>CSS的引入方式</h3><h5 id="CSS的三种样式表"><a href="#CSS的三种样式表" class="headerlink" title="CSS的三种样式表"></a>CSS的三种样式表</h5><ol><li> 行内样式表（行内式）</li><li> 内部样式表（嵌入式）</li><li> 外部样式表（链接式）</li></ol><h4 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h4><p>写到html内部，是将所有CSS代码抽取出来，单独放到一个style标签中。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-tag">div</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: black;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"><span class="comment">/*这句话直接更改博客文章字体颜色，大小*/</span></span><br></pre></td></tr></table></figure><ul><li>  style标签理论上可以放在html文档的任何地方，但一般会放在文档的head标签中。</li><li>  此种方式，可以方便控制当前整个页面中的元素样式设置。</li><li>  代码结构非常清晰，但是并没有实现完全分离</li><li>  嵌入式引入</li></ul><h4 id="行内样式表"><a href="#行内样式表" class="headerlink" title="行内样式表"></a>行内样式表</h4><p>是在元素标签内部style属性中设定CSS样式，适用于修改简单样式。</p><blockquote><p>  <code>&lt;div style=&quot;color: rgb(149, 128, 243); font-size: 12px;&quot;&gt; 最后一捧人间烟火&lt;/div&gt;</code></p></blockquote><ul><li>  在双引号中间，写法要符合CSS规范</li><li>  可以控制当前的标签设置样式</li></ul><p style="color: rgb(149, 128, 243); font-size: 12px;">我会改字体颜色啦</p><h4 style="color: rgb(149, 128, 243);">外部样式表</h4><p>实际开发中都是外部样式表，适用于样式比较多的情况，核心是样式单独写到CSS文件中，之后把CSS文件引入到HTML页面中使用。</p><p>引入步骤</p><ol><li> 新建一个后缀名为.css的样式文件，把所有CSS代码都放入此文件中</li><li> 在HTML页面中，使用link标签引入这个文件。</li></ol><blockquote>  <link rel="stylesheet" href="css文件路径"></blockquote><p>新建css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 只有样式，没有标签 */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引入</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;外部样式表&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span>&gt;引入外部css&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">html</span>&gt;</span><br></pre></td></tr></table></figure><p><code>实际开发中最常用的方式</code></p><h4 id="CSS引入方式总结"><a href="#CSS引入方式总结" class="headerlink" title="CSS引入方式总结"></a>CSS引入方式总结</h4><table><thead><tr><th>样式表</th><th>优点</th><th>缺点</th><th>使用情况</th><th>控制范围</th></tr></thead><tbody><tr><td>行内样式表</td><td>书写方便，权重高</td><td>结构样式混写</td><td>较少</td><td>控制一个标签</td></tr><tr><td>内部样式表</td><td>部分结构和样式相分离</td><td>没有彻底分离</td><td>较多</td><td>控制一个页面</td></tr><tr><td>外部样式表</td><td>完全实现结构和样式相分离</td><td>需要引入</td><td>最多</td><td>控制多个页面</td></tr></tbody></table><h4 id="新闻综合案例"><a href="#新闻综合案例" class="headerlink" title="新闻综合案例"></a>新闻综合案例</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;新闻案例&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        <span class="selector-tag">body</span> &#123;</span><br><span class="line">            <span class="attribute">font</span>: <span class="number">16px</span>/<span class="number">28px</span> <span class="string">&#x27;Microsotf yahei&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">h1</span> &#123;</span><br><span class="line">            <span class="comment">/* 文字不加粗 */</span></span><br><span class="line">            <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">            <span class="comment">/* h1文字水平居中对齐 */</span></span><br><span class="line">            <span class="attribute">text-align</span>: center;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">a</span> &#123;</span><br><span class="line">            <span class="attribute">text-decoration</span>: none;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.gray</span> &#123;</span><br><span class="line">            <span class="attribute">color</span>: <span class="number">#888</span>8;</span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">            <span class="attribute">text-align</span>: center;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="selector-class">.search</span> &#123;</span><br><span class="line">            <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">170px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.btn</span> &#123;</span><br><span class="line">            <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">p</span> &#123;</span><br><span class="line">            <span class="attribute">text-indent</span>: <span class="number">2em</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.pic</span> &#123;</span><br><span class="line">            <span class="comment">/* 想要图片居中对齐，一定要它的父亲p标签添加水平居中对齐 */</span></span><br><span class="line">            <span class="attribute">text-align</span>: center;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.footer</span> &#123;</span><br><span class="line">            <span class="attribute">color</span>: <span class="number">#888</span>;</span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;<span class="selector-tag">h1</span>&gt;北方高温明日达鼎盛,京津冀多地地表温度将超<span class="number">60</span>℃&lt;/<span class="selector-tag">h1</span>&gt;</span><br><span class="line">    &lt;div class=&quot;gray&quot;&gt;2019-07-03 16:31:47 来源:&lt;a href=&quot;#&quot;&gt;中国天气网&lt;/a&gt; </span><br><span class="line">        &lt;input type =&quot;text&quot; value=&quot;请输入查询条件...&quot; class=&quot;search&quot;&gt; &lt;button class=&quot;btn&quot;&gt;搜索&lt;/button&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line"></span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;中国天气网讯 今天（<span class="number">3</span>日），华北、黄淮多地出现高温天气，截至下午<span class="number">2</span>点，北京、天津、郑州等地气温突破<span class="number">35</span>℃。预报显示，今后三天（<span class="number">3</span>-<span class="number">5</span>日），这一带的高温天气将继续发酵，</span><br><span class="line">    &lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;<span class="selector-tag">h4</span>&gt;气温<span class="number">41.4</span>℃！地温<span class="number">66.5</span>！北京强势迎七月首个高温日。&lt;/<span class="selector-tag">h4</span>&gt;</span><br><span class="line">    &lt;p class=&quot;pic&quot;&gt;</span><br><span class="line">        &lt;img src=&quot;tqyb.jpg&quot;&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;今天，华北、黄淮一带的高温持续发酵，截至今天下午<span class="number">2</span>点，陕西北部、山西西南部、河北南部、北京、天津、山东西部、河南北部最高气温已普遍超过<span class="number">35</span>℃。大城市中，北京、天津、郑州均迎来高温日。&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;在阳光暴晒下，地表温度也逐渐走高。今天下午<span class="number">2</span>点，华北黄淮大部地区的地表温度都在<span class="number">50</span>℃以上，部分地区地表温度甚至超过<span class="number">60</span>℃。其中北京和石家庄的最高气温还有望创今年的新高。&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;<span class="selector-tag">h4</span>&gt;明日热度再升级！京津冀携手冲击<span class="number">38</span>℃+&lt;/<span class="selector-tag">h4</span>&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;中国天气网气象分析师王某介绍，明日，华北，黄淮地区高温天气继续升级。并……&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;不过，专家提醒，济南被雨水天气完美绕开，因此未来一周，当地高温还会天天上岗。</span><br><span class="line">        文/张慧 数据支持/王伟跃 胡啸 审核/刘文静 张方丽)&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;p class=&quot;footer&quot;&gt;本文来源:中国天气网 责任编辑:刘京_NO5631&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">html</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="chrome调试工具"><a href="#chrome调试工具" class="headerlink" title="chrome调试工具"></a>chrome调试工具</h3><p>打开调试工具：f12或右键检查</p><p>使用调试工具：</p><ol><li> ctrl+滚轮可以放大开发者工具代码大小</li><li> 左边是HTML元素结构，右边是CSS样式</li><li> 右边CSS样式可以改动数值（左右箭头或者直接 输入）和查看颜色</li><li> ctrl+0复原浏览器大小</li><li> 如果点击元素，发现右侧没有样式引入，极有可能是类名或者样式引入错误</li><li> 如果有样式，但是样式前面有黄色叹号提示，则是样式属性属性错误</li></ol><h2 id="Emmet语法"><a href="#Emmet语法" class="headerlink" title="Emmet语法"></a>Emmet语法</h2><p>它使用缩写，来提高编写html/css的编写速度，vscode内部 已经集成该语法。</p><ol><li> 快速生成HTML结构语法</li><li> 快速生成CSS样式语法</li></ol><h3 id="快速生成HTML结构语法"><a href="#快速生成HTML结构语法" class="headerlink" title="快速生成HTML结构语法"></a>快速生成HTML结构语法</h3><ol><li> 生成标签 直接输入标签名 按tab键即可 比如 div 按tab 就直接出现尖括号啦</li><li> 如果想要生成多个相同标签 加上* 即可 比如 div*3 就可以快速生成3个div</li><li> 如果有父子级关系的标签，可以用&gt; 比如 ul&gt;li 即可</li><li> 如果有兄弟关系的标签，用 + 即可 比如div+p</li><li> 如果有生成带有类名或者id名字的，直接写,demo或者#two tab键即可</li><li> 如果生成的div类名是有顺序的，可以用自增符号$</li><li> 如果想要在生成的标签 内部写内容可以用{}表示</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.nav</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.one</span></span><br><span class="line"><span class="selector-id">#banner</span></span><br><span class="line">.demo$*5</span><br><span class="line"><span class="selector-tag">div</span>&#123;我不喜欢这个世界&#125;*<span class="number">5</span></span><br><span class="line">div&#123;$&#125;*5</span><br></pre></td></tr></table></figure><p>回车会有奇迹发生</p><h4 id="快速生成CSS样式语法"><a href="#快速生成CSS样式语法" class="headerlink" title="快速生成CSS样式语法"></a>快速生成CSS样式语法</h4><p>css基本采取简写形式即可</p><ol><li> 比如 w200 按tab 可以生成 width: 200px;</li><li> eg: lh 26 按tab 可以生成 line-height: 26px;</li></ol><h4 id="快速格式化代码"><a href="#快速格式化代码" class="headerlink" title="快速格式化代码"></a>快速格式化代码</h4><p>右键，格式化代码</p><p>在首选项中搜索format 在自动格式化保存中勾选即可</p><h2 id="CSS复合选择器"><a href="#CSS复合选择器" class="headerlink" title="CSS复合选择器"></a>CSS复合选择器</h2><p>复合选择器是建立在基础选择器之上，对基本选择器进行组合形成的。</p><ul><li>  复合选择器可以更准确、高效的选择目标元素（标签）</li><li>  复合选择器是由两个或多个基础选择器，通过不同方式组合而成的。</li><li>  常用符合选择器包括：后代选择器、子选择器、并集选择器、伪类选择器等等</li></ul><h4 style="color: rgb(149, 128, 243);">后代选择器</h4><p>后代选择器又称为包含选择器，可以选择父元素里面的子元素。其写法就是把外层标签写在前面，内层标签洗澡后面，中间用空格分隔。当标签发生嵌套时，内层标签就称为外层标签的后代。</p><blockquote><p>  元素1 元素2 { 样式说明}</p></blockquote><p>上述语法表示选择元素1里面的所有元素2（后代元素）</p><ul><li><p>  元素1和元素2中间一定要用<code>空格隔开</code></p></li><li><p>  元素1是父级，元素2是子级，最终选择的是<code>元素2</code></p></li><li><p>  元素2可以是儿子，也可以是孙子，只要是元素1的后代即可</p></li><li><p>  元素1和元素2可以是任意的基础选择器</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>后代选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="comment">/* 把ol里面的li选出来改为pink */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">ol</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: pink;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">ol</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.nav</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: gold;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ol的孩子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ol的孩子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ol的孩子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>我是孙子<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ul的孩子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ul的孩子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ul的孩子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>不会变化的<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ul的孩子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ul的孩子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ul的孩子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>会变化的<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>会变化的<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>会变化的<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>会变化的<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 style="color: rgb(149, 128, 243);">子选择器</h4><p>子选择器只能选择作为某元素的最近一级子元素。</p><blockquote><p>  元素1 &gt; 元素2 {样式声明}</p></blockquote><p>上述语法表示选择元素1里面的所有直接后代（子元素）元素2</p><ul><li>  元素1和元素2中间用大于号隔开</li><li>  元素1是父级，元素2是子级，最终选择的是元素2</li><li>  元素2必须是元素1的亲儿子，其孙子，重孙指令不归它管辖。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>子元素选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.nav</span>&gt;<span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: red;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>我是儿子<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>我是孙子<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 style="color: rgb(149, 128, 243);">并集选择器</h4><p>并集选择器可以选择多组标签，同时为它们定义相同样式。通常用于集体声明</p><p>并集选择器是通过英文逗号<code>，</code>分割的，任何形式的选择器都可以成为并集选择器的一部分。</p><blockquote><p>  元素1,元素2 {样式声明}</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>并集选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        /* div,</span><br><span class="line"><span class="css">        <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: red;</span></span><br><span class="line">        &#125; */</span><br><span class="line"><span class="css">        <span class="selector-tag">div</span>,</span></span><br><span class="line"><span class="css">        <span class="selector-tag">p</span>,</span></span><br><span class="line"><span class="css">        <span class="selector-class">.pig</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: red;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/* 约定的语法规范，并集选择器喜欢竖着写 */</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>ws<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>xe<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>hh<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;pig&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>xzpx<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>zbb<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>zmm<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 style="color: rgb(149, 128, 243);">伪类选择器</h4><p>书写特点：用冒号表示。eg:hover,  :first-child</p><blockquote><p>  分类：链接伪类、结构伪类</p></blockquote><h5 id="链接伪类选择器"><a href="#链接伪类选择器" class="headerlink" title="链接伪类选择器"></a>链接伪类选择器</h5><blockquote><p>  a:link 选择所有未被访问的链接</p><p>  a:visited 选择所有已被访问的链接</p><p>  a:hover 选择鼠标指针位于其上的链接</p><p>  a:active 选择活动链接</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>伪类选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="comment">/* 未访问的链接 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: orange;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: skyblue;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: green;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>震惊！阿里高管性侵女员工<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.xxxxxx.com&quot;</span>&gt;</span>未知的网站<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p style="color: rgb(255, 0, 100); font-weight: bold;">链接伪类选择器注意事项</p><ol><li> 为确保生效，请按照LVHA的顺序声明：:link- :hover- :active-</li><li> 记忆法：love hate</li><li> 因为a链接在浏览器中具有默认样式，所以实际开发工作中都需要给链接单独指定样式</li></ol><p style="color: rgb(255, 0, 100); font-weight: bold;">链接伪类选择器在实际开发中的写法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="comment">/* 未访问的链接 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: gray;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: <span class="number">#369</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-decoration</span>: underline;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>震惊！阿里高管性侵女员工<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.xxxxxx.com&quot;</span>&gt;</span>未知的网站<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="focus伪类选择器"><a href="#focus伪类选择器" class="headerlink" title=":focus伪类选择器"></a>:focus伪类选择器</h5><p>作用：选取焦点的表单元素</p><p>焦点就是光标，一般情况input类表单元素才能获取，因此这个选择器也主要针对表单元素来说。</p><p>eg</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="comment">/* 把获得光标的表单元素选出来 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">84</span>, <span class="number">155</span>, <span class="number">173</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="复合选择器总结"><a href="#复合选择器总结" class="headerlink" title="复合选择器总结"></a>复合选择器总结</h5><table><thead><tr><th>选择器</th><th>作用</th><th>特征</th><th>使用情况</th><th>隔开符号及用法</th></tr></thead><tbody><tr><td>后代选择器</td><td>用来选择后代元素</td><td>可以是子孙后代</td><td>较多</td><td>符号是空格.nav a</td></tr><tr><td>子代选择器</td><td>选择最近一级元素</td><td>只选亲儿子</td><td>较少</td><td>符号是大于 .nav&gt;p</td></tr><tr><td>并集选择器</td><td>选择不同状态的链接</td><td>跟链接相关</td><td>较多</td><td>符号是逗号 .nav,.header</td></tr><tr><td>链接伪类选择器</td><td>选择 不同状态的链接</td><td>跟链接相关</td><td>较多</td><td>重点记住 a{}和 a:hover的写法</td></tr><tr><td>:focus选择器</td><td>选择获得光标的表单</td><td>跟表单相关</td><td>较少</td><td>记住input:foucs写法</td></tr></tbody></table><h2 id="CSS元素显示模式"><a href="#CSS元素显示模式" class="headerlink" title="CSS元素显示模式"></a>CSS元素显示模式</h2><p>更好的布局</p><h3 id="元素显示模式"><a href="#元素显示模式" class="headerlink" title="元素显示模式"></a>元素显示模式</h3><p>作用：网页的标签非常多，在不同地方会用到不用类型的标签，了解题目==他们的特点可以更好的布局我们的网页。</p><p>元素显示模式就是元素以什么方式进行显示，比如div自己独占一行，比如一行可以放多个span</p><p>HTML元素一般分为块元素和行内元素两种类型。</p><h5 id="块元素"><a href="#块元素" class="headerlink" title="块元素"></a>块元素</h5><p>常见：h1~h6，p，div，ul，ol，li’等，其中div标签是最大的块元素</p><p>块元素的特点：</p><ol><li> 比较霸道，自己独占一行</li><li> 高度，宽度，外边距已经内边距都可以控制</li><li> 宽度默认是容器（父级宽度）的100%</li><li> 是一个容器及盒子，里面可以放行内或者块级元素</li></ol><p>ps：</p><ul><li>  文字类的元素内不能使用块级元素</li><li>  p标签主要用于存放文字，因此p里面不能放块级元素，特别是不能放div</li><li>  h1~h6等都是块级 标签，里面额不能放其他块级元素</li></ul><h5 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h5><p>常见有：a、strong、b、em、i、del、s、ins、span，其中span标签是最典型的行内元素（内联元素）</p><p>行内元素特点：</p><ol><li> 相邻行内元素在一行上，一行可以显示多个。</li><li> 高、宽直接设置是无效的。</li><li> 默认宽度就是它本身内容的宽度。</li><li> 行内元素只能容纳文本或其他行内元素。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>hh<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>xl<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br></pre></td></tr></table></figure><p>显示：hhxl</p><p>ps：</p><ul><li>  链接里面不能再放链接</li><li>  特殊情况链接a里面可以放块级元素，但是a转换一下块级模式最安全</li></ul><h5 id="行内块元素"><a href="#行内块元素" class="headerlink" title="行内块元素"></a>行内块元素</h5><p>在行内元素中有几个特殊的标签，img，input，td，它们同时具有块元素和行内元素的特点。有些资料称它们为行内块元。</p><p>行内块元素的特点：</p><ol><li> 和相邻行内元素（行内块元素）在一行上，但是它们之间会有空白缝隙，一行可以显示多个（行内元素特点）</li><li> 默认宽度就是它本身内容的宽度（行内元素特点）</li><li> 高度、行高、外边距以及内边距都可以控制（块级元素特点）</li></ol><h5 id="显示模式总结"><a href="#显示模式总结" class="headerlink" title="显示模式总结"></a>显示模式总结</h5><table><thead><tr><th>块级元素</th><th>元素排列</th><th>设置样式</th><th>默认宽度</th><th>包含</th></tr></thead><tbody><tr><td>块级元素</td><td>一行只能放一个块级元素</td><td>可以设置宽度和高度</td><td>容器的100%</td><td>容器级可以包含任何标签</td></tr><tr><td>行内元素</td><td>一行可以放多个行内元素</td><td>不可以直接设置宽度</td><td>它本身内容的宽度</td><td>容纳文本或其他行内元素</td></tr><tr><td>行内块元素</td><td>一行放多个行内块元素</td><td>可以设置宽度和高度</td><td>它本身内容的宽度</td><td></td></tr></tbody></table><h5 id="元素显示模式转换"><a href="#元素显示模式转换" class="headerlink" title="元素显示模式转换"></a>元素显示模式转换</h5><p>特殊情况下，我们需要元素模式的转换，eg：增加连接a的触发范围</p><ul><li>  转化为块元素： display:block;</li><li>  转化为行内元素： display:inline;</li><li>  转化为块元素： display:inline-block;</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 把行内元素a转换为块内元素 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: block;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">172</span>, <span class="number">222</span>, <span class="number">255</span>);</span></span><br><span class="line"><span class="css">            <span class="comment">/* 把div块级元素转换为行内元素 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: inline;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>金星阿姨<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是块级元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>行内元转换为行内块元素<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实用小工具 snipaste</p><p>快捷方式：</p><ol><li> F1可以截图，同时测量大小</li><li> F3在桌面置顶显示</li><li> 点击图片，alt可以取色（shift切换取色模式）qq截图的话，ctrl可以取色</li><li> 按时esc取消图片显示</li></ol><h5 id="综合案例-小米侧边栏"><a href="#综合案例-小米侧边栏" class="headerlink" title="综合案例-小米侧边栏"></a>综合案例-小米侧边栏</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>小米侧边栏<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#535758</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">255px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">48px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-indent</span>: <span class="number">2em</span>;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 让行高等于盒子的高度，就能实现文字垂直居中 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">48px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#FF6701</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>手机 电话卡<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>电视 盒子<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>笔记本 平板<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>出行 穿戴<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>智能 路由器<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>健康 儿童<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>耳机 音响<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当行文字垂直居中原理：</p><p>简单理解：行高的上空隙和下空隙把文字挤到中间了，如果行高小于盒子高度，文字会偏上，如果行高大于盒子高度，文字偏下</p><h2 id="CSS背景"><a href="#CSS背景" class="headerlink" title="CSS背景"></a>CSS背景</h2><p>通过CSS背景属性，可以给页面元素添加背景样式</p><p>背景属性可以设置背景颜色，背景图片，背景平铺，背景图片位置、背景图像固定等</p><h4 id="背景图片"><a href="#背景图片" class="headerlink" title="背景图片"></a>背景图片</h4><p>background-img属性描述了元素的背景图像。实际开发常见于logo或者一些小装饰性的小图片或者是超大的背景图片，优点是非常便于控制位置（精灵图也是一种运用场景）</p><p>语法：</p><blockquote><p>  background-imge : none | url (url)c</p></blockquote><table><thead><tr><th>参数值</th><th>作用</th></tr></thead><tbody><tr><td>none</td><td>无背景图（默认的）</td></tr><tr><td>url</td><td>使用绝对或相对地址指定背景图像</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 一定要写url */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">images/hh.jpg</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="背景平铺"><a href="#背景平铺" class="headerlink" title="背景平铺"></a>背景平铺</h4><p>background-repeat属性</p><blockquote><p>  background-repeat: repeat | no-repeat | repeat-x | repeat-y</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">1000px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">1000px</span>;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 一定要写url */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">images/hh.jpg</span>);</span></span><br><span class="line"><span class="css">            <span class="comment">/* background-repeat: no-repeat; */</span></span></span><br><span class="line"><span class="css">            <span class="comment">/* 默认情况下背景图片是平铺的 */</span></span></span><br><span class="line"><span class="css">            <span class="comment">/* 将图片设置为沿水平方向平铺 */</span></span></span><br><span class="line"><span class="css">            <span class="comment">/* background-repeat: repeat-x; */</span></span></span><br><span class="line"><span class="css">            <span class="comment">/* 将图片设置为沿竖直方向平铺 */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">background-repeat</span>: repeat-y;</span></span><br><span class="line"><span class="css">            <span class="comment">/* 页面元素既可以添加背景图片也可以添加背景颜色，只不过背景图片会压住背景颜色 */</span></span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="背景图片的位置"><a href="#背景图片的位置" class="headerlink" title="背景图片的位置"></a>背景图片的位置</h4><p>利用background-position属性可以改变图片在背景中的位置。</p><blockquote><p>  background-position: x y;</p></blockquote><p>可以使用方位名词或者精确单位。</p><table><thead><tr><th>参数值</th><th>说明</th></tr></thead><tbody><tr><td>length</td><td>百分数|由浮点数字和单位标识符组成的长度值</td></tr><tr><td>position</td><td>top|center|bottom|left|center|right 方位名词</td></tr></tbody></table><p>1.参数是方位名词</p><ul><li>  如果指定两个值都是方位名词，则两个值前后顺序无关，比如 left top和top left效果一致</li><li>  如果只指定了一个方位名词，另一个值省略，则第二个值默认居中对齐</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">h3</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">118px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="css">            <span class="comment">/* background-color: pink; */</span></span></span><br><span class="line"><span class="css">            <span class="attribute">font-weight</span>: <span class="number">400</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">line-height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">images/icon.png</span>);</span></span><br><span class="line"><span class="css">            <span class="attribute">background-repeat</span>: no-repeat;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-position</span>: left center;</span></span><br><span class="line"><span class="css">            <span class="attribute">text-indent</span>: <span class="number">3em</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span></span><br><span class="line">        成长守护平台</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>王者荣耀背景案例</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    &lt;title&gt;超大背景图片&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        <span class="selector-tag">body</span> &#123;</span><br><span class="line">            <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">https://ossweb-img.qq.com/upload/webplat/info/yxzj/20210811/27677365680884.jpg</span>);</span><br><span class="line">            <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">            <span class="attribute">background-position</span>: center top;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure><p>2.参数是精确单位</p><ul><li>  第一个坐标是x坐标，第二个是y坐标</li><li>  如果只有一个参数，另一个参数默认垂直居中</li></ul><p>3.参数是混合单位</p><ul><li>  如果指定的两个值是精确单位和方位名词混用，则第一个值是x坐标，第二个值是y坐标</li></ul><h4 id="背景固定"><a href="#背景固定" class="headerlink" title="背景固定"></a>背景固定</h4><p>background-attachment属性设置背景图像是否固定或者随着页面的其余部分滚动。</p><p>可以在后期制作视差滚动效果。</p><p>语法：</p><blockquote><p>  background-attachemnt : scroll | fixed</p></blockquote><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>scroll</td><td>背景图像是随对象内容滚动的</td></tr><tr><td>fixed</td><td>背景图像固定</td></tr></tbody></table><p>eg：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">https://ossweb-img.qq.com/upload/webplat/info/yxzj/20210811/27677365680884.jpg</span>);</span><br><span class="line">        <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">        <span class="attribute">background-position</span>: center <span class="number">40px</span>;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">        <span class="attribute">background-attachment</span>: fixed;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="背景的符合写法"><a href="#背景的符合写法" class="headerlink" title="背景的符合写法"></a>背景的符合写法</h4><p>为了节约代码量，我们可以将这些属性合并简写在同一个属性background中。</p><p>没有特定书写顺序，一般习惯约定顺序为：</p><p><code>background: 背景颜色 背景图片地址 背景平铺  背景图片滚动 背景图片位置</code></p><p>注意：中间用空格隔开</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">        <span class="selector-tag">body</span> &#123;</span><br><span class="line">            <span class="attribute">background</span>: black <span class="built_in">url</span>(<span class="string">images/bg.jpg</span>) no-repeat fixed center top;</span><br><span class="line">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;闲坐看云，静听流水&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;闲坐看云，静听流水&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;闲坐看云，静听流水&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;闲坐看云，静听流水&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;闲坐看云，静听流水&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;闲坐看云，静听流水&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;闲坐看云，静听流水&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;闲坐看云，静听流水&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;闲坐看云，静听流水&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;闲坐看云，静听流水&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;闲坐看云，静听流水&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;闲坐看云，静听流水&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;闲坐看云，静听流水&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;闲坐看云，静听流水&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;闲坐看云，静听流水&lt;/<span class="selector-tag">p</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="背景颜色半透明"><a href="#背景颜色半透明" class="headerlink" title="背景颜色半透明"></a>背景颜色半透明</h4><p>语法：</p><p>background: rbga(0,0,0,0.3)；</p><p>最后一个参数是alpha透明度，取值范围在0~1之间</p><p>可以缩写0.3为 .3</p><p>background: rbga(0,0,0,.3)；</p><h4 id="背景总结"><a href="#背景总结" class="headerlink" title="背景总结"></a>背景总结</h4><table><thead><tr><th>属性</th><th>作用</th><th>值</th></tr></thead><tbody><tr><td>background-color</td><td>背景颜色</td><td>预定义的颜色值/十六进制/RGB代码</td></tr><tr><td>background-image</td><td>背景图片</td><td>url(图片路径)</td></tr><tr><td>background-repeat</td><td>背景平铺</td><td>repeat/no-repeat/repeat-x/repeat-y</td></tr><tr><td>background-position</td><td>背景位置</td><td>length/position 分别是x和y的值</td></tr><tr><td>background-attachment</td><td>背景附着</td><td>scroll(背景滚动)/fixed(背景固定)</td></tr><tr><td>背景简写</td><td>书写方便</td><td>背景颜色 背景图片地址 背景平铺 背景滚动 背景位置;</td></tr><tr><td>背景色半透明</td><td>背景颜色半透明</td><td>background: rgba(0,0,0,.3) 四个值缺一不可</td></tr></tbody></table><h4 id="五彩导航案例"><a href="#五彩导航案例" class="headerlink" title="五彩导航案例"></a>五彩导航案例</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE <span class="selector-tag">html</span>&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;五彩导航栏&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        <span class="selector-class">.nav</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">            <span class="attribute">display</span>: inline-block;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">58px</span>;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">120px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: pink;</span><br><span class="line">            <span class="attribute">line-height</span>: <span class="number">48px</span>;</span><br><span class="line">            <span class="attribute">text-decoration</span>: none;</span><br><span class="line">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">            <span class="attribute">text-align</span>: center;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.nav</span> <span class="selector-class">.bg1</span> &#123;</span><br><span class="line">            <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">images/bg1.png</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.nav</span> <span class="selector-class">.bg2</span> &#123;</span><br><span class="line">            <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">images/bg2.png</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.nav</span> <span class="selector-class">.bg3</span> &#123;</span><br><span class="line">            <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">images/bg3.jpg</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.nav</span> <span class="selector-class">.bg4</span> &#123;</span><br><span class="line">            <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">images/bg4.png</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.nav</span> <span class="selector-class">.bg5</span> &#123;</span><br><span class="line">            <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">images/bg5.png</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.nav</span> <span class="selector-class">.bg1</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">            <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">images/bg2.png</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.nav</span> <span class="selector-class">.bg2</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">            <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">images/bg3.jpg</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.nav</span> <span class="selector-class">.bg3</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">            <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">images/bg4.png</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.nav</span> <span class="selector-class">.bg4</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">            <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">images/bg5.png</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.nav</span> <span class="selector-class">.bg5</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">            <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">images/bg1.png</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;div class=&quot;nav&quot;&gt;</span><br><span class="line">        &lt;a href=&quot;#&quot; class=&quot;bg1&quot;&gt;五彩导航&lt;/a&gt;</span><br><span class="line">        &lt;a href=&quot;#&quot; class=&quot;bg2&quot;&gt;五彩导航&lt;/a&gt;</span><br><span class="line">        &lt;a href=&quot;#&quot; class=&quot;bg3&quot;&gt;五彩导航&lt;/a&gt;</span><br><span class="line">        &lt;a href=&quot;#&quot; class=&quot;bg4&quot;&gt;五彩导航&lt;/a&gt;</span><br><span class="line">        &lt;a href=&quot;#&quot; class=&quot;bg5&quot;&gt;五彩导航&lt;/a&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/<span class="selector-tag">html</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="CSS三大特性"><a href="#CSS三大特性" class="headerlink" title="CSS三大特性"></a>CSS三大特性</h2><p>分别是：层叠性、继承性、优先级</p><h3 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h3><p> 相同选择器给设置相同的样式，此时一个样式就会覆盖（层叠）另一个冲突的样式。层叠性主要解决样式冲突的问题。</p><p>样式冲突，就近原则</p><h3 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h3><p>CSS中 的继承：子标签会继承父标签的某些样式，如文本颜色和字号。</p><p>恰当地使用继承可以简化代码，降低CSS样式的复杂性。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line"><span class="attribute">font</span>: <span class="number">12px</span>/<span class="number">1.5</span> Microsoft YaHei;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>  行高可以跟单位也可以不跟单位</li><li>  如果子元素没有设置行高，则会继承父元素的行高为1.5</li><li>  此时子元素的行高是：当前子元素文字大小*15</li><li>  body行高1.5 这样写法最大的优势就是里面子元素可以根据自己文字大小自动调整行高</li></ul><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p>当同一个元素指定多个选择器，就会有优先级的产生。</p><ul><li>  选择器相同，则执行层叠性</li><li>  选择器不同，则根据选择器权重执行</li></ul><p>选择器权重如下表示</p><table><thead><tr><th>选择器</th><th>选择器权重</th></tr></thead><tbody><tr><td>继承或者*</td><td>0,0,0,0</td></tr><tr><td>元素选择器</td><td>0,0,0,1</td></tr><tr><td>类选择器，伪类选择器</td><td>0,0,10</td></tr><tr><td>ID选择器</td><td>0,1,0,0</td></tr><tr><td>行内样式 style=””</td><td>1,0,0,0</td></tr><tr><td>!important 重要的</td><td>=无穷大</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 🌠html🍀 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL</title>
      <link href="2021/07/10/STL/"/>
      <url>2021/07/10/STL/</url>
      
        <content type="html"><![CDATA[<h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><p>STL中二分查找函数：</p><ul><li><p>  lower_bound</p></li><li><p>  upper_bound</p></li><li><p>binary_search</p><p>  均运用于有序区间（二分法查找的前提）</p></li></ul><p>lower_bound返回第一个查找的元素位置</p><p>upper_bound返回最后一个查找到的元素的下一个位置</p><p>如果待查找的value不存在，两者均返回假设这样的元素存在时应该出现的位置。</p><p>binary_search查找到返回true，不存在返回false</p><p><strong>需要包含头文件algorithm</strong></p><p>eg：</p><p>1 2 2 3 4 4 4 4 5 6 7 9 9 10</p><p>first                                    last</p><p>lower_bound(first,last,4)—&gt;返回3</p><p>upper_bound(first,last,4)—&gt;返回8</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="Home-W的猜数字游戏"><a href="#Home-W的猜数字游戏" class="headerlink" title="Home_ _W的猜数字游戏"></a>Home_ _W的猜数字游戏</h2><h3 id="Problem-Description："><a href="#Problem-Description：" class="headerlink" title="Problem Description："></a>Problem Description：</h3><p>Home. W有n个数字组成的数列,且后一个数字严格大于前一 个( a[i+1]&gt;a[i])</p><p>V. _Dragon进行Q次猜数,每次他都猜一个x ,若这个x在数列中, V_Dragon的得分加上这个数的大小(注:被猜中的数不会从数列消失)如:数列12345 6V_Dragon猜5次,分别为1 13 5 7那V_Dragon的得分为1+1+3+5=10</p><p>现在请你告诉V. _Dragon他的得分为多少</p><h4 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h4><p>第一行输入一个T (0&lt;T&lt;=100)</p><p>接下来T组测试数据</p><p>每组第一行两个数n,q(1&lt;=n,q&lt;1000000</p><p>接下来-行n个数a1,a2..an(1&lt;=a1&lt;=10^9)</p><p>再接下来- -行9个数b1.b2… bq (1&lt;=b[i]&lt;=10^9)表示猜的数字</p><h4 id="output"><a href="#output" class="headerlink" title="output"></a>output</h4><p>输出Home_W的得分</p><h4 id="SampleInput"><a href="#SampleInput" class="headerlink" title="SampleInput"></a>SampleInput</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">6 5</span><br><span class="line">1 2 3 4 5 6</span><br><span class="line">1 1 3 5 7</span><br></pre></td></tr></table></figure><h4 id="SampleOutput"><a href="#SampleOutput" class="headerlink" title="SampleOutput"></a>SampleOutput</h4><p>10</p><p>参考代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> t,n,m,p[<span class="number">1000005</span>],q[<span class="number">1000005</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> i,sum;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--)</span><br><span class="line">&#123;</span><br><span class="line">sum=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(p,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(p));</span><br><span class="line"><span class="built_in">memset</span>(p,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(q));</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)<span class="comment">//数组下标从1开始避免数组越界的情况</span></span><br><span class="line">cin&gt;&gt;p[i];</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">cin&gt;&gt;q[i];</span><br><span class="line"><span class="keyword">if</span>(q[i]==p[<span class="built_in">lower_bound</span>(p+<span class="number">1</span>,p+n+<span class="number">1</span>,q[i])-p]) sum+=q[i];<span class="comment">//因为测试数据庞大，如果按照普通写法运行会超时</span></span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="简单的询问"><a href="#简单的询问" class="headerlink" title="简单的询问"></a>简单的询问</h2><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><p>这天，A君刚打完周赛。由于打得不错，他趟在椅子上悠闲的把玩这一一个长度为n的数列C . 丝毫没有刷题的意思。这时候,集训队队长B君看不下去了。他拿起A君的数列说。我有m个询问，每个询问我会说出一个整数x ， 而你需要回答整數x在数列C里面出现的次数。A君一下子僧了，他越来越院，机智的你能帮一下A君么 ?</p><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><p>本题为单组数据评测。</p><p>第一行两个整数n ,m. n表示数列C的长度, m表示B君的询问个数( 1&lt;=n, m&lt;=100000 )</p><p>第二行为n个空格隔开的整数c; ,表示C数列。( -10^9≤ Ci ≤10^9 )</p><p>第三行到第m+2行,每行个整数x, 表示B君的询问。( -10^9≤ x ≤10^9 )</p><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p>共m行,每行一个整数y ,表示整数x在数列C里面出现的次数。</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">5 3</span><br><span class="line">9 6 3 3 2</span><br><span class="line">1</span><br><span class="line">3</span><br><span class="line">9</span><br></pre></td></tr></table></figure><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">2</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h4 id="参考代码："><a href="#参考代码：" class="headerlink" title="参考代码："></a>参考代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> n,m,q,i;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[<span class="number">100005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;q;</span><br><span class="line"><span class="keyword">int</span> count=<span class="built_in">upper_bound</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>,q)-<span class="built_in">lower_bound</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>,q);<span class="comment">//写个草稿很好理解</span></span><br><span class="line">cout&lt;&lt;count&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学建模</title>
      <link href="2021/05/23/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"/>
      <url>2021/05/23/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="数学建模"><a href="#数学建模" class="headerlink" title="数学建模"></a>数学建模</h1><h2 id="层次分析模型"><a href="#层次分析模型" class="headerlink" title="层次分析模型"></a>层次分析模型</h2><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/image-20210523001416606.png" alt="image-20210523001416606"></p><p>ps：这里的重要性有时候解释为满意度更方便理解</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/image-20210523001732442.png" alt="image-20210523001732442"></p><p>总结：5×5方阵，记为A，对应元素为aij.</p><ol><li> aij表示：与指标j相比，i的重要程度。‘’。</li><li> 当i=j时，两个指标相同，因此同等重要记为1，解释了主对角线元素为1.</li><li> aij&gt;0且满足aij×aji=1（满足这一条件的矩阵称为<strong>正互反矩阵</strong>）</li></ol><p>实际上，这个矩阵就是层次分析法中的==判断矩阵==。</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/image-20210523003008345.png" alt="image-20210523003008345"></p><h3 id="一致矩阵"><a href="#一致矩阵" class="headerlink" title="一致矩阵"></a>一致矩阵</h3><p>若正互反矩阵满足aij×ajk=aik，则称为<strong>一致矩阵</strong>。</p><p>可通过看矩阵各行各列是否成比例来快速判断。</p><p>ps：在使用判断矩阵求权重之前，必须对其进行一致性检验。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git的基本使用</title>
      <link href="2021/05/09/git%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>2021/05/09/git%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Git的基本使用"><a href="#Git的基本使用" class="headerlink" title="Git的基本使用"></a>Git的基本使用</h1><p>学习git之前，我们需要了解一个非常重要的概念：==<strong>版本控制</strong>==</p><h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><blockquote><p>  什么是版本控制 版本迭代 版本管理器</p></blockquote><p>版本控制（Revision control）是一种在开发过程中用于管理我们对文件、目录或工程等内容的修改历史，方便查看更改历史记录，备份以便回复以前的版本的软件工程技术。</p><ul><li>  实现跨区域多人协同开发</li><li>  追踪和记载一个或多个文件的历史记录</li><li>  组织和保护你的源代码和文档</li><li>  统计工作量</li><li>  并行开发，提高开发效率</li><li>  跟踪记录整个软件的开发过程</li><li>  减轻开发人员负担，节省时间，同时降低人为错误</li></ul><p>简单地说，就是用于管理多人协同开发项目的技术。</p><p>多人开发必须使用版本控制，否则代价比较大！！！</p><blockquote><p>  常见的版本控制工具</p></blockquote><p>主流的版本控制器有：</p><ul><li>  Git</li><li>  SVN(Subversion)</li><li>  CVS(Concurrent Versions System)</li><li>  VSS(Micorosoft Visual SourceSafe)</li><li>  TFS(Team Foundation Sever)</li><li>  Visual Studio Online</li></ul><p>版本控制产品非常的多，现在影响力做大且广泛的是Git</p><blockquote><p>  版本控制分类：</p></blockquote><p><strong>1.本地版本控制</strong></p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/image-20210509222158122.png" alt="image-20210509222158122"></p><p>记录文件每次的更新，可以对每个版本做一个快照，或是记录补丁文件，适合个人用，如RCS。</p><p><strong>2.集中版本控制</strong></p><p>所有的版本数据都保存在服务器上，协同开发者从服务器上同步更新或上传自己的修改。</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/image-20210509222546125.png" alt="image-20210509222546125"></p><p>所有的版本数据都存在服务器上，用户的本地只有自己以前所同步的版本，如果不连接网络，用户就看不到历史版本，也无法切换版本验证问题，或在不同分支工作。而且，所有数据都 保存在单一服务器上，有很大风险这个服务器会崩溃造成数据的丢失。当然可以定期备份。代表产品：SVN、CVS、VSS。</p><p><strong>3.分布式版本控制  Git</strong></p><p>所有的版本信息仓库全部同步到本地的每个用户，这样就可以在本地查看所有版本历史，可以离线在本地提交，只需在连接网络时push到相应的服务器或其他用户那里。由于每个用户那里保存的都是所有的版本数据，主要有一个用户的设备没有问题就可以恢复所有数据，但这增加了本地存储空间的占用。</p><p>（每个人都拥有全部代码！安全隐患）</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/image-20210509235617504.png" alt="image-20210509235617504"></p><p><strong>git是目前世界上最先进的分布式版本控制系统</strong></p><h2 id="git历-史"><a href="#git历-史" class="headerlink" title="git历 史"></a>git历 史</h2><h2 id="Git环境配置"><a href="#Git环境配置" class="headerlink" title="Git环境配置"></a>Git环境配置</h2><p> 下载慢，怎么办？</p><p>去找国内镜像网站</p><p>如淘宝：<a href="https://github.com/git-for-windows/git/releases/">https://github.com/git-for-windows/git/releases/</a></p><p>清华大学镜像网站</p><p>如何卸载？</p><p>先清除环境变量，再卸载。环境变量只是为了全局使用而已。</p><blockquote><p>  启动git</p></blockquote><p>Git Bash：Unix与Linux风格的命令行，使用最多，推荐最多。</p><p>Git CMD：Windows风格的命令行</p><p>Git GUI：图形界面的Git，不建议初学者使用，尽量先熟悉常用命令</p><blockquote><p>  基本的Linux命令学习</p></blockquote><ul><li>  cd：改变目录</li><li>   cd .. 回退上一级目录</li><li>  pwd：显示当时所在目录的路径</li><li>  ls(ll)：都是列出当前目录中的所有文件，只不过ll列出的内容更加详细</li><li>  touch：新建一个文件，rm index.js 就很吧 index.js文件删除</li><li>  mkdir：新建一个目录，就是新建一个文件夹。eg：mkdir test</li><li>  rm -r ：删除文件夹，eg：rm -f test</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf &#x2F; #切勿在Linx中尝试！删除电脑中的全部文件</span><br></pre></td></tr></table></figure><ul><li><p>  mv 移动文件 mv index.html src index.html 是我们要移动的文件，src是目标文件夹，必须保证文件和目标文件夹在同一目录下</p></li><li><p>  reset 重新初始化终端/清屏</p></li><li><p>  clear：清屏</p></li><li><p>  history 查看历史命令</p></li><li><p>  help 帮助</p></li><li><p>  exit 退出</p></li><li><p>  #“  注释</p></li></ul><blockquote><p>  Git配置</p></blockquote><p>所有的配置文件都保存在本地。</p><p>查看配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config -l</span><br></pre></td></tr></table></figure><p>查看不同级别的配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#查看系统config</span><br><span class="line">git config --system --list</span><br><span class="line">#查看当前用户（global）配置</span><br><span class="line">git config --global --list</span><br></pre></td></tr></table></figure><p>Git相关的配置文件：</p><ul><li>  D:\Git\etc\gitconfig:Git安装目录下的gitconfig –system系统级</li><li>  C:\Users\lenovo\ .gitconfig 只适用于当前登录用户的配置 –global</li></ul><p>可以直接编辑配置文件，通过命令设置后会响应到这里。</p><blockquote><p>  设置用户名和邮箱（用户标识，必要）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;你的名字&quot; #名称</span><br><span class="line">git config --global user.email &quot;你的邮箱&quot; #邮箱</span><br></pre></td></tr></table></figure><h2 id="Git基本理论（核心）"><a href="#Git基本理论（核心）" class="headerlink" title="Git基本理论（核心）"></a>Git基本理论（核心）</h2><blockquote><p>  工作区域</p></blockquote><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/image-20210511220058567.png" alt="image-20210511220058567"></p><ul><li>  Workspace：工作区，就是平时存放项目代码的地方</li><li>  Index/Stage：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息。</li><li>  Respository：仓库区（本地仓库），就是安全存放数据的位置，这里有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本。</li><li>  Remote:远程仓库，托管代码的服务器，可以简单地认为是</li></ul><p>.git 文件要先git init才有，而且这个是隐藏文件夹</p><blockquote><p>  工作流程</p></blockquote><ol><li> 在工作目录中添加、修改文件</li><li> 将需要进行版本管理的文件放入暂存区域</li><li> 将暂存区域的文件提交到git仓库。</li></ol><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/image-20210511222035462.png" alt="image-20210511222035462"></p><h2 id="Git项目搭建"><a href="#Git项目搭建" class="headerlink" title="Git项目搭建"></a>Git项目搭建</h2><blockquote><p>  创建工作目录与常用指令</p></blockquote><p>工作目录（WorkSpace）一般是你希望Git帮助你管理的文件夹。可以是你的项目目录，也可以是空文件夹，建议不要有中文。</p><p>常用6指令：</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/image-20210513205020549.png" alt="image-20210513205020549"></p><blockquote><p>  本地仓库搭建</p></blockquote><p>创建本地仓库的方法有两种：</p><p>1、创建全新的仓库，需要用Git管理的项目的根目录执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#在当前目录新建一个Git代码库</span><br><span class="line">$ git init</span><br></pre></td></tr></table></figure><p>2、执行后可以看到，仅仅在项目目录多出来一个.git目录，关于版本等所有信息都在此目录中。</p><blockquote><p>  克隆远程仓库</p></blockquote><p>1.一种方式是克隆远程目录，是将远程服务器上的仓库完全镜像一份至本地！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#克隆一个项目和它的整个历史（版本信息）</span><br><span class="line">$ git clone [url]</span><br></pre></td></tr></table></figure><p>2.去gitee或github上克隆测试。</p><h2 id="Git文件操作"><a href="#Git文件操作" class="headerlink" title="Git文件操作"></a>Git文件操作</h2><blockquote><p>  查看文件状态</p></blockquote><p>文件四种状态：untracked，unmodify，modifie，staged</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#查看指定文件状态</span><br><span class="line">git status [filename]</span><br><span class="line"></span><br><span class="line">#查看所有文件状态</span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line">git add .   #添加所有文件到暂存区</span><br><span class="line">git commit -m &quot;消息内容&quot;  #提交暂存区中的内容到本地仓库 -m 提交信息</span><br></pre></td></tr></table></figure><blockquote><p>  忽略文件</p></blockquote><p>有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等</p><p>在主目录下建立”.gitignore”文件，规则如下：</p><ol><li> 忽略文件中的空行或以#开始的行将会被忽略</li><li> 可以使用Linux通配符。*代表任意多个字符，？代表一个字符，[]代表可选字符范围，{}表示可选的字符串。</li><li> 如果名称最前面有！，表示例外规则，将不会被忽略。</li><li> 如果名称最前面/，表示忽略此文件在此目录下，而子目录下的文件不忽略。</li><li> 如果名称最后面/,表示要忽略此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#为注释</span><br><span class="line">*.txt      #忽略所有，.txt结尾的文件，这样的话上传就不会被选中</span><br><span class="line">！lib.txt  #但lib.txt除外</span><br><span class="line">&#x2F;temp      #仅忽略项目根目录下的temp文件，不包括其他目录temp</span><br><span class="line">build&#x2F;     #忽略build&#x2F;目录下所有文件</span><br><span class="line">doc&#x2F;*.txt  #会忽略 doc&#x2F;notes.txt 但不包括doc&#x2F;server&#x2F;arch.txt</span><br></pre></td></tr></table></figure><h2 id="使用码云"><a href="#使用码云" class="headerlink" title="使用码云"></a>使用码云</h2><ol><li> 注册登录码云，完善个人信息</li><li> 设置本机绑定SSH公钥，实现免密登录。</li><li> 将公钥信息public key添加到码云账号中即可。</li><li> 使用码云建立一个自己的仓库。</li></ol><h2 id="IDEA中集成Git"><a href="#IDEA中集成Git" class="headerlink" title="IDEA中集成Git"></a>IDEA中集成Git</h2>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库系统概论高级</title>
      <link href="2021/05/06/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA%E9%AB%98%E7%BA%A7/"/>
      <url>2021/05/06/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA%E9%AB%98%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="为什么要学数据库理论？"><a href="#为什么要学数据库理论？" class="headerlink" title="为什么要学数据库理论？"></a>为什么要学数据库理论？</h1><h2 id="关系模式存在的问题"><a href="#关系模式存在的问题" class="headerlink" title="关系模式存在的问题"></a>关系模式存在的问题</h2><p>1.数据冗余度太大，浪费存储空间</p><p>2.更新异常</p><p>3.插入异常</p><p>4.删除异常</p><p>好的模式？</p><p>不会发生插入异常，删除异常，更新异常、数据冗余应尽量少。</p><p>问题原因：</p><p>由于模式中的某些数据依赖引起的。</p><p>解决方法：</p><p>用规范化理论改造关系模式，消除其中不合适的数据依赖。</p><p>什么是数据依赖？</p><p>eg：</p><p>STUDENT(Sno,Sdept,Mname,Cno,Grade)</p><p>该关系模式的属性集合记为U：</p><p>U={Sno，Sdept，Mname,Cno,Grade}</p><ul><li>  数学中的函数y=f(x),自变量x确定以后，相应的y也唯一确定</li><li>  Sdept=f(Sno),Sno函数确定Sdept，记为Sno-&gt;Sdept</li><li>  Mname=f(Sdept),Sdept函数确定Mname，记为Sdept-&gt;Mname</li><li>  Grade=f((Sno,Cno))，(Sno,Cno)函数确定Grade，记为</li></ul><p>属性组U上的函数依赖集合，记为F：</p><p>F={Sno-&gt;Sdept,Sdept-&gt;Mname,(Sno,Cno)-&gt;Grade}</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/JXP%7DH3%60B08CUXLS@G8%7D61LK.png" alt="img"></p><h2 id="数据依赖"><a href="#数据依赖" class="headerlink" title="数据依赖"></a>数据依赖</h2><p>1.完整性约束的一种表现形式</p><ul><li>  限定属性取值范围：例如学生的成绩必须在0-100之间</li><li>  定义属性值间的相互关联（主要体现值的相等与否），即通过属性间值的相等与否来描述</li><li>  它是数据库式设计的关键</li></ul><p>2.数据依赖</p><ul><li>  是通过一个关系中属性间值的相等与否体现出来的数据间的相互关系</li><li>  是实现世界属性间相互联系的抽象</li><li>  是数据内在的性质</li><li>  是语义的体现</li></ul><p>3.数据依赖的主要类型</p><ul><li>  函数依赖（Functional Dependency），简记为FD</li><li>  多值依赖（Mutivalued Dependency），简记为MVD</li><li>  连接依赖</li><li>  ……</li></ul><p>4.数据依赖对关系模式的影响</p><ul><li>  不合适的数据依赖，造成插入异常、删除异常、更新异常和数据冗余问题</li></ul><h2 id="关系模式简化表示"><a href="#关系模式简化表示" class="headerlink" title="关系模式简化表示"></a>关系模式简化表示</h2><p>1.关系模式的形式化定义</p><p><strong>R(U,D,DOM,F)</strong></p><ul><li>  R:关系名，是符号化的元组语义</li><li>  U:该关系的属性集合</li><li>  D:属性组U中属性所来自的域</li><li>  DOM:属性向域的映像集合</li><li>  F:属性间数据的依赖关系集合</li></ul><p>2.关系模式的简化表示</p><p>R&lt;U,F&gt;</p><p>将关系模式简化为一个三元组，影响数据库模式设计的主要是U和F</p><p>当且仅当U上的一个关系r满足F时，r称为关系模式R(U,F)的一个关系</p><h1 id="规范化"><a href="#规范化" class="headerlink" title="规范化"></a>规范化</h1><h2 id="函数依赖"><a href="#函数依赖" class="headerlink" title="函数依赖"></a>函数依赖</h2><h3 id="函数依赖-1"><a href="#函数依赖-1" class="headerlink" title="函数依赖"></a>函数依赖</h3><p>X函数确定Y或Y函数依赖于X，记作X-&gt;Y.</p><p>X称为这个函数依赖的决定属性组，也称为<strong>决定因素</strong>。</p><p>函数依赖是指关系模式R在任何时刻的关系实例均要满足的约束条件。</p><p>不是指某个或某些关系实例r满足的约束条件，而是指R的所有关系实例r均要满足约束条件。</p><h3 id="平凡函数依赖与非平凡函数依赖"><a href="#平凡函数依赖与非平凡函数依赖" class="headerlink" title="平凡函数依赖与非平凡函数依赖"></a>平凡函数依赖与非平凡函数依赖</h3><p>X-&gt;Y,Y⫋X,则称X-&gt;Y是<strong>非平凡的函数依赖</strong></p><p>X-&gt;Y,Y⊆X,则称X-&gt;Y是<strong>非平凡的函数依赖</strong></p><p>eg：</p><p>在关系SC(Sno,Cno,Grade)中，</p><p>非平凡函数依赖：(Sno,Cno)-&gt;Grade</p><p>平凡函数依赖：(Sno,Cno)-&gt;Sno</p><p>​                           (Sno,Cno)-&gt;Cno</p><p>一般平凡函数依赖一定成立，所以我们只讨论非平凡函数依赖</p><h3 id="完全函数依赖与部分函数依赖"><a href="#完全函数依赖与部分函数依赖" class="headerlink" title="完全函数依赖与部分函数依赖"></a>完全函数依赖与部分函数依赖</h3><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/JXP%7DH3%60B08CUXLS@G8%7D61LK.png" alt="img"></p><p>在关系STUDENT (Sno,Sdept,Mnaem,Cno,Grade)</p><p>(Sno,Cno)–F-&gt;Grade是完全函数依赖</p><p>(Sno,Cno)–p-&gt;Sdept是部分函数依赖，因为Sno—&gt;Sdept</p><h3 id="传递函数依赖"><a href="#传递函数依赖" class="headerlink" title="传递函数依赖"></a>传递函数依赖</h3><p>eg：在关系STUDENT(Sno,Sdept,Mname,Cno,Grade)</p><p>Sno–&gt;Sdept,Sdept–&gt;Mname,Sno—传递-&gt;Mname</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/JXP%7DH3%60B08CUXLS@G8%7D61LK.png"></p><h3 id="键"><a href="#键" class="headerlink" title="键"></a>键</h3><p>eg：</p><p>S(Sno,Sdept,Sage)</p><p>Sno—&gt;(Sno,Sdept,Sage),Sno是键</p><p>(Sno,Sdept)、(Sno,Sage)、(Sno,Sdept,Sage)是超码</p><p>SC(Sno,Cno,Grade)中，(Sno,Cno)是码</p><ul><li>  若关系模式R有多个候选码，则选定其中一个作为<strong>主码</strong>。</li></ul><h4 id="主属性与非主属性"><a href="#主属性与非主属性" class="headerlink" title="主属性与非主属性"></a>主属性与非主属性</h4><ul><li>  包含在任何一个候选键中的属性，称为<strong>主属性</strong></li><li>  不包含在任何键中的属性称为<strong>非主属性</strong></li></ul><p>eg：S(Sno,Sdept,Sage),Sno是键，Sno是主属性，Sdept,Sage是非主属性</p><p>SC(Sno,Cno,Grade)中，(Sno,Cno)是键</p><p>Sno，Cno是主属性，Grade是非主属性</p><h4 id="全键"><a href="#全键" class="headerlink" title="全键"></a>全键</h4><p>整个属性组是键，称为全键</p><h4 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h4><p>关系模式R&lt;U,F&gt;,U中属性或属性组X并非R的键，但X是另一个关系模式的键，则称X是R的外键。</p><h2 id="第二范式（2NF）"><a href="#第二范式（2NF）" class="headerlink" title="第二范式（2NF）"></a>第二范式（2NF）</h2><p>范式是符合某一种级别的关系模式的集合。</p><p>关系数据库中的关系必须满足一定的要求。</p><p>满足不同程度要求的为不同范式。</p><p>范式的种类</p><p>第一范式（1NF）</p><p>第二范式（2NF）</p><p>第三范式（3NF）</p><p>BC范式（BCNF,boyce和Codd共同提出的范式）</p><p>第四范式（4NF）</p><p>第五范式（5NF）</p><p>各种范式之间存在联系：</p><p>1NF⊃2NF⊃3NF⊃BCNF⊃4NF⊃5NF</p><p>某一关系模式R为第n范式，可简记为R∈nNF</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/image-20210507202535825.png" alt="image-20210507202535825"></p><p>一个低一级范式的关系模式，通过模式分解可以转换为若干个高一级范式的关系模式的集合，这种过程叫做<strong>规范化</strong>。</p><h3 id="第一范式"><a href="#第一范式" class="headerlink" title="第一范式"></a>第一范式</h3><p>如果一个关系模式R的所有属性都是不可分的基本数据项，则R∈1NF</p><p>通俗地讲：不允许表中有表</p><p>但是满足第一范式的关系模式并不一定是一个好的关系模式。</p><h3 id="第二范式"><a href="#第二范式" class="headerlink" title="第二范式"></a>第二范式</h3><p>若关系模式R∈1NF，并且每一个非主属性都完全依赖于R的键，则R∈2NF。</p><p>eg：关系模式S-L-C(Sno,Cno,Sdept,Sloc,Grade)</p><p>Sloc为学生住处，假设每个系的学生住在同一个楼。</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/image-20210508113908448.png" alt="image-20210508113908448"></p><ol><li><p> S-L-C满足第一范式。</p></li><li><p>S-L-C的键为（Sco,Cno）,主属性：Sno，Cno</p><p> ​                                            非主属性：Grade，Sdept，Sloc</p></li><li><p> 非主属性Sdept和Sloc部分函数依赖于键（Sno，Cno）</p></li></ol><p>S-L-C(Sno,Cno,Sdept,Sloc,Grade)∈1NF</p><p>S-L-C(Sno,Cno,Sdept,Sloc,Grade)∉2NF</p><p>第二范式(Second Normal Form,2nd NF)是指每个表必须有<a href="https://baike.baidu.com/item/%E4%B8%BB%E5%85%B3%E9%94%AE%E5%AD%97/1239455">主关键字</a>(Primary key),其他数据元素与主关键字一一对应。通常称这种关系为<a href="https://baike.baidu.com/item/%E5%87%BD%E6%95%B0%E4%BE%9D%E8%B5%96/737239">函数依赖</a>(Functional dependence)关系，即表中其他数据元素都依赖于主关键字,或称该数据元素惟一地被主关键字所标识。第二范式是<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93/103728">数据库</a>规范化中所使用的一种正规形式。它的规则是要求数据表里的所有非主属性都要和该数据表的<a href="https://baike.baidu.com/item/%E4%B8%BB%E9%94%AE/1232239">主键</a>有完全依赖关系；如果有哪些非主属性只和主键的一部份有关的话，它就不符合第二范式。同时可以得出：如果一个数据表的主键只有单一一个字段的话，它就一定符合第二范式(前提是该数据表符合第一范式)。</p><p>简单的来说，就是把第一范式的表再拆分为两个表。</p><h2 id="第三范式-3NF"><a href="#第三范式-3NF" class="headerlink" title="第三范式  (3NF)"></a>第三范式  (3NF)</h2><p>第三范式(Third Normal Form,3rd NF)就是指表中的所有数据元素不但要能唯一地被主关键字所标识,而且它们之间还必须相互独立,不存在其他的函数关系。也就是说，对于一个满足2nd NF 的数据结构来说，表中有可能存在某些数据元素依赖于其他非关键字数据元素的现象,必须消除。</p><p>简单地来说，就是把第二范式的表再拆分。</p><h2 id="BC范式-BCNF"><a href="#BC范式-BCNF" class="headerlink" title="BC范式(BCNF)"></a>BC范式(BCNF)</h2><h4 id="多值依赖"><a href="#多值依赖" class="headerlink" title="多值依赖"></a>多值依赖</h4><h4 id="第四范式-4NF"><a href="#第四范式-4NF" class="headerlink" title="第四范式(4NF)"></a>第四范式(4NF)</h4><h3 id="规范化小结"><a href="#规范化小结" class="headerlink" title="规范化小结"></a>规范化小结</h3>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++&amp;Mysql</title>
      <link href="2021/05/04/C-Mysql/"/>
      <url>2021/05/04/C-Mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="C-amp-Mysql"><a href="#C-amp-Mysql" class="headerlink" title="C++&amp;Mysql"></a>C++&amp;Mysql</h1><p>重置mysql密码：ALTER USER “root”@”localhost” IDENTIFIED BY “***mima”</p><p>修改数据库远程访问权限：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-u root -p密码 -h 主机ip地址</span><br></pre></td></tr></table></figure><p>更改任何机器都能远程访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update user set host&#x3D;&quot;%&quot; where user&#x3D;&quot;root&quot;;</span><br></pre></td></tr></table></figure><p>注意这里%表示所有都能访问，在实际开发中非常不安全，因此实际开发中，应该让某些特定的机器能访问。</p><p>设置完以后，需要刷新一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>如果不记得这个指令可以重启sever</p><p>刷新以后，重新连接。如果将mysql部署到阿里云，需要将3306这个端口开放出来。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 17</title>
      <link href="2021/05/03/Day-17/"/>
      <url>2021/05/03/Day-17/</url>
      
        <content type="html"><![CDATA[<h1 id="Day-17"><a href="#Day-17" class="headerlink" title="Day 17"></a>Day 17</h1><p>2018年12月真题（第二套）</p><p>passage one</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/F9E508E52C9BA5902A459B3EF9826AEF.jpg" alt="img"></p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ul><li>  exposure 接触</li><li>  pea 豌豆</li><li>  bowl carrot 煮熟的胡萝卜</li><li>  rate 评价</li><li>  tial 实验</li></ul>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 16</title>
      <link href="2021/05/02/Day-16/"/>
      <url>2021/05/02/Day-16/</url>
      
        <content type="html"><![CDATA[<h1 id="Day-16"><a href="#Day-16" class="headerlink" title="Day 16"></a>Day 16</h1><p>2018年12月真题（第二套）</p><p>news report 3</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/D5EAE3C803E9EEDEF4B608B0A98DA5F8.jpg" alt="img"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>  reveal 揭示</li><li>  phase 阶段，状态，方面</li><li>  rarely 注意这里容易误听为really</li><li>  cap 帽子</li></ul>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 15</title>
      <link href="2021/05/01/Day-15/"/>
      <url>2021/05/01/Day-15/</url>
      
        <content type="html"><![CDATA[<h1 id="Day-15"><a href="#Day-15" class="headerlink" title="Day 15"></a>Day 15</h1><p>2018年12月真题（第二套）</p><p>news report 2</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/8A5E8D6BFD6A071EFDDECA019B450F8C.jpg" alt="img"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>  paycheck 薪水支票</li><li>  campaigner 活动家</li><li>  being bad at math 连读</li><li>  badge 勋章</li><li>  nation 大众</li><li>  that are 连读</li><li>  at best</li><li>  launch  启动</li><li>  chief executive 首席执行官</li><li>  prevalent 普遍存在的</li></ul>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编基础</title>
      <link href="2021/05/01/%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80/"/>
      <url>2021/05/01/%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="汇编基础"><a href="#汇编基础" class="headerlink" title="汇编基础"></a>汇编基础</h1><p>重点：如何利用硬件系统的编程结构和指令集有效灵活的控制系统进行工作。</p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="机器语言"><a href="#机器语言" class="headerlink" title="机器语言"></a>机器语言</h3><ul><li>  机器语言是机器指令的集合。</li><li>  机器指令展开来讲就是一台机器可以正确执行的命令。</li></ul><h3 id="汇编语言的产生"><a href="#汇编语言的产生" class="headerlink" title="汇编语言的产生"></a>汇编语言的产生</h3><ul><li>  汇编语言的主体是汇编指令</li><li>  汇编指令和机器指令的差别在于指令的表示方法上。汇编指令的机器指令便于记忆的书写格式。</li><li>  汇编指令是机器指令的助记符。</li></ul><p>机器指令：10001001110111000</p><p>操作：寄存器BX的内容送到AX中</p><p>汇编指令：MOV AX,BX</p><ul><li>  寄存器：简单地讲是CPU中可以存储数据的器件，一个CPU中有多个寄存器。</li></ul><p>PS:AX，BX是其中两个寄存器的代号。</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/%E6%B1%87%E7%BC%96.png" alt="汇编"></p><h3 id="汇编语言的组成"><a href="#汇编语言的组成" class="headerlink" title="汇编语言的组成"></a>汇编语言的组成</h3><p>包括：</p><ul><li>  汇编指令（机器码的助记符）</li><li>  伪指令（由编译器执行）</li><li>  其他符号（由编译器识别）</li></ul><p>汇编语言的核心是汇编指令，它决定了汇编语言的特性。</p><p>书籍：《编码的奥秘》</p><h3 id="存储器"><a href="#存储器" class="headerlink" title="存储器"></a>存储器</h3><ul><li>  CUP是计算机的核心部分，控制整个计算机的运行并进行运算。</li></ul><p>想让一个CPU工作，就必须向它提供指令和数据。</p><ul><li><p>  指令和数据在存储器中存放，即内存。</p></li><li><p>  一台PC机中内存的作用仅次于CPU。</p></li><li><p>  离开了内存，性能再好的CPU也无法工作。</p></li><li><p>  磁盘不同于内存，磁盘上的数据或程序如果不读到内存中，就无法被CPU使用。</p></li></ul><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/%E4%B8%89%E8%80%85%E5%85%B3%E7%B3%BB.png" alt="三者关系"></p><h3 id="指令和数据"><a href="#指令和数据" class="headerlink" title="指令和数据"></a>指令和数据</h3><ul><li>  指令和数据时应用上的概念。</li><li>  在内存或磁盘上，指令和数据没有任何区别，都是二进制信息。</li><li>  二进制信息：</li></ul><p>1000100111011000-&gt;89D8H（数据）</p><p>1000100111011000-&gt;MOV AX,BX（程序）</p><h3 id="存储单元"><a href="#存储单元" class="headerlink" title="存储单元"></a>存储单元</h3><p>存储器被分为若干个存储单元，每个存储单元从0开始顺序编号。</p><p>eg：一个存储器有128个存储单元，编号从0~127。</p><p>对于大容量的存储器一般还用以下单位来计量容量（以下用B来代表Byte）：</p><p><strong>1KB=1024B</strong></p><p><strong>1MB=1024KB</strong></p><p><strong>1GB=1024MB</strong></p><p><strong>1TB=1024GB</strong></p><p>磁盘的容量单位同内存的一样，实际上以上单位是微机中常用的计量单位。</p><h3 id="CPU对存储器的读写"><a href="#CPU对存储器的读写" class="headerlink" title="CPU对存储器的读写"></a>CPU对存储器的读写</h3><p>CUP必须和外部器件（标准说法：芯片）进行三类信息交互：</p><ul><li>  存储单元的地址（地址信息）</li><li>  器件的选择，读或写命令（控制信息）</li><li>  读或写的数据（数据信息）</li></ul><p>在计算机中有专门连接CPU和其他芯片的导线，通常称为总线。</p><p>物理上：一根根导线的集合。</p><p>逻辑上划分为：</p><ul><li>  地址总线</li><li>  数据总线</li><li>  控制总线</li></ul><p>对于8086CPU，下面的机器码能够完成从3号单元读数据：</p><ul><li>  机器码:1010000000000011000000000</li><li>  含义：从3号单元读取数据送入寄存器AX</li><li>  CPU接收这条机器码后将完成上面所述的读写工作。</li></ul><h3 id="地址总线"><a href="#地址总线" class="headerlink" title="地址总线"></a>地址总线</h3><p>CPU是通过地址总线来指定存储单元的。</p><p>地址总线上能传送多少个不同的信息，CPU就可以对多少个存储单元进行寻址。</p><p>一个CPU有N根总线，即这个CPU的地址总线的宽度为N。这样的CPU可以寻找到2的N次方个内存单元。</p><h3 id="数据总线"><a href="#数据总线" class="headerlink" title="数据总线"></a>数据总线</h3><p>CUP与内存或其他器件之间的数据传送是通过数据总线来进行的。</p><p>数据总线的宽度决定了CPU和外界的数据传速度。</p><h3 id="控制总线"><a href="#控制总线" class="headerlink" title="控制总线"></a>控制总线</h3><p>CPU对外部器件的控制是通过控制总线来进行的。控制总线是个总称，是一些不同控制线的集合。</p><p>有多少根控制总线，意味着CPU提供了对外部器件的多少种控制。</p><p>因此，控制总线的宽度决定了CPU对外部器件的控制能力。</p><p>前面所讲的内存读或写命令是由几根控制线综合发出的：</p><ul><li>  其中有一根名为读信号输出控制线负责由CPU向外传送读信号，CPU向该控制线上输出低电平表示将要读取数据。</li><li>  有一根名为写信号输出控制线负责由CPU向外传送信号。</li></ul><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>  汇编指令是机器指令的助记符，同机器指令一一对应。</li><li>  每一种CPU指令都有自己的汇编指令集。</li><li>  CPU可以直接使用的信息在存储器中存放。</li><li>  在存储器中指令和数据没有任何区别，都是二进制信息。</li><li>  存储单元从零开始顺序编号。</li><li>  一个存储单元可以存储8个bit，即8位二进制数</li><li>  1B=8b 1KB=1024B 1MB=1024KB 1GB=1024MB 1TB=1024GB</li><li>三种总线的宽度标志了这个CPU的不同方面的性能：<ul><li>  地址总线的宽度决定了CPU的寻址能力</li><li>  数据总线的宽度决定了CPU与其他器件进行数据传送时的一次数据传送量</li><li>  控制总线宽度决定了CPU对系统中其他器件的控制能力。</li></ul></li></ul><h3 id="检测点1-1"><a href="#检测点1-1" class="headerlink" title="检测点1.1"></a>检测点1.1</h3><p>（1）1个CPU的寻址能力为8KB，那么它的地址总线的宽度为 13位。</p><p>（2）1KB的存储器有 1024 个存储单元，存储单元的编号从 0 到 1023 。</p><p>（3）1KB的存储器可以存储 8192（2^13） 个bit， 1024个Byte。</p><p>（4）1GB是 1073741824 （2^30） 个Byte、1MB是 1048576（2^20） 个Byte、1KB是 1024（2^10）个Byte。</p><p>（5）8080、8088、80296、80386的地址总线宽度分别为16根、20根、24根、32根，则它们的寻址能力分别为: 64 （KB）、 1 （MB）、 16 （MB）、 4 （GB）。</p><p>（6）8080、8088、8086、80286、80386的数据总线宽度分别为8根、8根、16根、16根、32根。则它们一次可以传送的数据为: 1 （B）、 1 （B）、 2 （B）、 2 （B）、 4 （B）。</p><p>（7）从内存中读取1024字节的数据，8086至少要读 512 次，80386至少要读 256 次。</p><p>（8）在存储器中，数据和程序以 二进制 形式存放。</p><p><strong>解题过程：</strong></p><p>（1）1KB=1024B，8KB=1024B*8=2^N，N=13。</p><p>（2）存储器的容量是以字节为最小单位来计算的，1KB=1024B。</p><p>（3）8Bit=1Byte，1024Byte=1KB（1KB=1024B=1024B*8Bit）。</p><p>（4）1GB=1073741824B（即2^30）1MB=1048576B（即2^20）1KB=1024B（即2^10）。</p><p>（5）一个CPU有N根地址线，则可以说这个CPU的地址总线的宽度为N。这样的CPU最多可以寻找2的N次方个内存单元。（一个内存单元=1Byte）。</p><p>（6）8根数据总线一次可以传送8位二进制数据（即一个字节）。</p><p>（7）8086的数据总线宽度为16根（即一次传送的数据为2B）1024B/2B=512，同理1024B/4B=256。</p><p>（8）在存储器中指令和数据没有任何区别，都是二进制信息。<br>检测点 2.1</p><p>(1) 写出每条汇编指令执行后相关寄存器中的值。</p><h3 id="内存地址空间"><a href="#内存地址空间" class="headerlink" title="内存地址空间"></a>内存地址空间</h3><p>what？</p><p>一个CPU的地址宽度为10，那么可以寻址1024个内存单元，这1024个可寻到的内存单元就构成这个CPU的内存地址空间。</p><h3 id="主板"><a href="#主板" class="headerlink" title="主板"></a>主板</h3><p>在每一台PC机中，都有一个主板，主板上有核心器件和一些主要器件。</p><p>这些器件通过总线（地址总线、数据总线、控制总线）相连。</p><h3 id="接口卡"><a href="#接口卡" class="headerlink" title="接口卡"></a>接口卡</h3><p>计算机系统中，所有可用程序控制其工作的设备，必须受到CPU的控制。</p><p>CPU对外部设备不能直接控制，如显示器、音响、打印机等。直接控制这些设备进行工作的是插在扩展插槽上的接口卡。</p><h3 id="各类存储器芯片"><a href="#各类存储器芯片" class="headerlink" title="各类存储器芯片"></a>各类存储器芯片</h3><ul><li>  从读写属性上看分为两类：</li></ul><p>随机存储器（RAM）和只读存储器（ROM）</p><ul><li><p>从功能和连接上分类：</p><ul><li>  随机存储器RAM</li><li>  装有BIOS的ROM</li><li>接口卡上的RAM</li></ul></li></ul><p>装有BIOS的ROM</p><p>BIOS：Basic Input/Output System，基本输入输出系统。</p><p>BIOS是由主板和各类接口卡（如：显卡、网卡等）产商提供的软件系统，可以通过它利用该硬件设备进行最基本的输入输出。在主板和某些接口卡插有存储相应BIOS的ROM。</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/CUPP%E5%8F%8A%E5%90%84%E5%86%85%E5%AD%98.png" alt="CUPP及各内存"></p><p>上述的那些存储器在物理上是独立的器件。</p><p>但是它们在以下两点相同：</p><ul><li>  都和CPU总线相连。</li><li>  CPU对它们进行读或写的时候都通过控制线发出内存读写命令。</li></ul><p>将各类存储器看作一个逻辑存储器：</p><ul><li>  所有的物理存储器被看作一个由若干存储单元组成的逻辑存储器。</li><li>  每个物理存储器在这个逻辑存储器中占有一个地址段，即一段地址空间。</li><li>  CPU在这段地址空间中读写数据，实际上就是在相应的物理存储器中读写数据。</li></ul><p>不同计算机系统的内存地址空间分配情况是不同的。</p><p>eg：8086PC机内存地址空间分配的基本情况：<br><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/image-20210502150745961.png" alt="image-20210502150745961"></p><p>内存地址空间：</p><p>最终运行程序的是CPU，我们用汇编编程的时候，必须要从CPU角度考虑问题。<strong>（汇编语言核心思维）</strong></p><p>对CPU来说，系统中的所有存储器中的存储单元都处于一个统一的逻辑存储器中，它的容量受CPU寻址能力的限制。在这个逻辑存储器即使我们所说的内存地址空间。</p><h2 id="寄存器（CPU工作原理）"><a href="#寄存器（CPU工作原理）" class="headerlink" title="寄存器（CPU工作原理）"></a>寄存器（CPU工作原理）</h2><blockquote><p>  CPU概述：</p><p>  一个典型的CPU由运算器、控制器、寄存器等器件组成。这些器件靠内部总线相连。</p><p>  区别：</p><ul><li>  内部总线实现CPU内部各个器件之间的联系。</li><li>  外部总线实现CPU和主板上其他器件的联系。</li></ul></blockquote><blockquote><p>  寄存器概述：</p><p>  8086CPU有14个寄存器，它们的名称为：</p><p>  AX,BX,CX,DX,SI,DI,SP,BP,IP,CS.SS,DS,ES,PSW.</p></blockquote><h3 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h3><p>8086CPU所有的寄存器都是16位的，可以存放两个字节。</p><p>AX,BX,CX,DX通常用来存放一般性数据被称为通用寄存器。</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/image-20210502153345136.png" alt="image-20210502153345136"></p><p>16位数据在寄存器中的存放情况</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/image-20210502153758690.png" alt="image-20210502153758690"></p><p>8086上一代CPU中的寄存器都是8位的，为保证兼容性，这四个寄存器都可以分为两个独立的8位寄存器使用。</p><p>AX可以分为AH和AL；</p><p>BX可以分为BH和BL；</p><p>CX可以分为CH和CL；</p><p>DX可以分为DH和DL。</p><p>AX的低8位（0~7位）构成了AL寄存器，高8位（8-15位）构成了AH寄存器。</p><p>AH和AL寄存器是可以独立使用的8位寄存器。</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/image-20210502154848451.png" alt="image-20210502154848451"></p><p>一个8位寄存器所能存储的数据的最大值是2^8-1。</p><h3 id="字在寄存器中的存储"><a href="#字在寄存器中的存储" class="headerlink" title="字在寄存器中的存储"></a>字在寄存器中的存储</h3><p>一个字可以在一个16位寄存器中，这个字的高位字节和低位字节自然就存在这个寄存器的高8位寄存器和低8位寄存器中。</p><p>一个字等于两个字节。</p><h3 id="关于数制的讨论"><a href="#关于数制的讨论" class="headerlink" title="关于数制的讨论"></a>关于数制的讨论</h3><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/image-20210503160257568.png" alt="image-20210503160257568"></p><h3 id="几条汇编指令"><a href="#几条汇编指令" class="headerlink" title="几条汇编指令"></a>几条汇编指令</h3><p>PS：汇编指令不区分大小写！</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/image-20210503160812621.png" alt="image-20210503160812621"></p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/image-20210503161718060.png" alt="image-20210503161718060"></p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/image-20210503162030795.png" alt="image-20210503162030795"></p><h3 id="检测点2-1"><a href="#检测点2-1" class="headerlink" title="检测点2.1"></a>检测点2.1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">mov ax,62627   AX&#x3D;F4A3H </span><br><span class="line"></span><br><span class="line">mov ah,31H     AX&#x3D;31A3H </span><br><span class="line"></span><br><span class="line">mov al,23H     AX&#x3D;3123H </span><br><span class="line"></span><br><span class="line">add ax,ax      AX&#x3D;6246H </span><br><span class="line"></span><br><span class="line">mov bx,826CH   BX&#x3D;826CH </span><br><span class="line"></span><br><span class="line">mov cx,ax      CX&#x3D;6246H </span><br><span class="line"></span><br><span class="line">mov ax,bx      AX&#x3D;826CH </span><br><span class="line"></span><br><span class="line">add ax,bx      AX&#x3D;04D8H </span><br><span class="line"></span><br><span class="line">mov al,bh      AX&#x3D;0482H </span><br><span class="line"></span><br><span class="line">mov ah,bl      AX&#x3D;6C82H </span><br><span class="line"></span><br><span class="line">add ah,ah      AX&#x3D;D882H </span><br><span class="line"></span><br><span class="line">add al,6       AX&#x3D;D888H </span><br><span class="line"></span><br><span class="line">add al,al      AX&#x3D;D810H </span><br><span class="line"></span><br><span class="line">mov ax,cx      AX&#x3D;6246H</span><br></pre></td></tr></table></figure><p>(2) 只能使用目前学过的汇编指令，最多使用4条指令，编程计算2的4次方。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mov ax 2 ax&#x3D;2</span><br><span class="line"></span><br><span class="line">add ax ax ax&#x3D;4</span><br><span class="line"></span><br><span class="line">mov ax ax ax&#x3D;8</span><br><span class="line"></span><br><span class="line">add ax ax ax&#x3D;16</span><br></pre></td></tr></table></figure><h3 id="物理地址"><a href="#物理地址" class="headerlink" title="物理地址"></a>物理地址</h3><p>CPU访问内存单元时要给出内存单元的地址。所有的内存单元构成的存储空间是一个一维的线性空间。</p><p>我们将这个唯一的地址称为物理地址。</p><h3 id="16位结构的CPU"><a href="#16位结构的CPU" class="headerlink" title="16位结构的CPU"></a>16位结构的CPU</h3><p>概括的讲，16位结构描述了一个CPU具有以下几个方面特征：</p><ul><li>  运算器一次最多可以处理16位的数据。</li><li>  寄存器的最大宽度为16位。</li><li>  寄存器和运算器之间的通路是 16位的</li></ul><h3 id="8086CPU给出物理地址的方法"><a href="#8086CPU给出物理地址的方法" class="headerlink" title="8086CPU给出物理地址的方法"></a>8086CPU给出物理地址的方法</h3><ul><li>  8086有20位地址总线，可传送20位地址，寻址能力为1M。</li><li>  8086内部为16位结构，它只能传送16位的地址，表现出的寻址能力却只有64K。</li></ul><p>8086CPU采用一种在内部用两个16位地址合成的方法来形成一个20位的物理地址。</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/image-20210503174601937.png" alt="image-20210503174601937"></p><p>地址加法器采用<strong>物理地址=段地址×16+偏移地址</strong>的方法合成20位地址</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/image-20210503175109968.png" alt="image-20210503175109968"></p><p>16进制×16等于左移1位</p><p>2进制等于左移4位2</p><p>“段地址×16”有一个更为常用的说法就是数据左移4位（二进制）</p><p>观察发现：</p><ol><li> 一个数据的二进制形式左移1位，相当于该数据乘以2；</li><li> 一个数据的二进制形式左移N位，相当于该数据乘以2的N次方；</li><li> 地址加法器完成段地址×16的运算：以二进制形式存放的段地址左移4位</li><li> 一个数据的十六进制形式左移1位，相当于乘以16</li><li> 一个数据的十进制形式左移1位，相当于乘以10</li><li> 一个数据的X进制形式左移1位，相当于乘以X。</li></ol><h3 id="段地址×16-偏移地址-物理地址的本质含义"><a href="#段地址×16-偏移地址-物理地址的本质含义" class="headerlink" title="段地址×16+偏移地址=物理地址的本质含义"></a>段地址×16+偏移地址=物理地址的本质含义</h3><p>两个比喻说明：</p><ul><li>  基础地址+偏移地址=物理地址</li></ul><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/image-20210503182855275.png" alt="image-20210503182855275"></p><ul><li>  段地址×16+偏移地址=物理地址</li></ul><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/image-20210503183202094.png" alt="image-20210503183202094"></p><h3 id="段的概念"><a href="#段的概念" class="headerlink" title="段的概念"></a>段的概念</h3><p>错误认识：</p><p>内存被划分成了一个一个段，每一个段都有一个段地址。</p><p>事实上：</p><p>内存并没有分段，段的划分来自于CPU，由于8086CPU用“段地址×16”+偏移地址=物理地址的方式给出单元的物理地址，使得什么可以用分段的方式来管理内存。</p><p>以后，在编程时可以根据需要，将若干地址连续的内存单元看作一个段，用段地址×16定位段的起始地址（基础地址），用偏移 地址定位段中的内存单元。</p><p><strong>注意</strong></p><ol><li> 段地址×16必然是16的倍数，所以一个段的起始地址也一定是16的倍数；</li><li> 偏移地址为16位，所以一个段的长度最大为64K。</li></ol><p><strong>内存单元地址小结</strong></p><p>CPU访问内存单元时，必须向内存提供内存单元的物理地址。</p><p>8086CPU在内部用段地址和偏移地址移位相加的方法形成最终的物理地址。</p><p>CPU可以用不同的段地址和偏移地址形成同一个物理地址。</p><p>思考：</p><p>如果给定一个段地址，仅通过变化偏移地址来进行寻址，最多可以定位多少内存单元？</p><p>结论：偏移地址16位，变化范围为0~FFFFH，仅用偏移地址来寻址最多可寻64K个内存单元。2^16=64KB</p><p>eg：给定段地址10000H,用偏移地址寻址，CPU的寻址范围为：10000H~1FFFFH</p><p><strong>强调</strong></p><p>在8086PC机中，存储单元的地址用两个元素来描述。即段地址和偏移地址。</p><p>“数据在21F60H内存单元中”。对于8086PC机的两种描述：</p><p>1.数据存在内存2000:1F60单元中；</p><p>2.数据存在内存的2000段中的1F60H单元中。</p><p>可根据需要，将地址连续、起始地址为16倍数的一组内存单元定义为一个段。</p><h3 id="检测点2-2"><a href="#检测点2-2" class="headerlink" title="检测点2.2"></a>检测点2.2</h3><p>（1）给定地址为0001H，仅通过变化偏移地址寻址，CPU的寻址范围为_______到___。</p><p>（2）有一段数据存放在内存20000H单元中，现给定段地址为SA，若想用偏移地址寻到此单元，则SA应满足的条件是：最小为___,最大为______.</p><p>答案：</p><ol><li><p>0010H 到 1000FH </p><p> <strong>解题过程：</strong></p><p> 物理地址＝SA*16+EA</p><p> EA的变化范围为0h~ffffh</p><p> 物理地址范围为(SA<em>16+0h)~(SA</em>16+ffffh)</p><p> 现在SA=0001h,那么寻址范围为</p><p> (0001h<em>16+0h)~(0001h</em>16+ffffh)</p><p> =0010h~1000fh</p></li><li><p>最小为 1001H ，最大为 2000H 。</p><p> <strong>解题过程：</strong></p><p> 物理地址＝SA*16+EA</p><p> 20000h＝SA*16+EA</p><p> SA=(20000h-EA)/16=2000h-EA/16</p><p> EA取最大值时,SA=2000h-ffffh/16=1001h,SA为最小值</p><p> EA取最小值时,SA=2000h-0h/16=2000h,SA为最大值</p></li></ol><h3 id="段寄存器"><a href="#段寄存器" class="headerlink" title="段寄存器"></a>段寄存器</h3><p>段寄存器就是提供段地址的。</p><p>8086CPU有4个段寄存器：</p><p>CS、DS、SS、ES</p><p>当8086CPU要访问内存时，由这4个段寄存器提供内存单元的段地址。</p><h3 id="CS和IP"><a href="#CS和IP" class="headerlink" title="CS和IP"></a>CS和IP</h3><p>CS和IP是8086CPU中关键的寄存器，它们指示了CPU当前要读取指令的地址。</p><p>CS为代码段寄存器。</p><p>IP为指令指针寄存器。</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/image-20210503225745269.png" alt="image-20210503225745269"></p><p>工作简述：</p><ol><li> 从CS：IP指向内存单元读取指令，读取的指令进入指令缓冲区</li><li> IP=IP+所读取指令的长度，从而指向下一条指令</li><li> 执行指令，跳转到步骤（1），重复这个过程。</li><li> 在8086CPU加电启动或复位后（即CPU刚开始工作时）CS和IP被设置为CS=FFFFH,IP=0000H</li><li> 即在8086PC机刚启动时，CPU从内存FFFF0H单元中读取指令执行。</li><li> FFFF0H单元中的指令是80866PC机开机后执行的第一条指令。</li><li> 在任何时候，CPU将CS、IP中的内容当指令的段地址和偏移地址，用它们合成指令的物理地址，到内存中读取指令码，执行。</li><li> 如果说，内存中的一段信息曾被CPU执行过的话，那么，它所在的内存单元必然被CS:IP指向过。</li></ol><h3 id="修改CS、IP的指令"><a href="#修改CS、IP的指令" class="headerlink" title="修改CS、IP的指令"></a>修改CS、IP的指令</h3><p>MOV 指令不能用于设置CS、IP的值，8086CPU没有这样的功能。</p><p>另外功能：<strong>转移指令</strong>：jmp</p><p>同时修改CS、IP的内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jmp 段地址 ： 偏移地址</span><br><span class="line">jmp 2AE3:3</span><br><span class="line">jmp 3:0416</span><br></pre></td></tr></table></figure><p>注意：第二条语句最终指向：B46H</p><p>（用上个内容的计算方法）</p><p>功能：用指令中给出的段地址修改CS,偏移地址修改IP</p><ol><li><p>仅修改IP内容</p><p> jmp 某一合法寄存器</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jmp ax （类似 mov IP,ax）</span><br><span class="line">jmp bx </span><br></pre></td></tr></table></figure><p> 功能：用寄存器中的值修改IP</p></li></ol><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/image-20210522145917787.png" alt="image-20210522145917787"></p><p>分析结果：</p><ol><li> mov ax,6622</li><li> jmp 1000:3</li><li> mov ax,0000</li><li> mov bx,ax</li><li> jmp bx</li><li> mov ax,0123</li><li> mov ax,0000</li><li> ……死循环了</li></ol><p>偏移地址不能超过16位，即一个段的索引长不能超过2^16次方，即64KB，</p><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><ol><li> 段地址在8086CPU的寄存器中存放，当8086CPU要访问内存时，由段寄存器提供内存单元的段地址。</li><li> CS存放指令的段地址，IP存放指令的偏移地址。</li><li> 8086机中，任意时刻，CPPU将CS：IP指向的内容当作指令执行。</li><li> 8086CPU提供转移指令修改CS、IP的内容。</li></ol><p>工作过程：</p><p>1.从CS:IP指向内存单元读取指令，读取的指令进入指令缓冲器</p><p>2.IP指向下一条指令。</p><p>3.执行指令。（转到步骤1，重复这个过程）</p><h3 id="检测点2-3"><a href="#检测点2-3" class="headerlink" title="检测点2.3"></a>检测点2.3</h3><p>检测点2.3</p><p>下面的3条指令执行后，cpu几次修改IP？都是在什么时候？最后IP中的值是多少？ </p><p>mov ax,bx </p><p>sub ax,ax </p><p>jmp ax </p><p>答：一共修改四次</p><p>第一次：读取mov ax,bx之后 </p><p>第二次：读取sub ax,ax之后 </p><p>第三次：读取jmp ax之后 </p><p>第四次：执行jmp ax修改IP </p><p>最后IP的值为0000H，因为最后ax中的值为0000H，所以IP中的值也为0000H </p><p>检测点2.3</p><p>下面的3条指令执行后，cpu几次修改IP？都是在什么时候？最后IP中的值是多少？ </p><p>mov ax,bx </p><p>sub ax,ax </p><p>jmp ax </p><p>答：一共修改四次</p><p>第一次：读取mov ax,bx之后 </p><p>第二次：读取sub ax,ax之后 </p><p>第三次：读取jmp ax之后 </p><p>第四次：执行jmp ax修改IP </p><p>最后IP的值为0000H，因为最后ax中的值为0000H，所以IP中的值也为0000H </p><h3 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h3><ol><li> R命令查看、改变CPU寄存器的内容</li><li> D命名查看内存中的内容</li><li> E命令改写内存中的内容</li><li> U命令将内存中的机器指令翻译成汇编指令</li><li> T命令执行一条机器指令</li><li> A命令以汇编指令的格式在内存中写入一条机器指令</li></ol>]]></content>
      
      
      <categories>
          
          <category> 汇编 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五月天文现象</title>
      <link href="2021/05/01/%E4%BA%94%E6%9C%88%E5%A4%A9%E6%96%87%E7%8E%B0%E8%B1%A1/"/>
      <url>2021/05/01/%E4%BA%94%E6%9C%88%E5%A4%A9%E6%96%87%E7%8E%B0%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>  <strong>写在前面：</strong></p><p>   今天翻译小渣渣正式开工了，只翻译了两段与流星雨相关的内容。</p><p>  有生之年希望能用肉眼遇到一颗流星。</p></blockquote><h1 id="五月天文现象"><a href="#五月天文现象" class="headerlink" title="五月天文现象"></a>五月天文现象</h1><p>随着北半球天气转暖，没有什么事情能比得上花一整晚仰望星空了。虽然我们当中的许多人不能从千里之遥来参加天文会面或星空派对，但我们仍然可以在我们的后院或当地公园享受五月的夜空。</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/H9E5TN4zf_FlZtj5faB3GQ" alt="img"></p><p>这个月，我们会享受到一系列的天文盛宴：可看到的月亮与行星近距离接近，小型流星雨频繁出现，月全食会使部分世界沐浴在红光中。更不要提随着月份改变，银河的中心会慢慢上升，当然这一现象也可以被我们所见。五月份的新月出现在11日，那晚会是一个绝妙的欣赏天空的夜晚——可以看到可能是这个月最暗的夜空。</p><p>不再啰嗦，下面就是五月中值得在你的天文日历上做上标记的天文现象。</p><p>​                 <img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/UuggSphbvJKqYqbCXjwlUg" alt="img">        </p><p>图源： Willi Winzig via Flickr</p><p><strong>5月3-4日:月球与土星 木星的近距离接触</strong></p><p>五月由几个行星的视觉接近拉开序幕。而且如果你有在关注近几月的夜空观测指南，你有很大概率猜中！对，就是土星和木星，接连靠近月球。</p><p>第一个是土星，上一次土木大合现象还是发生在12月。在5月3日早晨，月亮和土星会非常接近，相距仅4°9’。虽然没有土木大合距离近，但仍是一个观看亏缺凸起的月亮接近土星的好机会。</p><p>​                 <img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/a1vL1FGH9V-Y3kbE95FRnw" alt="img">        </p><p>下一个早晨，轮到木星接近月球了。这次的角度是4°36’。而这个角度对于用望远镜观看的人来说还是太大了。月亮会变得更适宜观看，而且虽然会离新月时间更近，还是会发出闪耀的光来指引我们。</p><h1 id="5月6日-宝瓶座η流星雨极大期"><a href="#5月6日-宝瓶座η流星雨极大期" class="headerlink" title="5月6日 宝瓶座η流星雨极大期"></a><strong>5月6日 宝瓶座η流星雨极大期</strong></h1><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/H3u-d5NQ0maR1egj7D0yYg" alt="img">                        </p><p>图源：Mike Lewinski via Flickr</p><p>陨石总是能惊艳我们，在5月，我们将有两次体面的机会欣赏这样的流星雨。第一次是宝瓶座η流星雨，将在今年5月6日达到高峰。在赤道附近的人能拥有一个更好的视角，因为宝瓶座流星雨的辐射点在南方的天空中非常低。</p><p>你可以在每年的4月末到5月观测到这场流星雨表演，但是它的高峰期在5月6日前后。宝瓶座η流星雨通常每小时产生40颗流星，这一个不错的开启5月的方式。最重要的是，月亮渐亏为新月，因此不太可能对观测上产生太多干扰。</p><h1 id="5月8日—天琴座流星雨的高峰期"><a href="#5月8日—天琴座流星雨的高峰期" class="headerlink" title="5月8日—天琴座流星雨的高峰期"></a><strong>5月8日—天琴座流星雨的高峰期</strong></h1><p>天琴座η流星雨每年5月3日至14日来袭，但在2021年，活动高峰期可能在5月8日。在这天晚上，你朝着天琴座流星雨辐射点大致方向看，试着发现划过夜空的流星雨。</p><p>虽然天琴座η流星雨并不是一个特别活跃的流星雨(高峰期时平均每小时有3颗流星)，但你可以在8号黎明前和当天晚上尝试看到这些流星。</p><p>​                               <img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/9fkxI0xSBXdH71quz5iQOg" alt="img">                </p><h1 id="05月17日水星达到最高位置"><a href="#05月17日水星达到最高位置" class="headerlink" title="05月17日水星达到最高位置"></a><strong>05月17日水星达到最高位置</strong></h1><p>啊，小水星…太难发现了！水星在一年中有好几个点，在太阳前后的地平线上显得足够高；下一个机会是在5月17日左右，届时水星将到达傍晚天空的最高点。</p><p>要想找到水星，你需要一个清晰、通畅的西方视野。水星只会在19点出现° 在地平线上，日落之后。你不需要望远镜来发现水星，但要记得保护你的眼睛；即使在日落时分，如果你直视太阳，它也会在几秒钟内造成损害。</p><h2 id="5月26日——横跨太平洋的月全食"><a href="#5月26日——横跨太平洋的月全食" class="headerlink" title="5月26日——横跨太平洋的月全食"></a>5月26日——横跨太平洋的月全食</h2><p>​    <img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/nYT9HD1Emu_4Rm-aShOlGw" alt="img">        </p><p>离上次月全食已经有一段时间了；上一次月全食发生在2019年1月20日晚！但对于北美西部和远东地区的许多人来说，这次机会再次出现，5月26日清晨将发生月全食（如果你是远东地区的话，也可能是26日晚些时候）。</p><p>最好的月食景观将出现在太平洋的中心——想想夏威夷吧。但是对于那些在西海岸的人来说，一个短暂的全食阶段将在凌晨4点发生 时间和日期。我们有一个完整的月食观赏指南，如果你要在全食区，并想尝试看到这一个。</p><h2 id="5月28日——金星合水星"><a href="#5月28日——金星合水星" class="headerlink" title="5月28日——金星合水星"></a>5月28日——金星合水星</h2><p>当个老三也不全是坏事——我们的地球在行星中所处的第三的位置在气候上来说可是个“黄金地带”，正好适合生命欣欣向荣地繁衍，也使你得以阅读这篇文章。但在我们地球轨道之内、更靠近太阳的地方，还存在两颗更特殊的行星。如果你想有个机会能同时看到它们两个近距离接触，5月28日晚上就可以尝试一下。</p><p>28日晚上日落后，小小的水星和明亮的金星将会近距离接触，在天空中的距离仅仅0°25′。这是个拿出你的望远镜并对准咱们这两个遥远邻居进行观测的完美的机会，尤其是如果你以前还没看到过水星的话！</p><p>​          <img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/9yH5Dx0RnooYJSrBiYWFRA">        </p><h2 id="5月30日——土星合月"><a href="#5月30日——土星合月" class="headerlink" title="5月30日——土星合月"></a>5月30日——土星合月</h2><p>就像本月初一样，我们也将于本月月末迎来另外一次土星合月。正如我们所预期的，基于月球的运行轨道，这种现象大概每28天发生一次。30号这天土星合月于黎明时分上演时，天空中二者距离仅有4°10′。这个距离近到它们可以同时出现在单筒望远镜的视野中，如果你因为天气或熬不了夜而错过了月初的观测时机的话，这次可是个补救的好机会。</p><p>对于上述五月夜空的天文事件有什么疑问？请在评论中提出！</p><p><strong>BY</strong>：NIGHT SKY GUIDE</p><p><strong>FY</strong>：Astronomical volunteer team</p><p>如有相关内容侵权，请在作品发布后联系作者删除</p><p>转载还请取得授权，并注意保持完整性和注明出处</p><p>翻译：天文志愿文章组-<strong>协作翻译小分队</strong></p><p><strong>联合署名：博润，不道归来，JWST</strong></p><p>审核：天文志愿文章组-</p><p>排版：零度星系</p><p><strong>参考资料</strong></p><p>1.WJ百科全书</p><p>2.天文学名词</p><p>3.原文来自：<a href="https://spacetourismguide.com/night-sky-may/">https://spacetourismguide.com/night-sky-may/</a></p><p>本文由天文志愿文章组-<strong>博润，不道归来（bluesgler），JWST</strong>翻译自文章作者NIGHT SKY GUIDE的作品，如有相关内容侵权，请在作品发布后联系作者删除。</p>]]></content>
      
      
      <categories>
          
          <category> 天文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 🌟此处晴夜，彼处远星🌌 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day14</title>
      <link href="2021/04/30/Day14/"/>
      <url>2021/04/30/Day14/</url>
      
        <content type="html"><![CDATA[<h1 id="Day-14"><a href="#Day-14" class="headerlink" title="Day 14"></a>Day 14</h1><p>2018年12月真题（第二套）</p><p>news report 1</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/D956EF074731C67DEA6F392D0597276C.jpg" alt="img"></p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ul><li>  rescue crew 救援人员</li><li>  vacant 空置的</li><li>  partially 部分的，偏爱的</li><li>  waist 腰部</li><li>  basement 地下室</li><li>  beam 横梁</li><li>  non-life threatening injury 生命危险</li></ul>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 13</title>
      <link href="2021/04/29/Day-13/"/>
      <url>2021/04/29/Day-13/</url>
      
        <content type="html"><![CDATA[<h1 id="Day-13"><a href="#Day-13" class="headerlink" title="Day 13"></a>Day 13</h1><p>2018年6月四级真题</p><p>passage 3</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/0266ED49B8F766E5D1308598FCBDD9E2.jpg" alt="img"></p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/9DF22FC5CC1084F77F7C7B756BBA5EE7.jpg" alt="img"></p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>fill the time 打发时间</p><p>calmer 更冷静</p><p>exhaust 精疲力尽的</p>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 12</title>
      <link href="2021/04/28/Day-12/"/>
      <url>2021/04/28/Day-12/</url>
      
        <content type="html"><![CDATA[<h1 id="Day-12"><a href="#Day-12" class="headerlink" title="Day 12"></a>Day 12</h1><p>2018年6月四级真题</p><p>passage 2</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/6144E59EC3E014EF6F52F6030EC281C1.jpg" alt="img"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>stirred up brain 激发想象力</p><p>loboratry 实验室</p><p>perhaps 大概（这个真没有听出来）</p><p>stay just the way they are 保持原有的模式</p>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 11</title>
      <link href="2021/04/27/Day-11/"/>
      <url>2021/04/27/Day-11/</url>
      
        <content type="html"><![CDATA[<h1 id="Day-11"><a href="#Day-11" class="headerlink" title="Day 11"></a>Day 11</h1><p>2018年6月四级真题</p><p>passage 1</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/FA699D0170CDD28B42E99AC00742640C.jpg" alt="img"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>  written 这里还是听成了return</li><li>  resume 简历</li><li>  presious 宝贵的</li></ul><p>你以为这样就结束了吗，NONONO好戏才刚刚开始。</p><p>今天刷b站刷出来雅思听力训练</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/CCB7B87EF88A4F48A087DCE6CA18A522.jpg" alt="img"></p><p>这些发音规则把我给惊艳到了，好好练习吧，雅思冲！！！</p>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 10</title>
      <link href="2021/04/26/Day-10/"/>
      <url>2021/04/26/Day-10/</url>
      
        <content type="html"><![CDATA[<h1 id="Day-10"><a href="#Day-10" class="headerlink" title="Day 10"></a>Day 10</h1><p>2018年6月四级真题</p><p>news report 3</p><p> <img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/0060DD6E8B1E3CC2F602D6135A9CC691.jpg" alt="img"></p><p>哇，这篇好难，基本上什么都没有听出来。一看原文，确实存在许多新单词，但是也有很多单词因为连读没有听出来。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>  approve a mission 批准一项任务</li><li>  plan to land a （伦敦腔，没有听出land）</li><li>  lobbying 游说</li><li>  coordinated conversation 协调对话</li><li>  federal agencies 联邦机构</li><li>  internal treaty 国际条约</li><li>  cargo 货物，船货</li><li>  complex legal issue 连读听不出来</li><li>  domestically 国内</li><li>  but abroad 连读听不出来</li><li>  proposal 提案，建议，求婚</li><li>  unmanned 无人的</li></ul>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 9</title>
      <link href="2021/04/25/Day-9/"/>
      <url>2021/04/25/Day-9/</url>
      
        <content type="html"><![CDATA[<h1 id="Day-9"><a href="#Day-9" class="headerlink" title="Day 9"></a>Day 9</h1><p>2018 年4月</p><p>news report 2</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/C4DEB775381A2CC13269EB9E8E03B6F1.jpg" alt="img"></p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/52E1B90AFC12BC8C5A63F0F6FE978ECC.jpg" alt="img"></p><p>这字，真的该好好练练了。。。</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ul><li>  drive-through 快捷</li><li>  of course 当然（这个竟然没有听出来）</li><li>  commission 委托，授权，佣金</li></ul>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 8</title>
      <link href="2021/04/24/Day-8/"/>
      <url>2021/04/24/Day-8/</url>
      
        <content type="html"><![CDATA[<h1 id="Day-8"><a href="#Day-8" class="headerlink" title="Day 8"></a>Day 8</h1><p>2018 年4月</p><p>news report 1</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/1D492EE8E0D96F09ACF9493170E00B1D.jpg" alt="img"></p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ul><li>  poisonous 有毒的</li><li>  out of the wits 魂飞胆破</li><li>  scales 鳞片</li><li>  pick up her friends 连读</li><li>  wound up 停下来</li></ul>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 7</title>
      <link href="2021/04/23/Day-7/"/>
      <url>2021/04/23/Day-7/</url>
      
        <content type="html"><![CDATA[<h1 id="Day-6"><a href="#Day-6" class="headerlink" title="Day 6"></a>Day 6</h1><p>2018 年6月</p><p>passage 3</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/70A3AD50DDAD2B173B02009324A8AE13.jpg" alt="img"></p><p>唉，还是好好练字趴~</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ul><li><p>  cellphone 手机</p></li><li><p>  texting driver 发短信的司机</p></li><li><p>  wheel 方向盘</p></li><li><p>  vehicle 车辆</p></li><li><p>type 打字</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 6</title>
      <link href="2021/04/22/Day-6/"/>
      <url>2021/04/22/Day-6/</url>
      
        <content type="html"><![CDATA[<h1 id="Day-6"><a href="#Day-6" class="headerlink" title="Day 6"></a>Day 6</h1><p>2018 年6月</p><p>passage 2</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/0B1D5733D0D42FFBCEB67395123E11F5.jpg" alt="img"></p><p>最近太忙了，上一篇都没听完，继续</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><p>  for instance —-注意连读</p></li><li><p>  high overpasses—立交桥</p></li><li><p>  missiles—–导弹</p></li><li><p>appropriate  拨款</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day 5</title>
      <link href="2021/04/21/Day-5/"/>
      <url>2021/04/21/Day-5/</url>
      
        <content type="html"><![CDATA[<h1 id="Day-5"><a href="#Day-5" class="headerlink" title="Day 5"></a>Day 5</h1><p>passage 2![img](C:\Users\lenovo\Documents\Tencent Files\3032964348\Image\C2C\Image1\A66298436A58EDA49D4A1E2F0B9E71CC.jpg)</p><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><ul><li>  interstate——洲际的</li><li>  military———军队</li><li>  troop————军队</li><li>  bomed———轰炸</li><li>  congress——-国会</li><li>  bill—————账单，钞票</li><li>  fund————为……提供资金</li></ul>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>天文翻译之金星</title>
      <link href="2021/04/21/wen/"/>
      <url>2021/04/21/wen/</url>
      
        <content type="html"><![CDATA[<blockquote><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>  偶然在QQ空间看到天文科普翻译志愿者的招募，由于从小对天文有着浓厚的兴趣，就抱着试一试的态度。</p><p>  询问了发起人，他给了我两个考核，第一个考核实在是太简单了，这里不放了。</p><p>  第二个考核就是翻译500字左右的短文。</p><p>  为了加大难度，原文没有标点符号，且句子部分存在语病。</p><p>  发起人的要求是：</p><ul><li>  24小时内完成</li><li>  不要出现翻译腔</li><li>  不得使用机器翻译</li></ul><p>  这里要特别感谢英语老师唐老师，以及@moonkeey89和@Crotes鼎力相助，让我能在紧张的timetable下顺利通过考核，</p><p>  在此致以诚挚的感谢。</p></blockquote><h1 id="金星"><a href="#金星" class="headerlink" title="金星"></a>金星</h1><p>​    Our neighboring planets Venus has fascinated and inspired different cultures throughout history.</p><p>从历史的角度上纵观金星，她的文化令人着迷，激励人心，与众不同。</p><pre><code> It is named after the Roman goddess of love beauty and fertility and can often be seen glistening as one of the brightest objects in the night sky.</code></pre><p>金星以罗马爱神，美神，以及执掌生育的女神维纳斯命名。</p><p>每当黎明时分，我们抬头仰望星空时，总能与一颗闪闪发光的星星不期而遇—-金星，它是夜空中最明亮的行星之一。</p><pre><code> It is sometimes referred to as Earth&amp;apos;s twin sister due to its similar size, composition mass and proximity to the Sun,</code></pre><p>金星被视为地球的姐妹星，因为她的大小，组成成分，质量均与地球相仿，并且接近太阳。</p><p> but this is where the similarities end.</p><p>但她与地球的相似之处仅此而已。</p><p>​     Because modern observations of Venus have revealed a strange almost hellish world that is shrouded in a dense complicated atmosphere that is mostly made up of carbon dioxide.</p><p>现代观测手段为我们揭露了一个在稠密的二氧化碳形成的大气层笼罩之下，地狱一般的世界。</p><pre><code> This blanket of thick atmosphere sits around 40 miles or 64 kilometres above the planet&amp;apos;s surface blocking our view of what lies beneath the cloud tops.</code></pre><p>这个大气层毯子在金星表面上方40英里或64千米的地方悬挂着，阻挡了我们对云层下方的观察。</p><pre><code> However since the 1960s astronomers have used powerful radar signals from radio telescopes on earth and satellites orbiting Venus to penetrate the clouds and map the planets resulting in images that reveal the mysterious Venusian surface.</code></pre><p>然而，自20世纪60年代以来，天文学家利用来自地球上射电望远镜和环绕金星的卫星的强大雷达信号，穿透云层，绘制金星地图，从而拍摄出神秘的金星表面的图像。</p><pre><code> But it&amp;apos;s not just from above that we have been able to observe our planetary neighbor because thanks to a series of probes named Venera that were launched by the Soviet Union in the 1970s and 80s .</code></pre><p>但是这并不表示通过上述方式我们已经能够观察到我们的行星邻居，因为多亏了前苏联在20世纪70年代和80年代发射的一系列名为Venera的探测器。</p><p>​    The landscape of Venus was captured and revealed to us for the first time throughout the program 13 probes successfully reached Venus while transmitting data back to earth.</p><p>在整个计划中，13个探测器成功抵达金星并且成功传输数据返回地球，我们第一次捕获了金星的景观，揭开了金星的神秘面纱。</p><p>​     Ain´t landed successfully on the surface but only four were able to return photographs providing us with a glimpse of what is hiding beneath the thick Venusian cloud tops.</p><p>然而并非所有探测器都能在金星表面成功着陆，最终只有4个探测器返回了照片，让我们有幸瞥见笼罩在厚重云层下的金星原貌。</p><pre><code> The study of Venus has revealed its surface to be completely inhospitable for life.</code></pre><p>有关金星的研究表明她的表面对生命极度的不友好.。</p><p>​     As we know it it is a hot and extremely dry place with temperatures that rise to around four hundred and sixty-five degrees Celsius or eight hundred and seventy degrees Fahrenheit.</p><p>正如我们所知，这是一个炎热且极度干燥的地方，气温上升到约四百六十五摄氏度或八百七十华氏度。</p><p>​     Because the planet suffers from the runaway greenhouse effect which is caused by the planets thick atmosphere trapping Heat.</p><p>因为行星的表面遭受着失控的温室效应，这种效应是由金星厚重的大气层诱捕热引起的。</p><p>​     It is one of the hottest places in the solar system.</p><p>金星是太阳系最热的地方之一。</p><pre><code> The atmosphere results so extremely dense if you were able to stand on this planet you would experience pressures of up to 92 bar which is similar to being 3,000 feet or 914 meters underwater.</code></pre><p>金星的大气层如此稠密，如果你有机会站在金星表面，你将经历高达92个标准大气压的压强，就如同你潜入3000英尺深或914米的水中感受到的水压。（可能伪科学）</p><pre><code> The deformed Venusian landscape is mainly covered with ancient lava flows that have created flat smooth Plains.</code></pre><p>变形的金星景观主要覆盖古老的熔岩流，最终形成了平坦光滑的平原。</p><p>​     however several large mountains and volcanoes are also scattered across this hellish surface such as the planet&apos;s tallest mountain Maxwell Monte&apos;s, a natural structure that is seven miles or 11 kilometers high making it&apos;s bigger than Mount Everest within the dense clouds above lightning.<br> 变形的金星景观主要覆盖古老的熔岩流，最终形成了平坦光滑的平原。然而，一些高山和火山散布在这地狱般世界的表面，例如 <a href="https://nadc.china-vo.org/astrodict/termdetails?id=23546">麦克斯韦山脉</a>———金星最高山脉，高7英里或11公里，耸入闪电密云中，甚至比珠穆朗玛峰还要高。</p>]]></content>
      
      
      <categories>
          
          <category> 天文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 🌟所念皆星河🌌 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Day4</title>
      <link href="2021/04/20/day4/"/>
      <url>2021/04/20/day4/</url>
      
        <content type="html"><![CDATA[<h1 id="Day4"><a href="#Day4" class="headerlink" title="Day4"></a>Day4</h1><p>2018年6月真题—-精听训练</p><p>Passage 1</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/44390A2A8D251C8C7055AADA3D9D00DC.jpg" alt="img"></p><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><ul><li>  outweight—-胜过</li><li>  pysical drive —-驱动力</li></ul><p>在四月里，要保持开心。</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/D906483BE783746CF68CCDFB9E317D3B.jpg" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day3</title>
      <link href="2021/04/18/Day3/"/>
      <url>2021/04/18/Day3/</url>
      
        <content type="html"><![CDATA[<h1 id="Day3-学习打卡"><a href="#Day3-学习打卡" class="headerlink" title="Day3 学习打卡"></a>Day3 学习打卡</h1><p>2018年6月真题—-精听训练</p><p>News report 3</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/FF706AC260D465F3EE37BB1E19A4F509.jpg" alt="img"></p><p>学习总结:</p><ul><li>连读听不出来：<ul><li>  and as tall as</li><li>  for up to</li><li>  and emitting</li><li>  there’s still</li><li>  pass through——-成功</li></ul></li><li>其他的一些短语<ul><li>  extra leg room—–更大的空间</li></ul></li></ul><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/FF92C5C9988FEBBC14717E59A3487D6F.jpg" alt="img"></p><p>在穷得只剩下梦想的时候，你一定要比别人努力。</p>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>day2</title>
      <link href="2021/04/18/day2/"/>
      <url>2021/04/18/day2/</url>
      
        <content type="html"><![CDATA[<h1 id="Day2-学习打卡"><a href="#Day2-学习打卡" class="headerlink" title="Day2 学习打卡"></a>Day2 学习打卡</h1><p>2018年6月真题—-精听训练</p><p>News report 2</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/day2.jpg" alt="day2"></p><p>读不在三更五鼓，功只怕一曝十寒。</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/685E47589D7E980E05E9EDDE20430764.jpg" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="2021/04/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
      <url>2021/04/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><h2 id="1-1-1初识"><a href="#1-1-1初识" class="headerlink" title="1.1 .1初识"></a>1.1 .1初识</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>基本概念：</p><ul><li><p>网络：把许多计算机连接在一起。</p></li><li><p>互联网：把许多网络通过路由器连接在一起。</p></li><li><p>与互联网相连的计算机常称为主机。</p></li><li><p>计算机网络：是一个将分散的、具有独立功能的计算机系统（iOS，Android，Windows，masos），通过通信设备（路由器）与线路连接起来，由功能完善的软件实现资源共享和信息传递。</p></li></ul><p><strong>计算机网络是<code>互联</code>的、<code>自治</code>的计算机集合。</strong></p><p>互联-互联互通。</p><p>自治-无主从关系</p><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>1.数据通信（连通性）☆☆</p><p>2.资源共享   （硬件，软件，数据）☆</p><p>3.分布式处理（多台计算机各自承担同一工作任务的不同部分）</p><p>4.提高可靠性 （替代）</p><p>5.负载均衡</p><p>……</p><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><p>1.组成部分：硬件、软件、协议</p><p>2.工作方式：</p><p>————–边缘部分（C/S方式、P2P方式）</p><p>————–核心部分 为边缘部分</p><p>3.功能组成：</p><ul><li>通信子网 实现数据通信</li><li>资源子网 实现资源共享/数据处理<img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="D:\newblog\blerblog\themes\butterfly\source\noteimg\jsjwljg.png" alt="jsjwljg"></li></ul><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>1.按分布范围分 ：</p><p>广域网WAN,（交换技术）</p><p>城域网MAN.</p><p>局域网LAN（校园网是由多个局域网连接起来的）（广播技术）</p><p>个人区域网PAN</p><p>2.按使用者分</p><ul><li>共用网（电信、移动）</li><li>专用网（政府、军队、银行）</li></ul><p>3.按交换技术分：</p><ul><li>电路交换</li><li>报文交换</li><li>分组交换</li></ul><p>4.按照拓扑结构分：</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/tpjg.png" alt="tpjg"></p><p>网状结构通常应用于广域网</p><p>5.按照传输技术分：</p><ul><li>广播式网络 共享公共通信信道</li><li>点对点网络 使用<strong>分组存储转发</strong>和<strong>路由选择</strong>机制</li></ul><p>思维导图：</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/jswwlswdt.jpg" alt="jswwlswdt"></p><h2 id="1-1-2-标准化工作及相关组织"><a href="#1-1-2-标准化工作及相关组织" class="headerlink" title="1.1.2 标准化工作及相关组织"></a>1.1.2 标准化工作及相关组织</h2><h3 id="相关组织"><a href="#相关组织" class="headerlink" title="相关组织"></a>相关组织</h3><p><strong>国际标准化组织 ISO</strong> ——————-OSI参考模型、HDLC协议</p><p><strong>国际电信联盟 ITU</strong>    ——————–指定通信规则</p><p><strong>国际电气电子工程师协会 IEEE</strong> —–学术机构、IEEE802系列标准、5G</p><p><strong>internet工程任务组 IETF</strong>———— 负责因特网相关标准的指定 RFC XXXX</p><p>思维导图：</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/ZZ.jpg" alt="ZZ"></p><h3 id="分类-1"><a href="#分类-1" class="headerlink" title="分类"></a>分类</h3><p>法定标准：由权威机构指定的正式的。合法的标准 OSI</p><p>事实标准：某些公司长时间产品占主流，产品中的协议和技术成了标准。 TCP/IP</p><h3 id="RFC（Request-for-Comments）"><a href="#RFC（Request-for-Comments）" class="headerlink" title="RFC（Request for Comments）"></a>RFC（Request for Comments）</h3><p>————————因特网标准的形式</p><p>RFC要上升为因特网标准的四个阶段：</p><p>（1）<strong>因特网草案</strong>（Internet Draft）  这个阶段还不是RFC文档。（邮箱：rlc-editor @rfc-editor.org）</p><p>（2）<strong>建议标准</strong>（Proposed Standard）从这个阶段开始成为RFC文档。</p><p>（3）<strong>因特网标准</strong>（Internet Standard）</p><h2 id="1-1-3-速率相关的性能标准"><a href="#1-1-3-速率相关的性能标准" class="headerlink" title="1.1.3 速率相关的性能标准"></a>1.1.3 速率相关的性能标准</h2><h3 id="速率"><a href="#速率" class="headerlink" title="速率"></a>速率</h3><p>速率即<code>数据率</code>或称<code>数据传输率</code>或<code>比特率</code>。</p><p>连接在计算机网络上的<strong>主机</strong>在数字信道上传数据<strong>位数的速率</strong>。</p><p>单位是b/s,kb/s,Mb/s.Gb/s,Tb/s</p><table><thead><tr><th>单位</th><th>换算</th><th>存储容量</th></tr></thead><tbody><tr><td>千</td><td>1kb/s = 10^3b/s</td><td>1KB=2^10B=1024B=1024*8b</td></tr><tr><td>兆</td><td>1Mb/s = 10^3kb/s = 10^6b/s</td><td>1MB=2^10KB=1024KB</td></tr><tr><td>吉</td><td>1Gb/s = 10 ^3Mb/s = 10^6kb/s = 10^9b/s</td><td>1GB=2^10MB=1024MB</td></tr><tr><td>太</td><td>1Tb/s = 10^3Gb/s = 10^6Mb/s = 10^9kb/s = 10^12b/s</td><td>1TB=2^10GB=1024GB</td></tr></tbody></table><h3 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h3><p>在计算机网络中，表示网络的通信线路传送数据的能力，通常是单位时间内从网络中的某一点到另一点所能通过的“最高数据率”。</p><p>​    <code>(网络设备所支持的最高速度)</code>单位：b/s,kb/s,Mb/s.Gb/s<img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/dk.png" alt="dk"></p><h3 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h3><p>单位时间内通过某个网络（或信道、接口）的数据量。单位b/s,kb/s,Mb/s等。</p><p>吞吐量手网络的带宽或网络的额定频率的限制。</p><h2 id="1-1-4-时延、时延带宽积、RTT和利用率"><a href="#1-1-4-时延、时延带宽积、RTT和利用率" class="headerlink" title="1.1.4 时延、时延带宽积、RTT和利用率"></a>1.1.4 时延、时延带宽积、RTT和利用率</h2><h3 id="时延"><a href="#时延" class="headerlink" title="时延"></a>时延</h3><p>指数据（报文/分组/比特流）从网络（or链路）的一端传送到另一端所需的时间。也叫延迟或迟延。</p><p>单位：s</p><p>分类：</p><table><thead><tr><th>发送时延</th><th>传播时延</th><th>排队时延</th><th>处理时延</th></tr></thead><tbody><tr><td>从发送分组的第一个比特算起，到该分组的最后一个比特发送完毕所需的时间</td><td>取决于电磁波传播速度和链路长度</td><td>等待输出/人链路可用</td><td>检错、找出口</td></tr><tr><td>发送时延=数据长度/信道宽度（发送速率）</td><td>=信道长度/电磁波在此信道上的传播速率</td><td></td><td></td></tr></tbody></table><p>高速链路：发送速率提高</p><h3 id="时延带宽积"><a href="#时延带宽积" class="headerlink" title="时延带宽积"></a>时延带宽积</h3><p>时延带宽积=传播时延×带宽</p><p>​       bit                 s          b/s</p><p>又称为：比特为单位的链路长度</p><p>即：“某段链路现在有多少比特”   <code>容量</code></p><h3 id="往返时延RTT"><a href="#往返时延RTT" class="headerlink" title="往返时延RTT"></a>往返时延RTT</h3><p>从发送方发送数据开始，到发送方接受方的确认（接收方收到数据后立即发送确认），总共经历的时延</p><p><strong>RTT越大，在收到确认之前，可以发送的数据越多。</strong></p><h4 id="如何查询往返时延"><a href="#如何查询往返时延" class="headerlink" title="如何查询往返时延"></a>如何查询往返时延</h4><p>在cmd命令行中输入ping命令：</p><p>eg：ping <a href="http://www.baidu.com/">www.baidu.com</a></p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/ping.png" alt="ping"></p><p>时延最短33ms，最长37ms，平均34ms</p><h4 id="RTT包括"><a href="#RTT包括" class="headerlink" title="RTT包括"></a>RTT包括</h4><ul><li>  往返传播时延=传播时延*2</li><li>  末端处理时间</li></ul><h3 id="利用率"><a href="#利用率" class="headerlink" title="利用率"></a>利用率</h3><ul><li>  信道利用率=有数据通过时间/（有+无）数据通过时间</li><li>  网络利用率=信道利用率加权平均值</li></ul><h4 id="时延和利用率的关系"><a href="#时延和利用率的关系" class="headerlink" title="时延和利用率的关系"></a>时延和利用率的关系</h4><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/shiyan.png" alt="shiyan"></p><p>从上图我们可以看出，当利用率趋近于1时，时延急剧增大，就像堵车，车道利用率达到最大，但车速十分慢，通过一定路程所需的时间变大。</p><h4 id="总结型思维导图"><a href="#总结型思维导图" class="headerlink" title="总结型思维导图"></a>总结型思维导图</h4><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/RTT.png" alt="RTT"></p><h2 id="1-2-1-分层结构"><a href="#1-2-1-分层结构" class="headerlink" title="1.2.1 分层结构"></a>1.2.1 分层结构</h2><h3 id="为什么要分层？"><a href="#为什么要分层？" class="headerlink" title="为什么要分层？"></a>为什么要分层？</h3><p>发送文件前要完成的工作：</p><ul><li>  发起通信的计算机必须将数据的通路进行激活。</li><li>  要告诉网络如何识别目的主机</li><li>  发起通信的计算机要查明目的主机是否开机，并且与网络连接正常</li><li>  发起通信的计算机要弄清楚，对方计算机中文件管理程序是否已经做好准备工作。</li><li>  确保差错和意外可以解决。</li><li>  ……</li></ul><p>这些问题分解成小问题，一个一个逐步解决。</p><h3 id="怎么分层？"><a href="#怎么分层？" class="headerlink" title="怎么分层？"></a>怎么分层？</h3><p>举个生活中的例子。</p><p>我要品尝一瓶葡萄酒，从网上买。</p><ul><li>  未包装葡萄酒（实体）（1）</li><li>  商家在葡萄酒周围塞满棉花（2）</li><li>  商家进行装箱并邮寄（3）</li><li>  我收到箱子后打开外箱（4）</li><li>  取走棉花（5）</li><li>  品尝葡萄酒（6）</li></ul><h4 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h4><p>每一层的活动元素叫做实体，如（1）、（6）都是酒。</p><p>（1）和（6）都在同一层，是<strong>对等实体</strong>。</p><h4 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h4><p>指一系列的规则或者约定。</p><p>比如二层的棉花如何塞，三层的葡萄酒应该如何装箱。</p><p>需要注意的是，协议是水平方向的。只有对等实体才有协议。</p><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><p>没两层关节位置叫做接口。</p><h4 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h4><p>每两层之间提供的东西叫做服务。</p><p>在计算机网络中，上层使用下层服务。换言之，即下级要为上级提供服务。</p><h4 id="分层基本原则"><a href="#分层基本原则" class="headerlink" title="分层基本原则"></a>分层基本原则</h4><ul><li>  各层之间相互<code>独立</code>，每层值实现一种相对独立的功能。</li><li>  每层之间<code>界面自然清晰</code>，易于理解，相互交流尽可能少。</li><li>  结构上可分割。每层都采用<code>最合适的技术</code>来实现。</li><li>  保持<code>下层</code>对<code>上层</code>的独立性，<strong>上层单向使用下层提供的服务</strong>。</li><li>  整个分层结构一个能促进标准化工作。</li></ul><h3 id="正式认识分层结构"><a href="#正式认识分层结构" class="headerlink" title="正式认识分层结构"></a>正式认识分层结构</h3><p>上面用通俗的语言对一些概念进行了粗糙的定义，接下来给出各个概念的标准化定义。</p><h4 id="实体-1"><a href="#实体-1" class="headerlink" title="实体"></a>实体</h4><p>第n层的活动元素称为n层实体。同一层的实体叫做<strong>对等实体</strong>.</p><h4 id="协议-1"><a href="#协议-1" class="headerlink" title="协议"></a>协议</h4><p>为进行网络中的<strong>对等实体</strong>数据交换而建立的规则、标准或约定称为网络协议。【水平】</p><ul><li>  语法：规定传输数据的格式</li><li>  语义：规定所要完成的功能</li><li>  同步：规定各种操作的顺序</li></ul><h4 id="接口-1"><a href="#接口-1" class="headerlink" title="接口"></a>接口</h4><p>也叫（访问服务点SAP）:上层使用下层服务的入口。</p><h4 id="服务-1"><a href="#服务-1" class="headerlink" title="服务"></a>服务</h4><p>下层为相邻上层提供的功能调用【垂直】</p><h4 id="SDU"><a href="#SDU" class="headerlink" title="SDU"></a>SDU</h4><p>SDU服务数据单元：为完成用户所要求的功能而应传送的数据。</p><h4 id="PCI"><a href="#PCI" class="headerlink" title="PCI"></a>PCI</h4><p>PCI协议控制信息：控制协议操作的信息。</p><h4 id="PDU"><a href="#PDU" class="headerlink" title="PDU"></a>PDU</h4><p>PDU协议数据单元：对等层次之间传送的数据单位。</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/PDU.png" alt="PDU"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语听力练习</title>
      <link href="2021/04/17/Day1/"/>
      <url>2021/04/17/Day1/</url>
      
        <content type="html"><![CDATA[<h1 id="英语精听练习"><a href="#英语精听练习" class="headerlink" title="英语精听练习"></a>英语精听练习</h1><p>别看了，这字太会辣眼睛。。。</p><h2 id="Day1-打卡"><a href="#Day1-打卡" class="headerlink" title="Day1 打卡"></a>Day1 打卡</h2><p>2018年6月真题</p><p>news report1：</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/day1.jpg" alt="day1"></p><p>值得注意的是：</p><ul><li>  written容易听成return</li><li>  back home连读听不出来</li><li>  记忆力不强 ，长句子记不住内容。</li></ul><p>贵在坚持(ง •̀_•́)ง！！！</p>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PTA C语言作业</title>
      <link href="2021/04/14/PTAC%E8%AF%AD%E8%A8%80%E4%BD%9C%E4%B8%9A/"/>
      <url>2021/04/14/PTAC%E8%AF%AD%E8%A8%80%E4%BD%9C%E4%B8%9A/</url>
      
        <content type="html"><![CDATA[<h1 id="复杂指针-指针数组-amp-多级指针-amp-函数指针"><a href="#复杂指针-指针数组-amp-多级指针-amp-函数指针" class="headerlink" title="复杂指针-指针数组&amp;多级指针&amp;函数指针"></a>复杂指针-指针数组&amp;多级指针&amp;函数指针</h1><h2 id="指定位置输出字符串"><a href="#指定位置输出字符串" class="headerlink" title="指定位置输出字符串"></a><strong>指定位置输出字符串</strong></h2><p>本题要求实现一个函数，对给定的一个字符串和两个字符，打印出给定字符串中从与第一个字符匹配的位置开始到与第二个字符匹配的位置之间的所有字符。</p><h3 id="函数接口定义："><a href="#函数接口定义：" class="headerlink" title="函数接口定义："></a>函数接口定义：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">match</span><span class="params">( <span class="keyword">char</span> *s, <span class="keyword">char</span> ch1, <span class="keyword">char</span> ch2 )</span></span>;</span><br></pre></td></tr></table></figure><p>函数<code>match</code>应打印<code>s</code>中从<code>ch1</code>到<code>ch2</code>之间的所有字符，并且返回<code>ch1</code>的地址。</p><h3 id="裁判测试程序样例："><a href="#裁判测试程序样例：" class="headerlink" title="裁判测试程序样例："></a>裁判测试程序样例：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXS 10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">match</span><span class="params">( <span class="keyword">char</span> *s, <span class="keyword">char</span> ch1, <span class="keyword">char</span> ch2 )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str[MAXS], ch_start, ch_end, *p;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s\n&quot;</span>, str);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%c %c&quot;</span>, &amp;ch_start, &amp;ch_end);</span><br><span class="line">    p = <span class="built_in">match</span>(str, ch_start, ch_end);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, p);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 你的代码将被嵌在这里 */</span></span><br></pre></td></tr></table></figure><h3 id="输入样例1："><a href="#输入样例1：" class="headerlink" title="输入样例1："></a>输入样例1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">program</span><br><span class="line">r g</span><br></pre></td></tr></table></figure><h3 id="输出样例1："><a href="#输出样例1：" class="headerlink" title="输出样例1："></a>输出样例1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rog</span><br><span class="line">rogram</span><br></pre></td></tr></table></figure><h3 id="输入样例2："><a href="#输入样例2：" class="headerlink" title="输入样例2："></a>输入样例2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">program</span><br><span class="line">z o</span><br></pre></td></tr></table></figure><h3 id="输出样例2："><a href="#输出样例2：" class="headerlink" title="输出样例2："></a>输出样例2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(空行)</span><br><span class="line">(空行)</span><br></pre></td></tr></table></figure><h3 id="输入样例3："><a href="#输入样例3：" class="headerlink" title="输入样例3："></a>输入样例3：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">program</span><br><span class="line">g z</span><br></pre></td></tr></table></figure><h3 id="输出样例3："><a href="#输出样例3：" class="headerlink" title="输出样例3："></a>输出样例3：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gram</span><br><span class="line">gram</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">match</span><span class="params">( <span class="keyword">char</span> *s, <span class="keyword">char</span> ch1, <span class="keyword">char</span> ch2 )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> *p=<span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(s)&amp;&amp;s[i]!=ch1;i++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line">p=&amp;s[i];<span class="comment">//保存子串的起始地址</span></span><br><span class="line"><span class="keyword">for</span>(;i&lt;<span class="built_in">strlen</span>(s);i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,s[i]);  <span class="comment">//一直输出直到等于ch2</span></span><br><span class="line"><span class="keyword">if</span>(s[i]==ch2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="查找子串"><a href="#查找子串" class="headerlink" title="查找子串"></a><strong>查找子串</strong></h2><p>本题要求实现一个字符串查找的简单函数。</p><h3 id="函数接口定义：-1"><a href="#函数接口定义：-1" class="headerlink" title="函数接口定义："></a>函数接口定义：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">search</span><span class="params">( <span class="keyword">char</span> *s, <span class="keyword">char</span> *t )</span></span>;</span><br></pre></td></tr></table></figure><p>函数<code>search</code>在字符串<code>s</code>中查找子串<code>t</code>，返回子串t在<code>s</code>中的首地址。若未找到，则返回NULL。</p><h3 id="裁判测试程序样例：-1"><a href="#裁判测试程序样例：-1" class="headerlink" title="裁判测试程序样例："></a>裁判测试程序样例：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXS 30</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">search</span><span class="params">(<span class="keyword">char</span> *s, <span class="keyword">char</span> *t)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ReadString</span><span class="params">( <span class="keyword">char</span> s[] )</span></span>; <span class="comment">/* 裁判提供，细节不表 */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s[MAXS], t[MAXS], *pos;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">ReadString</span>(s);</span><br><span class="line">    <span class="built_in">ReadString</span>(t);</span><br><span class="line">    pos = <span class="built_in">search</span>(s, t);</span><br><span class="line">    <span class="keyword">if</span> ( pos != <span class="literal">NULL</span> )</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, pos - s);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 你的代码将被嵌在这里 */</span></span><br></pre></td></tr></table></figure><h3 id="输入样例1：-1"><a href="#输入样例1：-1" class="headerlink" title="输入样例1："></a>输入样例1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The C Programming Language</span><br><span class="line">ram</span><br></pre></td></tr></table></figure><h3 id="输出样例1：-1"><a href="#输出样例1：-1" class="headerlink" title="输出样例1："></a>输出样例1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure><h3 id="输入样例2：-1"><a href="#输入样例2：-1" class="headerlink" title="输入样例2："></a>输入样例2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The C Programming Language</span><br><span class="line">bored</span><br></pre></td></tr></table></figure><h3 id="输出样例2：-1"><a href="#输出样例2：-1" class="headerlink" title="输出样例2："></a>输出样例2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">search</span><span class="params">(<span class="keyword">char</span> *s, <span class="keyword">char</span> *t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> lens = <span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="keyword">int</span> lent = <span class="built_in">strlen</span>(t);</span><br><span class="line"><span class="keyword">int</span> i,j,k=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> *p=<span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;lens;i++)</span><br><span class="line">&#123;</span><br><span class="line">j=i;</span><br><span class="line"><span class="keyword">while</span>(s[j] == t[k])</span><br><span class="line">&#123;</span><br><span class="line">j++;</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(k&gt;=lent)</span><br><span class="line">&#123;</span><br><span class="line">p=&amp;s[i];</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">k = <span class="number">0</span>; <span class="comment">//重置k=0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="找密码"><a href="#找密码" class="headerlink" title="找密码"></a><strong>找密码</strong></h2><p>在一个古堡的大门上有5行字符。其中隐藏着打开大门的密码。密码共有4位数字（0到9）。小明发现了一种找密码的方法：最后一行中的字符在第一行字符中出现的总次数是密码的第一个数字，依此类推。输入数据保证每行得到的数字在0到9之间。 请编写一个函数 decode帮助小明找出密码。</p><h3 id="函数接口定义：-2"><a href="#函数接口定义：-2" class="headerlink" title="函数接口定义："></a>函数接口定义：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">decode</span><span class="params">(<span class="keyword">char</span>**s)</span></span>;</span><br></pre></td></tr></table></figure><p>通过参数s向函数传递5行字符串，函数返回密码值。</p><h3 id="裁判测试程序样例：-2"><a href="#裁判测试程序样例：-2" class="headerlink" title="裁判测试程序样例："></a>裁判测试程序样例：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 5</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">decode</span><span class="params">(<span class="keyword">char</span>**s)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> *s[M];</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> key;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;M; i++)&#123;</span><br><span class="line">        s[i] = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>((N+<span class="number">1</span>)*<span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line">        gets(s[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    key = decode(s);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%04d&quot;</span>,key);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;M; i++)&#123;</span><br><span class="line">        <span class="built_in">free</span>(s[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 您提交的代码将放置在这里 */</span></span><br></pre></td></tr></table></figure><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1111</span><br><span class="line">222</span><br><span class="line">33</span><br><span class="line">41</span><br><span class="line">2341</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4322</span><br></pre></td></tr></table></figure><p>参考答案：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">decode</span><span class="params">(<span class="keyword">char</span>**s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i,j,k,t;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">t=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="built_in">strlen</span>(s[i]);j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;<span class="built_in">strlen</span>(s[<span class="number">4</span>]);k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i][j]==s[<span class="number">4</span>][k])</span><br><span class="line">&#123;</span><br><span class="line">t++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sum=sum*<span class="number">10</span>+t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="分词并显示"><a href="#分词并显示" class="headerlink" title="分词并显示"></a><strong>分词并显示</strong></h2><p>程序的功能是：调用Input函数读入最多80个字符，要求字符串中只保留字母和空格，遇到读满或者回车结束读入字符，空格用于分隔单词。请将字符串中用空格分隔的单词在屏幕上输出来。 要求用指针完成函数中各参数的传递与访问，自定义函数头和函数体中不得出现数组下标形式的表示法。</p><h3 id="函数接口定义：-3"><a href="#函数接口定义：-3" class="headerlink" title="函数接口定义："></a>函数接口定义：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Input</span> <span class="params">( <span class="keyword">char</span> *str )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Split_Count</span> <span class="params">( <span class="keyword">char</span> *str,<span class="keyword">char</span> **pStr )</span></span>;</span><br></pre></td></tr></table></figure><h3 id="裁判测试程序样例：-3"><a href="#裁判测试程序样例：-3" class="headerlink" title="裁判测试程序样例："></a>裁判测试程序样例：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">/* userCode(&lt;80字符): 自定义函数之原型声明 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Input</span> <span class="params">( <span class="keyword">char</span> *str )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Split_Count</span> <span class="params">( <span class="keyword">char</span> *str,<span class="keyword">char</span> **pStr )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> String[<span class="number">81</span>]=&#123;<span class="number">0</span>&#125;, *pString[<span class="number">45</span>];</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>, count;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Input</span>(String);</span><br><span class="line"></span><br><span class="line">    count = <span class="built_in">Split_Count</span>(String,  pString);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d Words: &quot;</span>, count);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;count<span class="number">-1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;%s-&quot;</span>, pString[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, pString[count<span class="number">-1</span>]);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 请在这里填写答案 */</span></span><br></pre></td></tr></table></figure><h3 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Actions speak  louder than  words</span><br></pre></td></tr></table></figure><h3 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5 Words: Actions-speak-louder-than-words</span><br></pre></td></tr></table></figure><h3 id="输入样例：-2"><a href="#输入样例：-2" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12A good &amp;&amp; beginning is half  @done  </span><br></pre></td></tr></table></figure><h3 id="输出样例：-2"><a href="#输出样例：-2" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6 Words: A-good-beginning-is-half-done</span><br></pre></td></tr></table></figure><p>参考答案：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">Input</span> <span class="params">( <span class="keyword">char</span> *str )</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> <span class="keyword">char</span> x;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">x=getchar();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(x!=<span class="string">&#x27;\n&#x27;</span>&amp;&amp;i&lt;<span class="number">81</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((x&gt;=<span class="string">&#x27;a&#x27;</span>&amp;&amp;x&lt;=<span class="string">&#x27;z&#x27;</span>)||(x&gt;=<span class="string">&#x27;A&#x27;</span>&amp;&amp;x&lt;=<span class="string">&#x27;Z&#x27;</span>)||x==<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">str[i<span class="number">-1</span>]=x;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">x=getchar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*(str+i)=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Split_Count</span> <span class="params">( <span class="keyword">char</span> *str,<span class="keyword">char</span> **pStr )</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(*str)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(*str!=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">*(pStr+count)=str;</span><br><span class="line">count++;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">while</span>(*str)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(*str==<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">*str=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">str++;</span><br><span class="line">&#125;</span><br><span class="line">str++;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="链表复杂操作"><a href="#链表复杂操作" class="headerlink" title="链表复杂操作"></a>链表复杂操作</h1><h2 id="链表逆置"><a href="#链表逆置" class="headerlink" title="链表逆置"></a><strong>链表逆置</strong></h2><p>本题要求实现一个函数，将给定单向链表逆置，即表头置为表尾，表尾置为表头。链表结点定义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">struct ListNode &#123;</span><br><span class="line">    int data;</span><br><span class="line">    struct ListNode *next;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="函数接口定义：-4"><a href="#函数接口定义：-4" class="headerlink" title="函数接口定义："></a>函数接口定义：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">struct ListNode *<span class="title">reverse</span><span class="params">( struct ListNode *head )</span></span>;</span><br></pre></td></tr></table></figure><p>其中<code>head</code>是用户传入的链表的头指针；函数<code>reverse</code>将链表<code>head</code>逆置，并返回结果链表的头指针。</p><h3 id="裁判测试程序样例：-4"><a href="#裁判测试程序样例：-4" class="headerlink" title="裁判测试程序样例："></a>裁判测试程序样例：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">struct ListNode *<span class="title">createlist</span><span class="params">()</span></span>; <span class="comment">/*裁判实现，细节不表*/</span></span><br><span class="line"><span class="function">struct ListNode *<span class="title">reverse</span><span class="params">( struct ListNode *head )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printlist</span><span class="params">( struct ListNode *head )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">p</span> =</span> head;</span><br><span class="line">     <span class="keyword">while</span> (p) &#123;</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, p-&gt;data);</span><br><span class="line">           p = p-&gt;next;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>  *<span class="title">head</span>;</span></span><br><span class="line"></span><br><span class="line">    head = <span class="built_in">createlist</span>();</span><br><span class="line">    head = <span class="built_in">reverse</span>(head);</span><br><span class="line">    <span class="built_in">printlist</span>(head);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 你的代码将被嵌在这里 */</span></span><br></pre></td></tr></table></figure><h3 id="输入样例：-3"><a href="#输入样例：-3" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 2 3 4 5 6 -1</span><br></pre></td></tr></table></figure><h3 id="输出样例：-3"><a href="#输出样例：-3" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6 5 4 3 2 1 </span><br></pre></td></tr></table></figure><p>参考答案：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">struct ListNode *<span class="title">reverse</span><span class="params">( struct ListNode *head )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">p</span>=</span>head,*q=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">newHead</span>=</span>(struct ListNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct ListNode));</span><br><span class="line">    newHead-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(p)</span><br><span class="line">    &#123;</span><br><span class="line">        q=p-&gt;next;<span class="comment">//保持p，q一前一后</span></span><br><span class="line">        p-&gt;next=newHead-&gt;next;<span class="comment">//头插法</span></span><br><span class="line">        newHead-&gt;next=p;</span><br><span class="line">        p=q;<span class="comment">//移动p</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newHead-&gt;next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链表拼接"><a href="#链表拼接" class="headerlink" title="链表拼接"></a><strong>链表拼接</strong></h2><p>本题要求实现一个合并两个有序链表的简单函数。链表结点定义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">struct ListNode &#123;</span><br><span class="line">    int data;</span><br><span class="line">    struct ListNode *next;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="函数接口定义：-5"><a href="#函数接口定义：-5" class="headerlink" title="函数接口定义："></a>函数接口定义：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">struct ListNode *<span class="title">mergelists</span><span class="params">(struct ListNode *list1, struct ListNode *list2)</span></span>;</span><br></pre></td></tr></table></figure><p>其中<code>list1</code>和<code>list2</code>是用户传入的两个按<code>data</code>升序链接的链表的头指针；函数<code>mergelists</code>将两个链表合并成一个按<code>data</code>升序链接的链表，并返回结果链表的头指针。</p><h3 id="裁判测试程序样例：-5"><a href="#裁判测试程序样例：-5" class="headerlink" title="裁判测试程序样例："></a>裁判测试程序样例：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">struct ListNode *<span class="title">createlist</span><span class="params">()</span></span>; <span class="comment">/*裁判实现，细节不表*/</span></span><br><span class="line"><span class="function">struct ListNode *<span class="title">mergelists</span><span class="params">(struct ListNode *list1, struct ListNode *list2)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printlist</span><span class="params">( struct ListNode *head )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">p</span> =</span> head;</span><br><span class="line">     <span class="keyword">while</span> (p) &#123;</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, p-&gt;data);</span><br><span class="line">           p = p-&gt;next;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>  *<span class="title">list1</span>, *<span class="title">list2</span>;</span></span><br><span class="line"></span><br><span class="line">    list1 = <span class="built_in">createlist</span>();</span><br><span class="line">    list2 = <span class="built_in">createlist</span>();</span><br><span class="line">    list1 = <span class="built_in">mergelists</span>(list1, list2);</span><br><span class="line">    <span class="built_in">printlist</span>(list1);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 你的代码将被嵌在这里 */</span></span><br></pre></td></tr></table></figure><h3 id="输入样例：-4"><a href="#输入样例：-4" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 3 5 7 -1</span><br><span class="line">2 4 6 -1</span><br></pre></td></tr></table></figure><h3 id="输出样例：-4"><a href="#输出样例：-4" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 2 3 4 5 6 7 </span><br></pre></td></tr></table></figure><p>参考答案：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">struct ListNode *<span class="title">mergelists</span><span class="params">(struct ListNode *list1, struct ListNode *list2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*整体思路：</span></span><br><span class="line"><span class="comment">    **重新申请一个新的内存空间，在新的内存上把两张旧表的数据加上去</span></span><br><span class="line"><span class="comment">    **三个大的情况：第一两表均不为空，此时比较两张表的数据看看谁的数据更加小</span></span><br><span class="line"><span class="comment">                   表二为空（或指针已经移动到空的地方了）</span></span><br><span class="line"><span class="comment">                   表一为空（或指针已经移动到空的地方了）</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">list</span>=</span>(struct ListNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct ListNode));</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">p</span>=</span><span class="built_in">list</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(list1&amp;&amp;list2)<span class="comment">//</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(list1-&gt;data&lt;list2-&gt;data)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">list</span>-&gt;next=list1;<span class="comment">//让新的空头结点的下一个指向表1</span></span><br><span class="line">            list1=list1-&gt;next;<span class="comment">//移动表一</span></span><br><span class="line">            <span class="built_in">list</span>=<span class="built_in">list</span>-&gt;next;<span class="comment">//移动新的表的指针</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">list</span>-&gt;next=list2;</span><br><span class="line">            list2=list2-&gt;next;</span><br><span class="line">            <span class="built_in">list</span>=<span class="built_in">list</span>-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(list1)</span><br><span class="line">    &#123;</span><br><span class="line">            <span class="built_in">list</span>-&gt;next=list1;</span><br><span class="line">            list1=list1-&gt;next;</span><br><span class="line">            <span class="built_in">list</span>=<span class="built_in">list</span>-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(list2)</span><br><span class="line">    &#123;</span><br><span class="line">            <span class="built_in">list</span>-&gt;next=list2;</span><br><span class="line">            list2=list2-&gt;next;</span><br><span class="line">            <span class="built_in">list</span>=<span class="built_in">list</span>-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p-&gt;next; <span class="comment">//空头结点，所以要返回空头结点的下一个</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="逆序数据建立链表"><a href="#逆序数据建立链表" class="headerlink" title="逆序数据建立链表"></a><strong>逆序数据建立链表</strong></h2><p>本题要求实现一个函数，按输入数据的逆序建立一个链表。</p><h3 id="函数接口定义：-6"><a href="#函数接口定义：-6" class="headerlink" title="函数接口定义："></a>函数接口定义：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">struct ListNode *<span class="title">createlist</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>函数<code>createlist</code>利用<code>scanf</code>从输入中获取一系列正整数，当读到−1时表示输入结束。按输入数据的逆序建立一个链表，并返回链表头指针。链表节点结构定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="裁判测试程序样例：-6"><a href="#裁判测试程序样例：-6" class="headerlink" title="裁判测试程序样例："></a>裁判测试程序样例：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">struct ListNode *<span class="title">createlist</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">p</span>, *<span class="title">head</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    head = <span class="built_in">createlist</span>();</span><br><span class="line">    <span class="keyword">for</span> ( p = head; p != <span class="literal">NULL</span>; p = p-&gt;next )</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, p-&gt;data);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 你的代码将被嵌在这里 */</span></span><br></pre></td></tr></table></figure><h3 id="输入样例：-5"><a href="#输入样例：-5" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 2 3 4 5 6 7 -1</span><br></pre></td></tr></table></figure><h3 id="输出样例：-5"><a href="#输出样例：-5" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7 6 5 4 3 2 1</span><br></pre></td></tr></table></figure><p>参考答案：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">struct ListNode *<span class="title">createlist</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//头插法</span></span><br><span class="line">    <span class="comment">//这里注意头插法要给头结点分配内存空间</span></span><br><span class="line">    <span class="keyword">int</span> data=<span class="number">-1</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">head</span>=</span>(struct ListNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct ListNode)),*cur=<span class="literal">NULL</span>;</span><br><span class="line">    head-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;data)&amp;&amp;data!=<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cur=(struct ListNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct ListNode));</span><br><span class="line">        cur-&gt;data=data;</span><br><span class="line">        <span class="comment">//cur-&gt;next=NULL;</span></span><br><span class="line">        cur-&gt;next=head-&gt;next;<span class="comment">//第一次执行此语句时，把NULL赋值给cur-&gt;next，其他的次不是</span></span><br><span class="line">        head-&gt;next=cur;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head-&gt;next;<span class="comment">//空头指针，所以返回的是下一个结点（有数据）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单链表结点删除"><a href="#单链表结点删除" class="headerlink" title="单链表结点删除"></a><strong>单链表结点删除</strong></h2><p>本题要求实现两个函数，分别将读入的数据存储为单链表、将链表中所有存储了某给定值的结点删除。链表结点定义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">struct ListNode &#123;</span><br><span class="line">    int data;</span><br><span class="line">    ListNode *next;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="函数接口定义：-7"><a href="#函数接口定义：-7" class="headerlink" title="函数接口定义："></a>函数接口定义：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">struct ListNode *<span class="title">readlist</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">struct ListNode *<span class="title">deletem</span><span class="params">( struct ListNode *L, <span class="keyword">int</span> m )</span></span>;</span><br></pre></td></tr></table></figure><p>函数<code>readlist</code>从标准输入读入一系列正整数，按照读入顺序建立单链表。当读到−1时表示输入结束，函数应返回指向单链表头结点的指针。</p><p>函数<code>deletem</code>将单链表<code>L</code>中所有存储了<code>m</code>的结点删除。返回指向结果链表头结点的指针。</p><h3 id="裁判测试程序样例：-7"><a href="#裁判测试程序样例：-7" class="headerlink" title="裁判测试程序样例："></a>裁判测试程序样例：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">struct ListNode *<span class="title">readlist</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">struct ListNode *<span class="title">deletem</span><span class="params">( struct ListNode *L, <span class="keyword">int</span> m )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printlist</span><span class="params">( struct ListNode *L )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">p</span> =</span> L;</span><br><span class="line">     <span class="keyword">while</span> (p) &#123;</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, p-&gt;data);</span><br><span class="line">           p = p-&gt;next;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">L</span> =</span> <span class="built_in">readlist</span>();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">    L = <span class="built_in">deletem</span>(L, m);</span><br><span class="line">    <span class="built_in">printlist</span>(L);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 你的代码将被嵌在这里 */</span></span><br></pre></td></tr></table></figure><h3 id="输入样例：-6"><a href="#输入样例：-6" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10 11 10 12 10 -1</span><br><span class="line">10</span><br></pre></td></tr></table></figure><h3 id="输出样例：-6"><a href="#输出样例：-6" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">11 12</span><br></pre></td></tr></table></figure><p>参考答案：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">struct ListNode *<span class="title">readlist</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/*int data=0;</span></span><br><span class="line"><span class="comment">struct ListNode *head=NULL,*cur=NULL,*tail=NULL;</span></span><br><span class="line"><span class="comment">//head=(struct ListNode *)malloc(sizeof(struct ListNode));</span></span><br><span class="line"><span class="comment">head-&gt;next=NULL;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">while(scanf(&quot;%d&quot;,&amp;data)&amp;&amp;data!=-1)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">cur=(struct ListNode*)malloc(sizeof(struct ListNode));</span></span><br><span class="line"><span class="comment">        if(cur!=NULL)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            cur-&gt;data=data;</span></span><br><span class="line"><span class="comment">    cur-&gt;next=NULL;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">if(head==NULL)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">head=cur;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">else</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">tail-&gt;next=cur;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">tail=cur;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">return head;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> data=<span class="number">0</span>; </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">head</span>=</span><span class="literal">NULL</span>,*tail=<span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;data)&amp;&amp;data!=<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">cur</span>=</span>(struct ListNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct ListNode));</span><br><span class="line">cur-&gt;data=data;</span><br><span class="line">cur-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(head==<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">head=tail=cur;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">tail-&gt;next=cur;</span><br><span class="line">            tail=cur;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//scanf(&quot;%d&quot;,&amp;data);</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">/*        int t;</span></span><br><span class="line"><span class="comment">    struct ListNode *head=NULL,*tail=NULL;</span></span><br><span class="line"><span class="comment">    scanf(&quot;%d&quot;,&amp;t);</span></span><br><span class="line"><span class="comment">    while(t != -1)&#123;</span></span><br><span class="line"><span class="comment">        struct ListNode *temp = (struct ListNode *)malloc(sizeof(struct ListNode));</span></span><br><span class="line"><span class="comment">        temp-&gt;data = t;</span></span><br><span class="line"><span class="comment">        temp-&gt;next = NULL;</span></span><br><span class="line"><span class="comment">        if(tail == NULL)</span></span><br><span class="line"><span class="comment">            head = tail = temp;</span></span><br><span class="line"><span class="comment">        else&#123;</span></span><br><span class="line"><span class="comment">            tail-&gt;next = temp;</span></span><br><span class="line"><span class="comment">            tail = temp;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        scanf(&quot;%d&quot;,&amp;t);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return head;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">struct ListNode *<span class="title">deletem</span><span class="params">( struct ListNode *L, <span class="keyword">int</span> m )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> *<span class="title">p</span>=</span><span class="literal">NULL</span>,*q=<span class="literal">NULL</span>,*head=<span class="literal">NULL</span>;</span><br><span class="line">    head=L;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(head&amp;&amp;head-&gt;data==m)</span><br><span class="line">    &#123;</span><br><span class="line">        p=head-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(head);</span><br><span class="line">        head=p;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">q = head;<span class="comment">//初始化。q，p两个指针一前一后</span></span><br><span class="line">p = head-&gt;next;</span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(p-&gt;data == m)<span class="comment">//找到x结点，删除这个结点，并提前返回ture</span></span><br><span class="line">&#123;</span><br><span class="line">q-&gt;next = p-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">            <span class="comment">//p=q-&gt;next;</span></span><br><span class="line"><span class="comment">//return ture;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="comment">//p的data域不等于x，则继续向后找</span></span><br><span class="line">&#123;</span><br><span class="line">q = p;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*struct ListNode *p,*q;</span></span><br><span class="line"><span class="comment">    //p=L;</span></span><br><span class="line"><span class="comment">    while(L&amp;&amp;L-&gt;data==m)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">            </span></span><br><span class="line"><span class="comment">            p=L;</span></span><br><span class="line"><span class="comment">            L=L-&gt;next;</span></span><br><span class="line"><span class="comment">            free(p);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    p=L;</span></span><br><span class="line"><span class="comment">    while(p&amp;&amp;p-&gt;next)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        while(p-&gt;next&amp;&amp;p-&gt;next-&gt;data==m)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            q=p-&gt;next;</span></span><br><span class="line"><span class="comment">            p-&gt;next=q-&gt;next;</span></span><br><span class="line"><span class="comment">            free(p);</span></span><br><span class="line"><span class="comment">            //p=p-&gt;next;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        p=p-&gt;next;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    return L;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="学生成绩链表处理"><a href="#学生成绩链表处理" class="headerlink" title="学生成绩链表处理"></a><strong>学生成绩链表处理</strong></h2><p>6-3 学生成绩链表处理 (20 分)</p><p>本题要求实现两个函数，一个将输入的学生成绩组织成单向链表；另一个将成绩低于某分数线的学生结点从链表中删除。</p><h3 id="函数接口定义：-8"><a href="#函数接口定义：-8" class="headerlink" title="函数接口定义："></a>函数接口定义：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">struct stud_node *<span class="title">createlist</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">struct stud_node *<span class="title">deletelist</span><span class="params">( struct stud_node *head, <span class="keyword">int</span> min_score )</span></span>;</span><br></pre></td></tr></table></figure><p>函数<code>createlist</code>利用<code>scanf</code>从输入中获取学生的信息，将其组织成单向链表，并返回链表头指针。链表节点结构定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stud_node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span>              num;      <span class="comment">/*学号*/</span></span><br><span class="line">    <span class="keyword">char</span>             name[<span class="number">20</span>]; <span class="comment">/*姓名*/</span></span><br><span class="line">    <span class="keyword">int</span>              score;    <span class="comment">/*成绩*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stud_node</span> *<span class="title">next</span>;</span>    <span class="comment">/*指向下个结点的指针*/</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>输入为若干个学生的信息（学号、姓名、成绩），当输入学号为0时结束。</p><p>函数<code>deletelist</code>从以<code>head</code>为头指针的链表中删除成绩低于<code>min_score</code>的学生，并返回结果链表的头指针。</p><h3 id="裁判测试程序样例：-8"><a href="#裁判测试程序样例：-8" class="headerlink" title="裁判测试程序样例："></a>裁判测试程序样例：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stud_node</span> &#123;</span></span><br><span class="line">     <span class="keyword">int</span>    num;</span><br><span class="line">     <span class="keyword">char</span>   name[<span class="number">20</span>];</span><br><span class="line">     <span class="keyword">int</span>    score;</span><br><span class="line">     <span class="class"><span class="keyword">struct</span> <span class="title">stud_node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">struct stud_node *<span class="title">createlist</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">struct stud_node *<span class="title">deletelist</span><span class="params">( struct stud_node *head, <span class="keyword">int</span> min_score )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> min_score;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stud_node</span> *<span class="title">p</span>, *<span class="title">head</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    head = <span class="built_in">createlist</span>();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;min_score);</span><br><span class="line">    head = <span class="built_in">deletelist</span>(head, min_score);</span><br><span class="line">    <span class="keyword">for</span> ( p = head; p != <span class="literal">NULL</span>; p = p-&gt;next )</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %s %d\n&quot;</span>, p-&gt;num, p-&gt;name, p-&gt;score);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 你的代码将被嵌在这里 */</span></span><br></pre></td></tr></table></figure><h3 id="输入样例：-7"><a href="#输入样例：-7" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1 zhang 78</span><br><span class="line">2 wang 80</span><br><span class="line">3 li 75</span><br><span class="line">4 zhao 85</span><br><span class="line">0</span><br><span class="line">80</span><br></pre></td></tr></table></figure><h3 id="输出样例：-7"><a href="#输出样例：-7" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2 wang 80</span><br><span class="line">4 zhao 85</span><br></pre></td></tr></table></figure><p>参考答案：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">struct stud_node *<span class="title">createlist</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="comment">//char ch;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stud_node</span> *<span class="title">head</span>=</span><span class="literal">NULL</span>,*tail=<span class="literal">NULL</span>,*cur=<span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>((<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num)&amp;&amp;num!=<span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//ch=getchar();</span></span><br><span class="line">cur=(struct stud_node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct stud_node));</span><br><span class="line">cur-&gt;num=num;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s %d&quot;</span>,cur-&gt;name,&amp;cur-&gt;score);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(head==<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">head=tail=cur;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">tail-&gt;next=cur;</span><br><span class="line">tail=cur;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function">struct stud_node *<span class="title">deletelist</span><span class="params">( struct stud_node *head, <span class="keyword">int</span> min_score )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">sstruct stud_node *p=<span class="literal">NULL</span>,*q=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(head)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(head-&gt;score&lt;min_score)</span><br><span class="line">        &#123;</span><br><span class="line">            p=head;</span><br><span class="line">            head=head-&gt;next;</span><br><span class="line">            <span class="built_in">free</span>(p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(head==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    q=head;</span><br><span class="line">    p=head-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;score&lt;min_score)</span><br><span class="line">        &#123;</span><br><span class="line">            q-&gt;next=p-&gt;next;</span><br><span class="line">            <span class="built_in">free</span>(p);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            q=p;</span><br><span class="line">        &#125;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><h2 id="从文件读取字符串"><a href="#从文件读取字符串" class="headerlink" title="从文件读取字符串(*)"></a><strong>从文件读取字符串(*)</strong></h2><p>请编写函数，从文件中读取字符串。</p><h4 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型"></a>函数原型</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FGetStr</span><span class="params">(<span class="keyword">char</span> *str, <span class="keyword">int</span> size, FILE *file)</span></span>;</span><br></pre></td></tr></table></figure><p>说明：参数 str 为指示字符数组起始地址的指针，size 为数组尺寸，file 为文件指针。函数从文件输入的字符串(以换行符 ‘\n’ 结束)到字符数组中，并在字符末尾添加字符串结束标记 ‘\0’。显然，字符串的最大长度应为 size - 1，为字符串结束标记 ‘\0’ 预留空间。若用户输入的字符过多，则函数最多读取 size - 1 个字符，剩余字符仍留在缓冲区中，可以继续被后面的输入函数读取。</p><p>要求：不得把文件中的换行符 ‘\n’ 也保存到字符串中。</p><h4 id="裁判程序"><a href="#裁判程序" class="headerlink" title="裁判程序"></a>裁判程序</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FGetStr</span><span class="params">(<span class="keyword">char</span> *str, <span class="keyword">int</span> size, FILE *file)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE *f;</span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">10</span>], b[<span class="number">10</span>];</span><br><span class="line">    f = fopen(<span class="string">&quot;MyStr.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (f)</span><br><span class="line">    &#123;</span><br><span class="line">        FGetStr(a, <span class="number">10</span>, f);</span><br><span class="line">        FGetStr(b, <span class="number">10</span>, f);</span><br><span class="line">        <span class="built_in">puts</span>(a);</span><br><span class="line">        <span class="built_in">puts</span>(b);</span><br><span class="line">        fclose(f);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 你提交的代码将被嵌在这里 */</span></span><br></pre></td></tr></table></figure><p>创建文本文件 MyStr.txt，复制下面的内容。</p><ul><li>  MyStr.txt *</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Bob</span><br><span class="line">Mary</span><br></pre></td></tr></table></figure><h4 id="输出样例1"><a href="#输出样例1" class="headerlink" title="输出样例1"></a>输出样例1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Bob</span><br><span class="line">Mary</span><br></pre></td></tr></table></figure><p>修改文本文件 MyStr.txt，复制下面的内容。</p><ul><li>  MyStr.txt *</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Constantine</span><br></pre></td></tr></table></figure><h4 id="输出样例2"><a href="#输出样例2" class="headerlink" title="输出样例2"></a>输出样例2</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Constanti</span><br><span class="line">ne</span><br></pre></td></tr></table></figure><p>修改文本文件 MyStr.txt，复制下面的内容。</p><ul><li>  MyStr.txt *</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Francisco</span><br><span class="line">Stevenson</span><br></pre></td></tr></table></figure><h4 id="输出样例3"><a href="#输出样例3" class="headerlink" title="输出样例3"></a>输出样例3</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Francisco</span><br><span class="line">Stevenson</span><br></pre></td></tr></table></figure><p>参考答案：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FGetStr</span><span class="params">(<span class="keyword">char</span> *str, <span class="keyword">int</span> size, FILE *file)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    ch=fgetc(file);</span><br><span class="line">    <span class="keyword">while</span>(ch!=<span class="string">&#x27;\n&#x27;</span>&amp;&amp;i&lt;size<span class="number">-1</span>&amp;&amp;ch!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        str[i]=ch;</span><br><span class="line">        i++;</span><br><span class="line">        ch=fgetc(file);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch!=<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ungetc(ch,file);<span class="comment">//把多余的字符推回去        </span></span><br><span class="line">    &#125;</span><br><span class="line">    str[i]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CountWord</span><span class="params">(FILE *f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">0</span>, flag;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>((ch=fgetc(f))!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch&gt;=<span class="string">&#x27;a&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;z&#x27;</span>||ch&gt;=<span class="string">&#x27;A&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            flag=<span class="number">1</span>;<span class="comment">//判断是否有字母</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!(ch&gt;=<span class="string">&#x27;a&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;z&#x27;</span>||ch&gt;=<span class="string">&#x27;A&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;Z&#x27;</span>)&amp;&amp;flag==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            flag=<span class="number">0</span>;<span class="comment">//有字母的基础上遇到非字母字符，则前面的是一个单词</span></span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!(ch&gt;=<span class="string">&#x27;a&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;z&#x27;</span>||ch&gt;=<span class="string">&#x27;A&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;Z&#x27;</span>)&amp;&amp;flag==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;<span class="comment">//防止多个空格被重复记录</span></span><br><span class="line">        &#125;</span><br><span class="line">          </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(count==<span class="number">0</span>&amp;&amp;flag==<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(count==<span class="number">0</span>&amp;&amp;flag==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件读写操作"><a href="#文件读写操作" class="headerlink" title="文件读写操作"></a><strong>文件读写操作</strong></h2><p>编写函数，从给定的输入文本文件中按行读入，并按行写入给定的输出文件中。要求：1）去除每行的前导空格或制表符。2）每行前加行号。</p><h3 id="函数接口定义：-9"><a href="#函数接口定义：-9" class="headerlink" title="函数接口定义："></a>函数接口定义：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fileRW</span><span class="params">(FILE *fin,FILE *fout)</span></span>;</span><br></pre></td></tr></table></figure><p>其中<code>fin</code>和<code>fout</code> 都是用户传入的参数，分别是读入文件和输出文件的指针（已按要求打开）。</p><h3 id="裁判测试程序样例：-9"><a href="#裁判测试程序样例：-9" class="headerlink" title="裁判测试程序样例："></a>裁判测试程序样例：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fileRW</span><span class="params">(FILE *fin,FILE *fout)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> fname[<span class="number">20</span>];gets(fname);</span><br><span class="line">        FILE *fpr=fopen(fname,<span class="string">&quot;r&quot;</span>);</span><br><span class="line">      FILE *fpw=fopen(<span class="string">&quot;file2.txt&quot;</span>,<span class="string">&quot;w&quot;</span>);  </span><br><span class="line">        fileRW(fpr,fpw);</span><br><span class="line">        fclose(fpr);fclose(fpw);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 请在这里填写答案 */</span></span><br></pre></td></tr></table></figure><h3 id="输入样例：-8"><a href="#输入样例：-8" class="headerlink" title="输入样例："></a>输入样例：</h3><p>输入文件名：file1.cpp，其中内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">void fileW()&#123;</span><br><span class="line">    FILE *fp1&#x3D;fopen(&quot;myfile.data&quot;,&quot;w&quot;);</span><br><span class="line">    int i&#x3D;123;float x&#x3D;3.14159;</span><br><span class="line">    fprintf(fp1,&quot;%d,%5d,%5.3f\n&quot;,i,-i,x);</span><br><span class="line">    fprintf(stdout,&quot;%d,%5d,%5.3f\n&quot;,i,-i,x);</span><br><span class="line">    fclose(fp1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出样例：-8"><a href="#输出样例：-8" class="headerlink" title="输出样例："></a>输出样例：</h3><p>文件：file2.txt，其中内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1:void fileW()&#123;</span><br><span class="line">2:FILE *fp1&#x3D;fopen(&quot;myfile.data&quot;,&quot;w&quot;);</span><br><span class="line">3:int i&#x3D;123;float x&#x3D;3.14159;</span><br><span class="line">4:fprintf(fp1,&quot;%d,%5d,%5.3f\n&quot;,i,-i,x);</span><br><span class="line">5:fprintf(stdout,&quot;%d,%5d,%5.3f\n&quot;,i,-i,x);</span><br><span class="line">6:fclose(fp1);</span><br><span class="line">7:&#125;</span><br></pre></td></tr></table></figure><p>参考答案：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">void fileRW(FILE *fin,FILE *fout)</span><br><span class="line">&#123;</span><br><span class="line">    char ch;</span><br><span class="line">    int i&#x3D;1,j&#x3D;1;</span><br><span class="line">    </span><br><span class="line">    while(1)</span><br><span class="line">    &#123;</span><br><span class="line">        ch&#x3D;fgetc(fin);</span><br><span class="line">        if(i&#x3D;&#x3D;j&amp;&amp;ch!&#x3D;EOF)</span><br><span class="line">        &#123;</span><br><span class="line">            fprintf(fout,&quot;%d:&quot;,j++);</span><br><span class="line">            while(ch&#x3D;&#x3D;&#39; &#39;||ch&#x3D;&#x3D;&#39;\t&#39;)</span><br><span class="line">            &#123;</span><br><span class="line">                ch&#x3D;fgetc(fin);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if(ch&#x3D;&#x3D;&#39;\n&#39;)</span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        if(ch&#x3D;&#x3D;EOF)</span><br><span class="line">        &#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        fputc(ch,fout);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令行传参</title>
      <link href="2021/03/20/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BC%A0%E5%8F%82/"/>
      <url>2021/03/20/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BC%A0%E5%8F%82/</url>
      
        <content type="html"><![CDATA[<h1 id="命令行传参"><a href="#命令行传参" class="headerlink" title="命令行传参"></a>命令行传参</h1><h2 id="1-主函数默认参数"><a href="#1-主函数默认参数" class="headerlink" title="1 主函数默认参数"></a>1 主函数默认参数</h2><p>我们常见到的主函数形式往往是这样的:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;……&#125;</span><br></pre></td></tr></table></figure><p>这种主函数是不用传参的。</p><p>但是C语言规定了主函数有两种默认参数，其形式是这样的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br></pre></td></tr></table></figure><p>或者是这样的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br></pre></td></tr></table></figure><p>以上两种方式等价。</p><p>其中argc必须是整型数据，argv必须是字符型的指针数组。</p><blockquote><p>argc———向主函数传递的参数个数（程序员无需传入argc，由程序自动统计）</p></blockquote><blockquote><p>argv——–指针数组，指向字符型，由于第一个参数必须是exe执行文件，所以后面才是要传入的字符。各个参数之间用空格隔开。</p></blockquote><p>下面用一个简单的例子演示一下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(argc&gt;<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">++argv; <span class="comment">//指针移动</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,*argv);  <span class="comment">//输出字符串</span></span><br><span class="line">--argc; <span class="comment">//参数个数减少</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译成功以后，要对主函数进行传参。</p><blockquote><h3 id="在Dev编译环境下传参方法："><a href="#在Dev编译环境下传参方法：" class="headerlink" title="在Dev编译环境下传参方法："></a>在Dev编译环境下传参方法：</h3></blockquote><p>点击上方菜单栏<strong>运行</strong>（R）–&gt; <strong>参数</strong>（W）,然后出现这个窗口：</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="/noteimg/canshu.png"></p><p>向其中传入三个参数TEXT1 TEXT2 TEXT3,并点击确定。参数传入完毕。</p><p>运行程序即可，运行结果如下图：</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="/noteimg/canshujieguo.png"></p><blockquote><h3 id="在VC-6-0编译环境下传参方法："><a href="#在VC-6-0编译环境下传参方法：" class="headerlink" title="在VC++6.0编译环境下传参方法："></a>在VC++6.0编译环境下传参方法：</h3></blockquote><p>点击上方菜单栏Project—&gt;Settings—-&gt;Debug,在Program arguments中添加字符参数TEXT1 TEXT2 TEXT3，点击OK后，参数传递完毕。</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="/noteimg/VCcanshu.png"></p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="/noteimg/VCcanshu2.png"></p><p>接下来运行程序，结果如上图。</p><blockquote><h3 id="使用命令行进行传参"><a href="#使用命令行进行传参" class="headerlink" title="使用命令行进行传参"></a>使用命令行进行传参</h3></blockquote><p>快捷键Windows+R，输入cmd回车以后，</p><p>将之前编译后生成的.exe文件直接拖动到黑框框的输入位置，没错，就是直接拖动！！！当然也可以按照指定路径一个一个进入，但是拖动无疑是最简便的办法。</p><p>拖动成功以后，是这样的：</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="/noteimg/tuodong.png"></p><p>Then我们要传入字符串参数。因为temp1.exe本身就是main函数的第一个参数，所以我们是从argv[1]开始传入的，传入后并运行结果如下：</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="/noteimg/cmd.png"></p><h2 id="2-命令行实现四则运算"><a href="#2-命令行实现四则运算" class="headerlink" title="2 命令行实现四则运算"></a>2 命令行实现四则运算</h2><p>要求：</p><p>制作一简单的计算器，注意事项： 　　</p><p>1)需要计算的内容从命令行输入，格式为：执行文件 数1 op 数2，当命令行格式不正确(参数个数不为4)时，应报错。 　　</p><p>(2)op的取值范围为+、-、*、/、%，超出此范围则应报错。 　　</p><p><em>(3)数1和数2均为整数(int)，op为+、-、</em>时不考虑运算结果超出int型能表示的范围, op为/、%时不考虑除数为0的情况，但op为/时计算结果应保留2位小数。 　　</p><p>(4)程序的返回值(即由main函数return的值和程序使用exit终止运行时返回的值，也称退出代码)规定为： 　　　　</p><p>​                ①正常运行结束时，返回0　　</p><p>​                ②命令行格式不对返回1　　　</p><p>​                ③op超出范围时返回2</p><p>Way One:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">myatoi</span><span class="params">(<span class="keyword">char</span> *s)</span>  <span class="comment">//将字符型转化为数字型</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> flag=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(*s)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(*s==<span class="string">&#x27;-&#x27;</span>)  <span class="comment">//考虑负值的情况</span></span><br><span class="line">&#123;</span><br><span class="line">s++;</span><br><span class="line">flag=<span class="number">-1</span>;</span><br><span class="line">&#125; </span><br><span class="line">t=t*<span class="number">10</span>+*s-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">s++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> t*flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> op;</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line"><span class="keyword">double</span> result;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(argc != <span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;error!\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = myatoi(argv[<span class="number">1</span>]);  <span class="comment">//可以使用C语言库自带的atoi函数</span></span><br><span class="line">b = myatoi(argv[<span class="number">3</span>]);</span><br><span class="line">op = *argv[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(op==<span class="string">&#x27;+&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">result=(<span class="keyword">double</span>)(a+b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d + %d = %.2lf\n&quot;</span>,a,b,result);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">result=(<span class="keyword">double</span>)(a-b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d - %d = %.2lf\n&quot;</span>,a,b,result);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">result=(<span class="keyword">double</span>)(a*b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d * %d = %.2lf\n&quot;</span>,a,b,result);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">result=(<span class="keyword">double</span>)a/(<span class="keyword">double</span>)b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d / %d = %.2lf\n&quot;</span>,a,b,result);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;error!\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="/noteimg/cmdjieguo.png"></p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/cpp.jpg" alt="cpp"></p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于git clone时出现OpenSSL SSL_read的问题</title>
      <link href="2021/03/14/%E5%85%B3%E4%BA%8Egit-clone%E6%97%B6%E5%87%BA%E7%8E%B0OpenSSL-SSL-read%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>2021/03/14/%E5%85%B3%E4%BA%8Egit-clone%E6%97%B6%E5%87%BA%E7%8E%B0OpenSSL-SSL-read%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="git-clone时出现问题"><a href="#git-clone时出现问题" class="headerlink" title="git clone时出现问题"></a>git clone时出现问题</h1><p>最近我在github上git clone 时出现如下报错：</p><p>OpenSSL SSL_read: Connection was reset, errno 10054</p><p>然后打开github，发现无法打开github</p><p>解决历程如下：</p><p>（一）</p><p>在百度上查了一下，说是服务器的SSL证书没有经过第三方机构的签署，所以报错。</p><p>给出了解决方案：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.sslVerify “false”</span><br></pre></td></tr></table></figure><p>试了一下并没有任何改变，依然还是那个报错。</p><p>（二）</p><p>继续在浏览器上查找解决办法，说是让我在etc/hosts里面将有关github的代码删掉，半信半疑的我打开了etc/hosts，并没有找到有关github的相关代码。</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="/noteimg/error1.png"></p><p>（三）</p><p>重新设置SSH密钥，方法如下：</p><p>在git文件目录下打开git，</p><p>输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;your email&quot;</span><br></pre></td></tr></table></figure><p>一直回车，如果之前已经生成过点击y即可</p><p>打开github—settings—-SSH and GPG keys，点击new</p><p>然后git clone</p><p>发现问题解决了。</p><p>但是过了几天，又无法连接上github</p><p>继续找解决方法</p><p>（四）</p><p>检查了一下c盘中host文件中github相关域名对应的ip，发现以前的ip过期了</p><p>打开<a href="https://www.ipaddress.com/%EF%BC%8C">https://www.ipaddress.com/，</a></p><p>查询下面三个域名ip：<br>github.com<br>github.global.ssl.fastly.net<br>codeload.Github.com</p><p>github.com的ip：</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="/noteimg/github.png"></p><p>github.global.ssl.fastly.net的ip：</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="/noteimg/sslip.png"></p><p>codeload.Github.com的ip：</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="/noteimg/clip.png"></p><p>添加在host文件尾部，如果需要权限，则使用管理员权限打开。</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="/noteimg/host2.png"></p><p>ps：不要直接照搬我上面的ip地址，因为它一直在不断更新，输入自己查到的。</p><p>保存以后，清除cdn缓存</p><p>打开cmd，输入<strong>ipconfig /flushdns</strong></p><p>问题解决。</p><p>参考：<a href="https://blog.csdn.net/qq_29493173/article/details/113092656">https://blog.csdn.net/qq_29493173/article/details/113092656</a></p><p>—————————————–分割线———————————————-</p><p>发现这github有时能进有时不能，看来不是host的问题，就挂了一个梯子，就好了。</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 避坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“重生与社死”</title>
      <link href="2021/03/06/%E2%80%9C%E9%87%8D%E7%94%9F%E4%B8%8E%E7%A4%BE%E6%AD%BB%E2%80%9D/"/>
      <url>2021/03/06/%E2%80%9C%E9%87%8D%E7%94%9F%E4%B8%8E%E7%A4%BE%E6%AD%BB%E2%80%9D/</url>
      
        <content type="html"><![CDATA[<h1 id="重生与社死"><a href="#重生与社死" class="headerlink" title="重生与社死"></a>重生与社死</h1><h2 id="（一）"><a href="#（一）" class="headerlink" title="（一）"></a>（一）</h2><p>2025年5月14日凌晨3：50，医生摇了摇头，告诉我父母：我们已经尽力了。<br>？？？！<br>难道我真的死了么？这就是死亡么？<br>接着，我亲眼看着父母泣不成声，伤心欲绝。<br>我想过去安慰他们，虽尽在咫尺，却无法触碰。<br>时间在那一刻仿佛静止了。<br>不知过了多久，父母眼泪似乎已经流尽，我也终于接受了事实。<br>死亡。<br>奇怪的是，我的意识尚未散去，许是出于对此世的留恋吧。<br>意识独自徘徊于此间，犹如单薄的蒲公英，那群精灵四海为家，而我，无处安家。<br>……</p><h2 id="（二）"><a href="#（二）" class="headerlink" title="（二）"></a>（二）</h2><p>我一直跟着父母，不忍离去。<br>他们给我办了死亡证明，盖上棺盖，铺上黄土。<br>连同我在此世的常用品，深埋地底。<br>至此，我便与这个世界，永远地，隔绝了。<br>我依然恍恍惚惚，不知所归。<br>突然，一阵强力袭来，我的意识被强行拉回身体。<br>我失去了意识。<br>一片黑暗，一片虚无。<br>我好像看见了很多人，想起了很多事。<br>但又似乎是很久远的记忆，被尘封起来，丢在角落。<br>……</p><h2 id="（三）"><a href="#（三）" class="headerlink" title="（三）"></a>（三）</h2><p>意识再次回归时，四周一片漆黑，但似乎肌肉的质感回来了，随之回来的，还有长时间身体不活动的僵硬感。<br>？！<br>有个想法在我脑海里一闪而过。<br>不会吧，不会吧。<br>我猛然伸出手，焦急地胡乱摸索一阵。<br>当手指碰到僵硬的木板，我的手指在颤抖着，心脏也在微微颤抖。<br>我……活过来了？<br>虽然我不知道这是怎么回事，但是如此神奇的事发生在自己身上依然感觉难以置信，但更多的是，重生的喜悦。</p><h2 id="（四）"><a href="#（四）" class="headerlink" title="（四）"></a>（四）</h2><p>意识回到了肉体，凭借这稀疏的空气和阴凉的氛围，以及淡淡的纸钱香火气味，我必然被困在棺椁中。<br>因为我一直跟着父母，亲眼看着父母把我安葬，我记得……对，一定能找到那东西！<br>我赶紧在黑暗中四处摸索，不一会儿，我摸到了一个方形薄板，找到了！我的手机。<br>即刻按下开机键，无尽的漆黑中瞬间有了微弱的灯光。<br>漫长的开机终于结束了，果然如我所料，没有一点信号。<br>棺椁中的空气越来越稀疏，窒息的危险铺面而来，我必须争分夺秒想办法出去！<br>等等，如果我没记错的话，那东西应该还在。<br>我打开手机的手电筒，在我的陪葬品中一阵翻找，找到了生前爷爷送我的一把剪枝剪刀，也是我最珍爱的东西。<br>两个多小时以后，墓地旁边的泥土松动，一个握着一把沾满泥土剪枝剪刀手伸了出来。</p><h2 id="（五）"><a href="#（五）" class="headerlink" title="（五）"></a>（五）</h2><p>眼睛长时间未接触光线，看到太阳的一刹那，我的眼睛略感不适，微微眯起。<br>如此熟悉，却又恍如隔世。<br>随意清理了一下，掏出手机，迫不及待地想告诉父母、朋友我重生的消息。<br>打开QQ，叮咚——突然收到一条系统消息：<br>系统已确认您的死亡信息属实，将于30秒后注销您的QQ账号。<br>……<br>我立刻打开空间，随手一划，尽是各种亲友祝愿我一路走好的悼念词。<br>我不甘心，打开微信，好家伙，又收到一条系统消息，仍是要注销我的微信账号。微信朋友圈也是各种关于我的死亡悼念。<br>接着，我打开支付宝，淘宝，b站，游戏……如出一辙，全被注销了。<br>最后，一条电信如期而至，<br>写着：<br>尊敬的用户，截止2025年5月17日15时20分，您的死亡证明信息已经确认属实，系统将即刻注销您的电话卡，欢迎下世使用。<br>我愣愣地呆着原地，失去了所有社交账号的我，在经历过一次肉体死亡后，第一次感受到，社会死亡。<br>社会死亡。</p><h2 id="（六）"><a href="#（六）" class="headerlink" title="（六）"></a>（六）</h2><p>由于没有办法联系父母，所以我打算徒步走回家。<br>心里一直脑补着父母看到重生的我以后该是怎样的难以置信，该是怎样的喜极而泣。<br>虽山高路远，迢迢千里，也一路心悦。<br>四个多小时以后，我来到了家门口。<br>是我熟悉的样子，窗台的海棠花枝繁叶茂，有几枝长的稍微快些，突兀地伸出，似乎等待着某人为她剃去杂枝。<br>我忐忑不安地敲着门。<br>父亲心脏不好，我会不会吓着他。<br>门开了，果然是我父亲。<br>几天下去，他都消瘦了一大圈，不再是我印象中那个健壮结实的样子，两眼暗淡无神，甚至有些凹陷，还沉浸在痛失儿子的悲伤中。<br>“爸，我回来了！”<br>“请问你找谁？”<br>我俩竟然同时开口。<br>父亲状态极差，一副不待见任何陌生人的样子。<br>没关系，他只是没有看清楚来人是谁。<br>我在心里为自己解释着。<br>“爸，是我啊！你儿子，我没有死，我回来了，你好好看看！”<br>我激动地说着。<br>父亲抬起头，用着看恶作剧一般的眼神打量<br>着我，说：“你别来安慰我了，你不是我儿子，我已经永远没有儿子了。”<br>说着说着有些啜泣。<br>？！<br>我半天没有说话。<br>怎么会，怎么会这样，为什么父亲不认识我了？没有道理啊。<br>向门后望去，母亲在客厅的沙发上抱着我的遗像，憔悴不堪，愣愣出神。<br>我依然不能接受父亲不认得我这个事实，深吸一口气，用尽最后一丝力气，夺门而入，朝里喊：“妈！是我！我回来了！你快来看看我啊！”<br>母亲顿时警惕大增，一手护住遗像，一手拿起菜刀。<br>“你不要过来，再过来我就对你不客气！”</p><h2 id="（七）"><a href="#（七）" class="headerlink" title="（七）"></a>（七）</h2><p>我不知道我是怎么走出我家的，都不重要了。<br>街道上的人熙熙攘攘，形色匆匆，还在为他们的生计所奔波。<br>我原本，理应属于他们中的一员，谁知造化弄人，重生以后，却面临着社死。<br>但是，我不甘心，我还是抱着一丝丝侥幸，没准好朋友还认得我。<br>二话不说，我即刻动身前往朋友家里。<br>没有公交卡，无法乘坐公交车，<br>没有微信，无法拦截出租车后支付，<br>没有身份，无法在此世寻得一片容身之处。<br>路人用异样的眼神看着我。<br>因我一身淤泥，蓬头垢面，狼狈不堪。<br>像极了路边的乞丐。<br>顶着口渴与饥饿，长途跋涉，又经过5个多小时以后，我终于来到了朋友家门前。<br>屋里灯还亮着，他在。<br>但我不敢贸然去敲门。<br>这毕竟是我最后一根救命稻草了啊！<br>害怕，恐惧如同枷锁一般钳制着我。<br>我窃窃地走进洗手间，把自己整理得基本像个人样了。<br>镜子里的自己依然是前世的模样，除了衣服沾满泥浆外，别无二样。<br>我终于拾起了勇气，再度走到朋友家门前，颤抖地按了两下门铃。<br>叮咚——<br>叮咚——<br>我的呼吸都停止了。<br>良久，门开了。<br>“你是谁？”<br>……</p><h2 id="（八）"><a href="#（八）" class="headerlink" title="（八）"></a>（八）</h2><p>我终于确认了，虽然重生了，但我确确实实是死了。</p>]]></content>
      
      
      <categories>
          
          <category> 小说 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 📝作品 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL基础笔记</title>
      <link href="2021/03/01/MySQL/"/>
      <url>2021/03/01/MySQL/</url>
      
        <content type="html"><![CDATA[<p>写在前面，课程来自李玉婷老师。</p><h1 id="1-初始MySQL"><a href="#1-初始MySQL" class="headerlink" title="1.初始MySQL"></a>1.初始MySQL</h1><h2 id="1-1-基本概念和操作"><a href="#1-1-基本概念和操作" class="headerlink" title="1.1 基本概念和操作"></a>1.1 基本概念和操作</h2><blockquote><p>保存数据的容器</p></blockquote><p>1.数组——内存</p><p>2.集合——内存</p><p>3.文件</p><p>……</p><blockquote><p>数据库的好处</p></blockquote><ul><li>实现数据持久化</li><li>使用完整的管理系统统统管理，易于查询</li></ul><blockquote><p>数据库的相关概念</p></blockquote><ul><li>DB  ——– （Database）:存储数据的“仓库”。它保存了一系列有组织的数据。</li><li>DBMS—–(Database Management System）数据库是通过DBMS创建和操作的容器</li><li>SQL——–（Structure Query Language）结构化查询语言，专门用来与数据库通信的语言</li></ul><blockquote><p>数据库存储数据的特点</p></blockquote><p>1.将数据放到表中，表再放到库中</p><p>2.一个数据库中可以有多个表，每个表都有一个名字，用来标识自己。表名具有唯一性。</p><p>3.表具有一些特性，此些特性定义了数据库在表中如何存储，类似Java中“类”的设计。</p><p>4.表由列组成，即字段。所有表都是由一个或多个列组成的，每一个类似java中的“属性”。</p><p>5.表中是数据时按行存储的，每一行类似于java中的“对象”。</p><blockquote><p>数据库服务端的登录和退出</p></blockquote><p><strong>登录：</strong></p><p>方式1：</p><p>​        通过Windows自带的客户端</p><p>​        打开命令提示符，输入</p><p>​        <code>        mysql (-h主机名 -P端口号) -u用户名 -p密码</code></p><p>​        mysql -h localhost -P 3306 -u root -p</p><p>​        按回车以后输入密码</p><p>方式2：</p><p>​        mysql自带的客户端</p><p>​        只限于root用户</p><p><strong>退出：</strong></p><p>​    exit回车即可</p><blockquote><p>mysql的常见命令</p></blockquote><p>显示数据库：</p><p><code>show database;</code></p><p><strong>ps：</strong>Database是系统自带的数据库，里面有4个库</p><p>information_shema——-存储源数据</p><p>mysql—————————存储用户数据</p><p>performance_schama—-存储姓名</p><p>test——————————-测试数据，暂时为空</p><p>进入仓库查看数据：</p><p>1.<code>use 仓库名;</code></p><p>2.<code>show tables;</code></p><p>例如 ：use sys；</p><p>再如：</p><p>查看其他库的所有表</p><p><code>show tablas from mysql;</code></p><p>查看现在在哪个库里：</p><p><code>select database();</code></p><p>创建表：</p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">列名，列类型；</span><br><span class="line">列名，列类型；</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>查看表结构：</p><p><code>desc 表名；</code></p><p>查看服务器版本：</p><p>方法1：先退出mysql，再输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql -V;</span><br><span class="line">&#x2F;&#x2F;或者</span><br><span class="line">mysql -version</span><br></pre></td></tr></table></figure><p>方法2：登录mysql，语法：</p><p><code>select version()；</code></p><blockquote><p>语法规范：</p></blockquote><ol><li><p>不区分大小写，但建议关键字大写，表名、列名小写</p></li><li><p>每条命令最好用分号结尾</p></li><li><p>每条命令可以根据需要进行缩进或换行</p></li><li><p>注释</p><p>​    单行注释：#注释文字</p><p>·    单行注释：–  注释文字（注意有空格）</p><p>​    多行注释：/*     注释文字    */#</p></li></ol><h1 id="2-DQL语言"><a href="#2-DQL语言" class="headerlink" title="2. DQL语言"></a>2. DQL语言</h1><h3 id="2-1-基础查询"><a href="#2-1-基础查询" class="headerlink" title="2.1  基础查询"></a>2.1  基础查询</h3><p>快速复制表：查询创建工具，勾选即可。（针对navicat用户）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">语法：</span><br><span class="line">SELECT 查询列表 from 表名;</span><br><span class="line"></span><br><span class="line">特点：</span><br><span class="line">1.查询列表可以是：表中的字段、常量、表达式、函数</span><br><span class="line">2.查询的结果是一个虚拟的表格</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#1.查询表中的单个字段</span><br><span class="line">SELECT last_name from employees; </span><br><span class="line"></span><br><span class="line">#2.查询表中的多个字段</span><br><span class="line">select last_name,salary,email from employees;</span><br><span class="line"></span><br><span class="line">#3.查询表中的所有字段</span><br><span class="line">#方式1：</span><br><span class="line">SELECT</span><br><span class="line">employees.employee_id,</span><br><span class="line">employees.first_name,</span><br><span class="line">employees.last_name,</span><br><span class="line">employees.phone_number,</span><br><span class="line">employees.job_id,</span><br><span class="line">employees.salary,</span><br><span class="line">employees.commission_pct,</span><br><span class="line">employees.manager_id,</span><br><span class="line">employees.department_id,</span><br><span class="line">employees.hiredate,</span><br><span class="line">employees.email,</span><br><span class="line">jobs.job_id,</span><br><span class="line">jobs.job_title,</span><br><span class="line">jobs.min_salary,</span><br><span class="line">jobs.max_salary</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">INNER JOIN jobs ON employees.job_id &#x3D; jobs.job_id;</span><br><span class="line"></span><br><span class="line">#方式2：</span><br><span class="line">#*代表全部字段（不足：查询到表的顺序和原始表一模一样）</span><br><span class="line">select * from employees;</span><br></pre></td></tr></table></figure><p>执行：快捷键—-F9</p><p>查询时注意的细节： </p><ol><li><p>需要打开某个库，再查询</p><p>语法：<code>USE 库名;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UES myemployee;</span><br></pre></td></tr></table></figure><p>2.着重号：用于区分字段和关键字 ``其上档符号是“~ ”，使用Shift键可以换挡输入。</p><p>3.查询常量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">USE myemployees;</span><br><span class="line"></span><br><span class="line">SELECT &#39;John&#39;;    #注意这里是单引号不是着重号！！！</span><br><span class="line">SELECT 100;</span><br></pre></td></tr></table></figure><p>注意：字符型和日期型的常量值必须用单引号括起来</p><p>4.查询表达式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 100%98;</span><br></pre></td></tr></table></figure><p>5.查询函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT VERSION();</span><br></pre></td></tr></table></figure><p>6.起别名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#方式一：使用as</span><br><span class="line">SELECT 100%98 AS 结果;</span><br><span class="line">SELECT last_name AS 姓,first_name AS 名 FROM employees;</span><br><span class="line"></span><br><span class="line">#方式二：使用空格</span><br><span class="line">SELECT last_name 姓,first_name 名 FROM employees;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>起别名的意义：</strong></p></li></ol><ul><li><p>便于理解。</p><ul><li>如果要查询的字段有重名的情况，使用别名可以区分开来。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#如果别名中含有关键字或者空格或者&quot;#&quot;,建议使用&quot;括起来，如：</span><br><span class="line">SELECT salary AS &quot;OUT PUT&quot; FROM employees;</span><br></pre></td></tr></table></figure><p>7.去重（即去除重复的字段）</p><p>不去重写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT department_id FROM employees;</span><br></pre></td></tr></table></figure><p>去重：加上关键字  <code>DISTINCT</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#查询员工表中涉及到的所有的部门编号</span><br><span class="line">SELECT DISTINCT department_id FROM employees;</span><br></pre></td></tr></table></figure><p>8.加号的作用：mysql中的加号只有一个功能：<strong>运算符</strong></p><ul><li><p>如果两个操作符都为整数值，则做加法运算</p></li><li><p>其一字符型，试图将字符型数值转换为数值型，若成功，就继续做加法运算，如果失败，则将字符型数值转换成0</p></li><li><p>只要其中一方为NULL，则结果为NULL</p></li></ul><p>案例：查询员工名和姓连接成一个字段，并显示为姓名。</p><p>解决：引入关键字 <strong>CONCAT</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT CONCAT(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;) AS 结果;</span><br><span class="line"></span><br><span class="line">SELECT</span><br><span class="line">CONCAT(last_name,first_name) AS 姓名</span><br><span class="line">FROM</span><br><span class="line">employees;</span><br></pre></td></tr></table></figure><p>题目：显示出表employee的全部列，各个列之间用逗号隔连接，列头显示成out_put.</p><p>如果我们直接这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">CONCAT(employees.first_name,&#39;,&#39;,employees.last_name,&#39;,&#39;,employees.job_id,&#39;,&#39;,employees.commission_pct) AS OUT_PUT</span><br><span class="line"></span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果如下：</p><p>可以看到，即使有些地方commission_pct不等于NULL，结果也全为NULL了。</p><p>解决办法：引入IFNULL函数</p><p>函数原型：ifnull(expr1,expr2)</p><p>expr1是可能为NULL的值，expr2是假如expr1真的为NULL了，你所期待函数返回的值。</p><p>正确写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">CONCAT(employees.first_name,&#39;,&#39;,employees.last_name,&#39;,&#39;,employees.job_id,&#39;,&#39;,IFNULL(employees.commission_pct,0)) AS OUT_PUT</span><br><span class="line"></span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查询后可以从结果看出</p><p>即使有时利息为0，但奖金不为0，都可以正常显示</p></li></ul><h3 id="2-2-条件查询"><a href="#2-2-条件查询" class="headerlink" title="2.2 条件查询"></a>2.2 条件查询</h3><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">查询列表</span><br><span class="line">FROM</span><br><span class="line">表名</span><br><span class="line">WHERE </span><br><span class="line">筛选条件;</span><br></pre></td></tr></table></figure><p><strong>分类：</strong></p><ol><li><p>​    按条件表达式筛选</p><p>条件运算符：&gt; &lt; = != &lt;&gt; &gt;= &lt;=</p></li><li><p>按逻辑表达式筛选</p><p>&amp;&amp;　||　！</p><p>and    or    not</p></li><li><p>模糊查询</p><p>like,between and in is null</p><p>特点：一般和通配符搭配使用。</p><p>通配符：</p><p>​    %   任意多个字符，包含0个字符</p><p>​    _     任意单个字符</p></li></ol><p>1.按条件表达式式筛选</p><p>案例1：查询工资&gt;12000的员工信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">*</span><br><span class="line">FROM</span><br><span class="line">employees</span><br><span class="line">WHERE</span><br><span class="line">salary&gt;12000;</span><br></pre></td></tr></table></figure><p>案例2：查询部门编号不等于90号的员工和部门编号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">last_name,department_id </span><br><span class="line">FROM </span><br><span class="line">employees </span><br><span class="line">WHERE </span><br><span class="line">department_id&lt;&gt;90;</span><br></pre></td></tr></table></figure><p>2.按逻辑表达式筛选</p><p>案例1：查询工资在10000到20000之间的员工名、工资以及奖金</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">last_name,salary,commission_pct</span><br><span class="line">FROM </span><br><span class="line">employees </span><br><span class="line">WHERE </span><br><span class="line">salary&gt;&#x3D;10000 AND salary&lt;&#x3D;20000;</span><br></pre></td></tr></table></figure><p>案例2：查询部门编号不是在90到110之间，或者工资高于15000的员工信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">*</span><br><span class="line">FROM </span><br><span class="line">employees </span><br><span class="line">WHERE </span><br><span class="line">department_id&lt;90 OR department_id&gt;110 OR salary&gt;15000;</span><br><span class="line"></span><br><span class="line">#或者这样写NOT(department_id&gt;&#x3D;90 AND department_id&lt;&#x3D;110) OR salary&gt;15000;</span><br></pre></td></tr></table></figure><p>3.模糊查询</p><p><strong>like</strong></p><p>案例1：查询员工名中包含字符a的员工信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">*</span><br><span class="line">FROM </span><br><span class="line">employees </span><br><span class="line">WHERE </span><br><span class="line">last_name LIKE &#39;%a%&#39;;</span><br></pre></td></tr></table></figure><p>案例2：查询员工名中第三个字符为n，第五个字符为l的员工名和工资</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">salary,last_name</span><br><span class="line">FROM </span><br><span class="line">employees </span><br><span class="line">WHERE </span><br><span class="line">last_name LIKE &#39;__n_l%&#39;;</span><br></pre></td></tr></table></figure><p>案例3：查询员工中第二个字符为_的员工名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">salary,last_name</span><br><span class="line">FROM </span><br><span class="line">employees </span><br><span class="line">WHERE </span><br><span class="line">last_name LIKE &#39;_\_%&#39;;   #\是转义字符</span><br><span class="line"></span><br><span class="line">#转义字符也可以引用ESCAPE，其中$可以替换为任何符号</span><br><span class="line">SELECT </span><br><span class="line">salary,last_name</span><br><span class="line">FROM </span><br><span class="line">employees </span><br><span class="line">WHERE </span><br><span class="line">last_name LIKE &#39;_$_%&#39; ESCAPE &#39;$&#39;;</span><br></pre></td></tr></table></figure><p><strong>between and</strong>—–提高语句简洁度，包含临界值，临界值不能交换位置</p><p>案例1：查询员工编号在100到120之间的员工信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">*</span><br><span class="line">FROM </span><br><span class="line">employees </span><br><span class="line">WHERE </span><br><span class="line">employee_id BETWEEN 100 AND 120;</span><br></pre></td></tr></table></figure><p><strong>in</strong>——–判断某字段的值是否属于in列表中的某一项</p><p>特点：</p><ul><li>使用in提高语句简洁度</li><li>in列表的值类型必须是一致或兼容（不支持通配符）</li></ul><p>案例：查询员工的工种编号是 IT_PROG、AD_VP、AD_FRES中的一个员工名和工种编号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#普通写法</span><br><span class="line">SELECT </span><br><span class="line">last_name,</span><br><span class="line">job_id</span><br><span class="line">FROM </span><br><span class="line">employees </span><br><span class="line">WHERE </span><br><span class="line">job_id &#x3D; &#39;IT_PROG&#39; OR job_id &#x3D; &#39;AD_VP&#39; OR job_id &#x3D; &#39;AD_PRES&#39;;</span><br><span class="line"></span><br><span class="line">#in写法</span><br><span class="line">SELECT </span><br><span class="line">last_name,</span><br><span class="line">job_id</span><br><span class="line">FROM </span><br><span class="line">employees </span><br><span class="line">WHERE </span><br><span class="line">job_id IN (&#39;IT_PROG&#39;,&#39;AD_VP&#39;,&#39;AD_PRES&#39;);</span><br></pre></td></tr></table></figure><p><strong>is null</strong></p><p>注意：</p><ul><li>=或&lt;&gt;不能用于判断null值</li><li>is nulll 或 is not null 可以判断null值</li></ul><p>案例1：查询没有奖金的员工名和奖金率</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">last_name,</span><br><span class="line">commission_pct</span><br><span class="line">FROM </span><br><span class="line">employees </span><br><span class="line">WHERE </span><br><span class="line">commission_pct IS NULL;</span><br></pre></td></tr></table></figure><p>案例2：查询有奖金的员工名和奖金率</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">last_name,</span><br><span class="line">commission_pct</span><br><span class="line">FROM </span><br><span class="line">employees </span><br><span class="line">WHERE </span><br><span class="line">commission_pct IS NOT NULL;</span><br></pre></td></tr></table></figure><p>补充：</p><p>安全等于 &lt;=&gt;  ——–用来判断是否相等</p><p>案例1：查询没有奖金的员工名和奖金率</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">last_name,</span><br><span class="line">commission_pct</span><br><span class="line">FROM </span><br><span class="line">employees </span><br><span class="line">WHERE </span><br><span class="line">commission_pct &lt;&#x3D;&gt;  NULL;</span><br></pre></td></tr></table></figure><p>案例2：查询工资为12000的员工信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">last_name,</span><br><span class="line">salary</span><br><span class="line">FROM </span><br><span class="line">employees </span><br><span class="line">WHERE </span><br><span class="line">salary &lt;&#x3D;&gt;  12000;</span><br></pre></td></tr></table></figure><p>is null 和 &lt;=&gt; 的区别</p><ul><li>is null：仅仅可以判断null值，可读性较高，建议使用</li><li>&lt;=&gt;    :   既可以判断null值， 又可以判断普通数值，可读性较低</li></ul><p>案例：查询员工号为176的员工的姓名和部门号和年薪</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">last_name,</span><br><span class="line">department_id,</span><br><span class="line">salary*12*(1+IFNULL(commission_pct,0)) AS 年薪</span><br><span class="line">FROM </span><br><span class="line">employees </span><br><span class="line">WHERE </span><br><span class="line">department_id &lt;&#x3D;&gt; 176;</span><br></pre></td></tr></table></figure><h3 id="2-3-排序查询"><a href="#2-3-排序查询" class="headerlink" title="2.3 排序查询"></a>2.3 排序查询</h3><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select 查询列表</span><br><span class="line">from    表</span><br><span class="line">【where 筛选条件】</span><br><span class="line">order by 排序列表 【asc|desc】</span><br></pre></td></tr></table></figure><p>ps：</p><ul><li>asc代表升序，desc代表降序。如果不写，默认是升序。</li><li>oder by子句中可以支持单个字段，多个字段，表达式，函数，别名</li><li>oder by一般放在查询语句的最后面，但limit子句除外</li></ul><p>案例1：查询员工信息，要求工资从高到低排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM employees ORDER BY salary DESC;</span><br></pre></td></tr></table></figure><p>案例2：查询员工信息，要求工资从低到高排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM employees ORDER BY salary ASC; #（或省略ASC）</span><br></pre></td></tr></table></figure><p>案例3：查询部门编号&gt;=90的员工信息，按入职时间的先后进行排序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM employees WHERE department_id&gt;&#x3D;90 ORDER BY ASC;</span><br></pre></td></tr></table></figure><p>案例4：按年薪的高低显示员工的信息和和年薪———-按表达式排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT *,salary*12*(1+IFNULL(commission_pct,0)) AS 年薪</span><br><span class="line">FROM employees</span><br><span class="line">ORDER BY salary*12*(1+IFNULL(commission_pct,0)) DESC;</span><br></pre></td></tr></table></figure><p>案例5：按年薪的高低显示员工的信息和和年薪———-按别名排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT *,salary*12*(1+IFNULL(commission_pct,0)) AS 年薪</span><br><span class="line">FROM employees</span><br><span class="line">ORDER BY 年薪 DESC;</span><br></pre></td></tr></table></figure><p>案例6：按姓名的长度显示员工的姓名和工资————-按函数排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT LENGTH(last_name) as 字节长度,last_name,salary</span><br><span class="line">FROM employees</span><br><span class="line">ORDER BY LENGTH(last_name) DESC;</span><br></pre></td></tr></table></figure><p>案例7：查询员工信息，要求先按工资排序，再按员工编号降序————按多个字段排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM employees</span><br><span class="line">ORDER BY salary DESC,employee_id ASC;</span><br></pre></td></tr></table></figure><h3 id="2-4-常见函数"><a href="#2-4-常见函数" class="headerlink" title="2.4 常见函数"></a>2.4 常见函数</h3><p>概念：类似于java中的方法，将一组逻辑语句封装在方法体中，对外暴露方法名</p><p>好处：</p><ul><li>隐藏了实现细节</li><li>提高代码的重用性</li></ul><p>调用：select 函数名() [from 表]；</p><p>特点：</p><ul><li>叫什么（函数名）</li><li>干什么（函数功能）</li></ul><p>分类：</p><ul><li>单行函数，eg：concat，length，ifnull等</li><li>分组函数<ul><li>功能：做统计使用，又称为统计函数，聚合函数，组函数</li></ul></li></ul><h4 id="2-4-1-字符函数"><a href="#2-4-1-字符函数" class="headerlink" title="2.4.1 字符函数"></a>2.4.1 字符函数</h4><ol><li>length——-获取参数值的字节个数</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT LENGTH(&#39;john&#39;);       #返回值4个字节</span><br><span class="line">SELECT LENGTH(&#39;张三丰hahaha&#39;);#返回值15个字节，因为一个汉字占3个字节</span><br></pre></td></tr></table></figure><ol start="2"><li>concat——拼接字符串</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT CONCAT(last_name,&#39;_&#39;,first_name) FROM employees;</span><br></pre></td></tr></table></figure><p>​    3.upper、lower</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT UPPER(&#39;john&#39;);</span><br><span class="line">SELECT LOWER(&#39;joHn&#39;);</span><br></pre></td></tr></table></figure><p>示例：将姓变大写，名变小写，然后拼接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT CONCAT(UPPER(last_name),LOWER(first_name)) 姓名 FROM employees;</span><br></pre></td></tr></table></figure><p>​    4.substr、substring——-截取字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT SUBSTR(&#39;花花的世界&#39;,4) out_put; #截取从索引处后面所有字符</span><br><span class="line">SELECT SUBSTR(&#39;花花的世界&#39;,1,2) out_put;#截取从指定索引处指定字符长度的字符</span><br></pre></td></tr></table></figure><p>ps:  <strong>sql语言索引从1开始</strong></p><p>输出：</p><p>结果1                    结果2</p><p>out_put                out_put </p><p>世界                        花花</p><p>案例：姓名中首字符大写，其他字符小写然后用_拼接，显示出来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT CONCAT(UPPER(SUBSTR(last_name,1,1)),&#39;_&#39;,LOWER(SUBSTR(last_name,2))) out_put FROM employees;</span><br></pre></td></tr></table></figure><p>​    5.instr——-返回子串第一次出现的索引，提供找不到返回0</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT INSTR(&#39;我爱米切氏凤头鹦鹉&#39;,&#39;鹦鹉&#39;) AS out_put; #返回8</span><br></pre></td></tr></table></figure><p>​    6.trim</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT LENGTH(TRIM(&#39;     花花     &#39;)) as out_put;  #返回6，说明去掉了空格</span><br><span class="line">SELECT TRIM(&#39;a&#39; FROM &#39;aaaaaa花aaaa花aaaaaaa&#39;) as out_put;#输出：花aaaa花--只去掉前后的a</span><br><span class="line"></span><br><span class="line">SELECT TRIM(&#39;aa&#39; FROM &#39;aaaaaaa花aaaa花aaaaaaa&#39;) as out_put;# 输出：a花aaaa花a 成对删除，单一的剩下</span><br></pre></td></tr></table></figure><p>​    7.lpad——–用指定的字符实现左填充指定长度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT LPAD(&#39;花花&#39;,10,&#39;*&#39;) as out_put;  #输出：********花花（总共10个字符）</span><br></pre></td></tr></table></figure><p>​    8.rpad——-用指定的字符实现右填充指定长度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT RPAD(&#39;花花&#39;,12,&#39;ab&#39;) as out_put; #输出：花花ababababab</span><br></pre></td></tr></table></figure><p>​    9.replace——替换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT REPLACE(&#39;我爱惨了鹦鹉鹦鹉鹦鹉&#39;,&#39;鹦鹉&#39;,&#39;二哈&#39;) as out_put; #输出：我爱惨了二哈二哈二哈</span><br></pre></td></tr></table></figure><h4 id="2-4-2-数学函数"><a href="#2-4-2-数学函数" class="headerlink" title="2.4.2 数学函数"></a>2.4.2 数学函数</h4><p>​    1.round—–四舍五入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT ROUND(-1.55); #输出： -2</span><br><span class="line">SELECT ROUND(1.576,2); #输出：1.58</span><br></pre></td></tr></table></figure><p>​    2.ceil——向上取整，返回&gt;=该参数的最小整数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT CEIL(-1.02);  #输出结果：-1</span><br></pre></td></tr></table></figure><p>​    </p><p>​    3.floor—向下取整，返回&lt;=该参数的最大整数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT FLOOR(9.99);  #输出结果：9</span><br></pre></td></tr></table></figure><p>​    4.truncate—–截断</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT TRUNCATE(1.699999999,1);  #输出结果：1.6</span><br></pre></td></tr></table></figure><p>参数表示保留几位小数</p><p>​    5.mod———–取余</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT MOD(10,-3); #结果：1</span><br><span class="line">SELECT 10%-3;  #相同运算,符号和被除数相同</span><br></pre></td></tr></table></figure><p>ps：mod(a,b)的运算:   a-a/b*b</p><h4 id="2-4-3-日期函数"><a href="#2-4-3-日期函数" class="headerlink" title="2.4.3 日期函数"></a>2.4.3 日期函数</h4><ul><li>now 返回当前系统日期+时间</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT NOW();</span><br></pre></td></tr></table></figure><ul><li>curdate 返回当前系统日期，不包含时间</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT CURDATE();</span><br></pre></td></tr></table></figure><ul><li>curtime 返回当前时间，不包含日期</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT CURTIME();</span><br></pre></td></tr></table></figure><ul><li>可以获取指定的部分，年，月，日，小时，分钟，秒</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT YEAR(now()) 年;</span><br><span class="line">SELECT YEAR(&#39;1998-1-1&#39;) 年;</span><br><span class="line">SELECT YEAR(hiredate) 年 FROM employees;</span><br></pre></td></tr></table></figure><ul><li>获取英文的月份</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT MONTHNAME(NOW()) 月;</span><br></pre></td></tr></table></figure><p>out_put:</p><p>月</p><p>February</p><ul><li>日期转换为特定格式</li></ul><table><thead><tr><th>序号</th><th>格式符</th><th>功能</th></tr></thead><tbody><tr><td>1</td><td>%Y</td><td>四位的年份</td></tr><tr><td>2</td><td>%y</td><td>二位的年份</td></tr><tr><td>3</td><td>%m</td><td>月份（01,02,…11,12）</td></tr><tr><td>4</td><td>%c</td><td>月份（1,2，…11,12）</td></tr><tr><td>5</td><td>%d</td><td>日（01,02…）</td></tr><tr><td>6</td><td>%H</td><td>小时（24小时制）</td></tr><tr><td>7</td><td>%h</td><td>小时（12小时制）</td></tr><tr><td>8</td><td>%i</td><td>分钟（00，01…59）</td></tr><tr><td>9</td><td>%s</td><td>秒（00,01,…59）</td></tr></tbody></table><p>1.str_to_date 将日期格式的字符转换成指定格式的日期</p><p>2021-02-18</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT STR_TO_DATE(&#39;2021-2-18&#39;,&#39;%Y-%m-%d&#39;) AS out_put;</span><br><span class="line">SELECT * FROM employees WHERE hiredate &#x3D; &#39;1992-4-3&#39;;</span><br><span class="line">SELECT * from employees WHERE hiredate &#x3D; STR_TO_DATE(&#39;4-3 1992&#39;,&#39;%c-%d %Y&#39;);</span><br></pre></td></tr></table></figure><p>2.date_format 将日期转换成字符————-2021年02月18日</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT DATE_FORMAT(NOW(),&#39;%y年%m月%d日&#39;) AS out_put;</span><br></pre></td></tr></table></figure><p>#查询有奖金的员工名和入职日期（xx月/xx日 xx年）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT last_name,DATE_FORMAT(hiredate,&#39;%m月%d日 %y年&#39;) 入职日期</span><br><span class="line">FROM employees</span><br><span class="line">WHERE commission_pct IS NOT NULL;</span><br></pre></td></tr></table></figure><h4 id="2-4-4-其他函数"><a href="#2-4-4-其他函数" class="headerlink" title="2.4.4 其他函数"></a>2.4.4 其他函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SELECT VERSION();#当前数据库服务器的版本</span><br><span class="line"></span><br><span class="line">SELECT DATABASE();#当前打开的数据库</span><br><span class="line"></span><br><span class="line">SELECT USER();#当前用户</span><br><span class="line"></span><br><span class="line">PASSWORD(&#39;字符&#39;);#返回该字符的密码形式</span><br><span class="line"></span><br><span class="line">md5(&#39;字符&#39;)：返回该字符的md5加密形式</span><br></pre></td></tr></table></figure><h4 id="2-4-5-流程控制函数"><a href="#2-4-5-流程控制函数" class="headerlink" title="2.4.5 流程控制函数"></a>2.4.5 流程控制函数</h4><ul><li>if函数：if else 效果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT IF(10&lt;5,&#39;大&#39;,&#39;小&#39;);</span><br><span class="line"></span><br><span class="line">SELECT last_name,commission_pct,IF(commission_pct is null,&#39;没奖金，呵呵&#39;,&#39;有奖金，嘻嘻&#39;) 备注</span><br><span class="line">FROM employees;</span><br></pre></td></tr></table></figure><ul><li>case 函数的使用一：switch case 效果</li></ul><p>语法：case 要判断的字段或表达式</p><p>​            when 常量1 then 要显示的值1或语句1</p><p>​            when 常量2 then 要显示的值2或语句2</p><p>​            …</p><p>​            else 要显示的值n或语句n;</p><p>​            end</p><p>案例：查询员工工资，要求</p><p>部门号=30，显示的工资为1.1倍</p><p>部门号=40，显示的工资为1.2倍</p><p>部门号=50，显示的工资为1.3倍</p><p>其他部门，显示的工资为原工资</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT salary 原始工资,department_id,</span><br><span class="line">case department_id</span><br><span class="line">when 30 THEN salary*1.1</span><br><span class="line">when 40 THEN salary*1.2</span><br><span class="line">when 50 THEN salary*1.3</span><br><span class="line">else salary</span><br><span class="line">END AS 新工资</span><br><span class="line">FROM employees;</span><br></pre></td></tr></table></figure><ul><li>case函数的使用二：类似于 多重if</li></ul><p>语法：case</p><p>​            when 条件1 then 要显示的值1或语句1</p><p>​            when 条件2 then 要显示的值2或语句2</p><p>​            …</p><p>​            eles 要显示的值n或语句n;</p><p>​            end</p><p>案例：查询员工的工资情况</p><p>如果工资&gt;20000,显示A级别</p><p>如果工资&gt;15000,显示B级别</p><p>如果工资&gt;10000,显示C级别</p><p>否则，显示D级别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT salary,</span><br><span class="line">CASE</span><br><span class="line">WHEN salary&gt;20000 THEN &#39;A&#39;</span><br><span class="line">WHEN salary&gt;15000 THEN &#39;B&#39;</span><br><span class="line">WHEN salary&gt;10000 THEN &#39;C&#39;</span><br><span class="line">ELSE &#39;D&#39;</span><br><span class="line">END AS 工资级别</span><br><span class="line">FROM employees;</span><br></pre></td></tr></table></figure><h3 id="2-5-分组函数"><a href="#2-5-分组函数" class="headerlink" title="2.5 分组函数"></a>2.5 分组函数</h3><p>分类：</p><p>sum 求和</p><p>avg 平均值</p><p>max 最大值</p><p>min 最小值</p><p>count 计算个数</p><blockquote><p>1.简单使用</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT SUM(salary) FROM employees;</span><br><span class="line">SELECT AVG(salary) FROM employees;</span><br><span class="line">SELECT MAX(salary) FROM employees;</span><br><span class="line">SELECT MIN(salary) FROM employees;</span><br><span class="line">SELECT COUNT(salary) FROM employees;</span><br><span class="line"></span><br><span class="line">SELECT SUM(salary) 和,ROUND(AVG(salary),2) 平均,MAX(salary) 最高,MIN(salary) 最低,COUNT(salary) 个数</span><br><span class="line">FROM employees;</span><br></pre></td></tr></table></figure><blockquote><p>2.参数类型</p></blockquote><p>特点：</p><ul><li><p>sum，avg一般用于处理数值型</p></li><li><p>MAX,MIN、COUNT可以处理任何类型</p></li></ul><blockquote><p>3.是否忽略null值</p></blockquote><ul><li>以上分组函数均忽略null值</li></ul><blockquote><p>4.和distinct搭配</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT SUM(DISTINCT salary),SUM(salary) FROM employees;</span><br><span class="line">SELECT COUNT(DISTINCT salary),COUNT(salary) FROM employees;</span><br><span class="line"></span><br><span class="line">#或者</span><br><span class="line">SELECT count(1) FROM employees;</span><br></pre></td></tr></table></figure><blockquote><p>5.count函数的详细介绍</p></blockquote><p>统计行数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT count(*) FROM employees;</span><br></pre></td></tr></table></figure><p>效率：</p><p>MYISAM存储引擎下，count(*)效率高</p><p>INNODB存储引擎下，count(*)和count(1)效率差不多，比count(字段)要高</p><blockquote><p>6.和分组函数一同查询的字段有限制</p></blockquote><p>和分组函数一同使用的字段要求是group by后的字段</p><h3 id="2-6-分组查询"><a href="#2-6-分组查询" class="headerlink" title="2.6 分组查询"></a>2.6 分组查询</h3><p>语法：</p><p>select 分组函数,列（要求出现在group by后面）</p><p>from 表</p><p>【where 筛选条件】</p><p>group by 分组的列表</p><p>【order by 字句】</p><p><strong>PS:要求查询列表必须特殊，要求是分组函数和group by后面出现的字段</strong></p><p>特点：</p><ul><li>分组查询中的筛选条件分为两类</li></ul><table><thead><tr><th></th><th>数据源</th><th>位置</th><th>关键字</th></tr></thead><tbody><tr><td>分组前筛选</td><td>原始表</td><td>group by子句前面</td><td>where</td></tr><tr><td>分组后筛选</td><td>分组后的结果表</td><td>group by子句后面</td><td>having</td></tr></tbody></table><ul><li>分组函数做条件一定要放在having子句中</li><li>能用分组前筛选优先分组前筛选</li><li>group by子句支持单个字段分组，多个字段分组（多个字段之间用逗号隔开没有顺序要求）</li><li>也可以添加排序（排序放在整个分组查询的最后）</li></ul><p>1.简单查询</p><p>案例：查询每个工种的最高工资</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT MAX(salary),job_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY job_id;</span><br></pre></td></tr></table></figure><p>案例2：查询每个位置上的部门个数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(*),location_id</span><br><span class="line">FROM departments</span><br><span class="line">group by location_id;</span><br></pre></td></tr></table></figure><p>2.添加筛选条件</p><p>案例：查询邮箱中包含a字符的，每个部门的平均工资</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT AVG(salary),department_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE email Like &#39;%a%&#39;</span><br><span class="line">GROUP BY department_id;</span><br></pre></td></tr></table></figure><p>案例2：查询有奖金的每个领导手下员工的最高工资</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT MAX(salary),manager_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE commission_pct is not null</span><br><span class="line">GROUP BY manager_id;</span><br></pre></td></tr></table></figure><p>3.添加复杂的筛选条件</p><p>案例：查询哪个部门的员工个数&gt;2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#先查询每个部门的员工个数</span><br><span class="line">#根据上述结果进行筛选，查询哪个部门的员工个数&gt;2</span><br><span class="line">SELECT COUNT(*),department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">HAVING count(*)&gt;2;</span><br></pre></td></tr></table></figure><p>案例2：查询每个工种有奖金的员工的最高工资&gt;12000的工种编号和最高工资</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT MAX(salary),job_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE commission_pct is not null</span><br><span class="line">GROUP BY job_id</span><br><span class="line">having MAX(salary)&gt;12000;</span><br></pre></td></tr></table></figure><p>案例3：查询领导编号&gt;102的每个领导手下的最低工资&gt;5000的领导编号，以及最低工资</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT MIN(salary),manager_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE manager_id&gt;102</span><br><span class="line">GROUP BY manager_id</span><br><span class="line">HAVING MIN(salary)&gt;5000;</span><br></pre></td></tr></table></figure><p>4.按表达式或函数分组</p><p>案例：按员工姓名的长度分组，查询每一个员工个数，筛选员工个数&gt;5的有哪些</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(*),LENGTH(last_name) len_name</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY LENGTH(last_name)</span><br><span class="line">HAVING COUNT(*)&gt;5;</span><br></pre></td></tr></table></figure><p>5.按多个字段进行分组</p><p>案例：查询每个部门每个工种的员工平均工资</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT AVG(salary),department_id,job_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id,job_id;</span><br></pre></td></tr></table></figure><p>6.添加排序</p><p>案例：查询每个部门每个工种的员工平均工资，并按平均工资的高低显示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT AVG(salary),department_id,job_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE department_id IS NOT NULL</span><br><span class="line">GROUP BY job_id,department_id</span><br><span class="line">HAVING AVG(salary)&gt;10000</span><br><span class="line">ORDER BY AVG(salary) DESC</span><br></pre></td></tr></table></figure><h3 id="2-7-连接查询"><a href="#2-7-连接查询" class="headerlink" title="2.7 连接查询"></a>2.7 连接查询</h3><p>别称：多表查询。当查询的字段来自多个表时，就会用到连接查询</p><p>笛卡尔乘积现象：表1 有m行，表2有n行，结果=m*n行</p><p>发生原因：没有有效的连接条件</p><p>避免措施：添加有效的连接条件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT NAME,boyName FROM boys,beauty</span><br><span class="line">WHERE beauty.boyfriend_id&#x3D;boys.id;</span><br></pre></td></tr></table></figure><p>分类：</p><p>按年代分类：</p><p>sq192标准：仅仅支持内连接</p><p>sq199标准：[推荐]支持内连接，外连接（左外和右外）+交叉连接</p><p>按功能分类：</p><table><thead><tr><th>内连接</th><th>外连接</th><th>交叉连接</th></tr></thead><tbody><tr><td>等值连接</td><td>左外连接</td><td>交叉连接</td></tr><tr><td>非等值连接</td><td>右外链接</td><td></td></tr><tr><td>自连接</td><td>全外连接</td><td></td></tr></tbody></table><blockquote><p><strong>sq192标准</strong></p></blockquote><p>1.等值连接</p><p>特点：</p><ul><li>多表等值连接的结果为多表的交集部分</li><li>n表连接，至少需要n-1个连接条件</li><li>一般需要为表 起别名</li><li>可以搭配前面介绍的所有子句使用，比如排序，分组，筛选</li></ul><p>案例：查询女孩名和对应的男孩名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT NAME,boyName</span><br><span class="line">FROM boys,beauty</span><br><span class="line">WHERE beauty.boyfriend_id&#x3D;boys.id;</span><br></pre></td></tr></table></figure><p>2.为表起别名</p><p>优点：</p><ul><li>提高语句的简洁度</li><li>区分多个重名的字段</li></ul><p>ps：如果为表起了别名，则查询的字段就不能使用原来的表名去限定</p><p>案例2：查询员工名和对应的部门名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT e.last_name,e.job_id,job_title</span><br><span class="line">FROM employees e,jobs j</span><br><span class="line">WHERE e.job_id&#x3D;j.job_id;</span><br></pre></td></tr></table></figure><p>3.两个表的顺序可以调换</p><p>案例：上述案例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT e.last_name,e.job_id,job_title</span><br><span class="line">FROM jobs j,employees e</span><br><span class="line">WHERE e.job_id&#x3D;j.job_id;</span><br></pre></td></tr></table></figure><p>3.可以加筛选</p><p>案例：查询有奖金的员工名，部门名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT last_name,department_name,commission_pct</span><br><span class="line">FROM employees e, departments d</span><br><span class="line">WHERE e.department_id&#x3D;d.department_id</span><br><span class="line">AND e.commission_pct is not null;</span><br></pre></td></tr></table></figure><p>案例2：查询城市名中第二个字符为o的部门名和城市名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT city,department_name</span><br><span class="line">FROM departments d,locations l</span><br><span class="line">WHERE d.location_id&#x3D;l.location_id</span><br><span class="line">AND city LIKE &#39;_o%&#39;;</span><br></pre></td></tr></table></figure><p>5.可以分组</p><p>案例1：查询每个城市的部门个数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(*) 个数,city</span><br><span class="line">FROM departments d,locations l</span><br><span class="line">WHERE d.&#96;location_id&#96;&#x3D;l.&#96;location_id&#96;</span><br><span class="line">GROUP BY city;</span><br></pre></td></tr></table></figure><p>案例2：查询有奖金的每个部门的部门名和部门的领导编号和该部门的最低工资</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT department_name,d.manager_id,MIN(salary)</span><br><span class="line">FROM departments d,employees e</span><br><span class="line">WHERE d.department_id&#x3D;e.department_id</span><br><span class="line">AND commission_pct is not null</span><br><span class="line">GROUP BY department_name,d.manager_id;</span><br></pre></td></tr></table></figure><p>6.可以加排序</p><p>案例：查询每个工种名和员工的个数，并且按员工个数降序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT job_title,COUNT(*)</span><br><span class="line">FROM employees e,jobs j</span><br><span class="line">WHERE e.job_id&#x3D;j.job_id</span><br><span class="line">GROUP BY job_title</span><br><span class="line">ORDER BY COUNT(*) DESC;</span><br></pre></td></tr></table></figure><p>7.可以实现三表连接</p><p>查询：查询员工名、部门名和所在城市</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT last_name,department_name,city</span><br><span class="line">FROM employees e,departments d,locations l</span><br><span class="line">WHERE e.employee_id&#x3D;d.department_id</span><br><span class="line">AND d.location_id&#x3D;l.location_id;</span><br></pre></td></tr></table></figure><p>在此基础上可以继续追加筛选和排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AND city like &#39;s%&#39;;</span><br><span class="line">ORDER BY department_name DESC;</span><br></pre></td></tr></table></figure><p>非等值连接</p><p>案例：查询员工的工资和工资级别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT salary,grade_level</span><br><span class="line">FROM employees e,job_grades g</span><br><span class="line">WHERE salary BETWEEN g.lowest_sal AND g.highest_sal</span><br><span class="line">AND g.grade_level&#x3D;&#39;A&#39;;</span><br></pre></td></tr></table></figure><p>3.自连接</p><p>案例：查询员工名和上级的名称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT e.employee_id,e.last_name,m.employee_id,m.last_name</span><br><span class="line">FROM employees e,employees m</span><br><span class="line">WHERE e.department_id&#x3D;m.employee_id;</span><br></pre></td></tr></table></figure><blockquote><p><strong>sq199语法</strong></p></blockquote><p> 语法：</p><p>​            <code>select 查询列表</code></p><p>​            <code>from  表1 别名 【连接类型】</code></p><p>​            <code>join    表2 别名</code></p><p>​            <code>on       连接条件</code></p><p>​            <code>【where 筛选条件】</code></p><p>​            <code>【group by 分组】</code></p><p>​            <code>【having 筛选条件】</code></p><p>​            <code>【order by 排序条件】</code></p><p>分类：</p><table><thead><tr><th>内连接</th><th>inner</th><th></th></tr></thead><tbody><tr><td></td><td></td><td></td></tr><tr><td>外连接</td><td>左外</td><td>left[outer]</td></tr><tr><td></td><td>右外</td><td>right[outer]</td></tr><tr><td></td><td>全外</td><td>full[outer]</td></tr><tr><td></td><td></td><td></td></tr><tr><td>交叉连接</td><td>cross</td><td></td></tr></tbody></table><p>（1）内连接</p><p>语法：</p><p><code>select 查询列表</code></p><p><code>from 表名1 别名</code></p><p><code>inner join 表2 别名</code></p><p><code>on 连接条件</code></p><p><strong>1.等值连接</strong></p><p>特点：</p><ul><li>添加排序、分组、筛选</li><li>inner可以省略</li><li>筛选条件放在where后面，连接条件放在on后面，提高分离性，便于阅读</li><li>inner join连接和sq192语法中的等值连接效果一样，都是查询多表的交集</li></ul><p>案例1：查询员工名，部门名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT last_name,department_name</span><br><span class="line">FROM employees e</span><br><span class="line">INNER JOIN departments d</span><br><span class="line">on e.department_id &#x3D; d.department_id;</span><br></pre></td></tr></table></figure><p>案例2：查询名字中包含e的员工名和工种名（添加筛选）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT last_name,job_title</span><br><span class="line">FROM employees e</span><br><span class="line">INNER JOIN jobs j</span><br><span class="line">ON e.job_id&#x3D;j.job_id</span><br><span class="line">WHERE e.last_name LIKE &#39;%e%&#39;;</span><br></pre></td></tr></table></figure><p>案例3：查询部门个数&gt;3的城市和部门个数（添加+筛选）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT city,COUNT(*) 部门个数</span><br><span class="line">FROM locations l</span><br><span class="line">INNER JOIN departments d</span><br><span class="line">ON l.location_id&#x3D;d.location_id</span><br><span class="line">GROUP BY city</span><br><span class="line">having COUNT(*)&gt;3;</span><br></pre></td></tr></table></figure><p>案例4：查询哪个部门的 员工个数&gt;3的部门名和员工个数，并按个数降序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT department_name,count(*) 员工个数</span><br><span class="line">FROM departments d</span><br><span class="line">INNER JOIN employees e</span><br><span class="line">WHERE d.department_id&#x3D;e.department_id</span><br><span class="line">GROUP BY d.department_name</span><br><span class="line">having COUNT(*)&gt;3</span><br><span class="line">ORDER BY count(*) DESC;</span><br></pre></td></tr></table></figure><p>案例5：查询员工名、部门名、工种名、并按部门名降序（）—-多表连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT last_name,department_name,job_title</span><br><span class="line">FROM employees e</span><br><span class="line">INNER JOIN departments d on e.department_id&#x3D;d.department_id</span><br><span class="line">INNER JOIN jobs j on e.job_id&#x3D;j.job_id</span><br><span class="line">ORDER BY d.department_name DESC;</span><br></pre></td></tr></table></figure><p><strong>2. 非等值连接</strong></p><p>#查询员工的工资级别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT salary,grade_level</span><br><span class="line">FROM employees e</span><br><span class="line">INNER JOIN job_grades g</span><br><span class="line">ON e.salary BETWEEN g.lowest_sal AND g.highest_sal;</span><br></pre></td></tr></table></figure><p>#查询员工的工资级别个数&gt;20的个数，并且按工资级别降序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT count(*),grade_level</span><br><span class="line">FROM employees e</span><br><span class="line">INNER JOIN job_grades g</span><br><span class="line">ON e.salary BETWEEN g.lowest_sal AND g.highest_sal</span><br><span class="line">GROUP BY grade_level</span><br><span class="line">HAVING count(*)&gt;20</span><br><span class="line">ORDER BY grade_level DESC;</span><br></pre></td></tr></table></figure><ol start="3"><li>#查询姓名中包含字符k的员工姓名、上级的名字</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT e.last_name,m.last_name</span><br><span class="line">FROM employees e</span><br><span class="line">JOIN employees m              #inner可以省略</span><br><span class="line">ON e.manager_id&#x3D;m.employee_id;</span><br><span class="line">WHERE e.last_name LIKE &#39;%k%&#39;;</span><br></pre></td></tr></table></figure><p>（2）外连接</p><p>应用场景:用于查询一个表中有，另一个表没有的记录</p><p>特点：</p><ul><li><p>外连接的查询结果为主表中的所有记录，如果从表中有和它匹配的，则显示匹配的值；否则，显示null</p><p>外连接查询结果=内连接结果+主表中有而从表没有的记录</p></li><li><p>左外连接，left join左边的是主表</p></li><li><p>右外连接，right join右边的是主表</p></li><li><p>左外和右外交换两个表的顺序，可以实现同样的效果</p></li><li><p>全外连接=内连接的结果+表1有的但表2没有的+表2有的但表1没有的</p></li></ul><p>案例：查询男朋友不在男神表的女神名字</p><p>左外连接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT b.&#96;name&#96;</span><br><span class="line">FROM beauty b</span><br><span class="line">LEFT OUTER JOIN boys bo</span><br><span class="line">ON b.boyfriend_id&#x3D;bo.id</span><br><span class="line">WHERE bo.id is null;</span><br></pre></td></tr></table></figure><p>右外连接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT b.&#96;name&#96;</span><br><span class="line">FROM boys bo</span><br><span class="line">RIGHT OUTER JOIN beauty b</span><br><span class="line">ON b.boyfriend_id&#x3D;bo.id</span><br><span class="line">WHERE bo.id is null;</span><br></pre></td></tr></table></figure><p>案例：查询哪个部门没有员工</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT d.*,e.employee_id</span><br><span class="line">FROM departments d</span><br><span class="line">LEFT OUTER JOIN employees e</span><br><span class="line">ON d.department_id&#x3D;e.department_id</span><br><span class="line">WHERE e.employee_id is null;</span><br></pre></td></tr></table></figure><p>全外连接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT b.*,bo.*</span><br><span class="line">FROM beauty b</span><br><span class="line">FULL OUTER JOIN boys bo</span><br><span class="line">ON b.boyfriend_id &#x3D; bo.id;</span><br></pre></td></tr></table></figure><p>交叉连接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT b.*,bo.*</span><br><span class="line">FROM beauty b</span><br><span class="line">CROSS JOIN boys bo;</span><br></pre></td></tr></table></figure><p>总结之sq192和sql99异同：</p><p>功能：sql99支持的较多</p><p>可读性：sql99实现连接条件和筛选条件的分离，可读性较高</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="/noteimg/lj.png"><br><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="/noteimg/lj2.png"></p><p>补充案例：</p><p>查询编号&gt;3的女神的男朋友信息，如果有则列出，没有用null填充</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT b.id,b.&#96;name&#96;,bo.*</span><br><span class="line">FROM beauty b</span><br><span class="line">LEFT OUTER JOIN boys bo</span><br><span class="line">ON b.boyfriend_id&#x3D;bo.id</span><br><span class="line">WHERE b.id&gt;3;</span><br></pre></td></tr></table></figure><h3 id="2-7-子查询"><a href="#2-7-子查询" class="headerlink" title="2.7 子查询"></a>2.7 子查询</h3><p>概念：</p><p>出现在其他语句中的select语句，称为子查询或内查询</p><p>外部的查询语句，称为主查询或外查询</p><p>分类：</p><p>按子查询出现的位置</p><table><thead><tr><th>select后面</th><th>from后面</th><th>where或having（☆）</th><th>exists后面（相关子查询）</th></tr></thead><tbody><tr><td>仅仅支持标量子查询</td><td>支持表子查询</td><td>标量子查询（单行）</td><td>表子查询</td></tr><tr><td></td><td></td><td>列子查询（多行）</td><td></td></tr><tr><td></td><td></td><td>行子查询</td><td></td></tr></tbody></table><p>按结果的行列不同：</p><ul><li>标量子查询（结果集只有一行一列）</li><li>列子查询（结果集只有一行多列）</li><li>行子查询（结果集只有一行多列）</li><li>表子查询（结果集一般为多行多列）</li></ul><blockquote><p><strong>where或having后面</strong></p></blockquote><p>1.标量子查询（单行子查询）</p><p>2.列子查询（多行子查询）</p><p>3.行子查询（多行多列）</p><p>特点：</p><ul><li>子查询放在小括号内</li><li>子查询一般放在条件右侧</li><li>标量子查询，一般搭配着单行操作符使用（&gt; &lt; &gt;= &lt;= = &lt;&gt; ）</li><li>列子查询，一般搭配着多行操作符使用（in,any/some,all）</li></ul><h5 id="2-7-1-标量子查询"><a href="#2-7-1-标量子查询" class="headerlink" title="2.7.1.标量子查询"></a>2.7.1.标量子查询</h5><p>案例1：谁的工资比Abel高？</p><p>第一步：查询Abel的工资</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE last_name &#x3D; &#39;Abel&#39;</span><br></pre></td></tr></table></figure><p>第二步：查询满足的员工信息，满足salary&gt;第一步结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM employees</span><br><span class="line">WHERE salary&gt;(</span><br><span class="line"></span><br><span class="line">SELECT salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE last_name &#x3D; &#39;Abel&#39;</span><br><span class="line"></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>案例2：返回job_id与141号员工相同，salary比143号员工多的员工姓名，job_id和工资</p><p>第一步：查询141号员工的job_id</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT job_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE employee_id &#x3D; 141;</span><br></pre></td></tr></table></figure><p>第二步：查询143号员工的工资</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE employee_id &#x3D; 143;</span><br></pre></td></tr></table></figure><p>第三步：查询员工的姓名，job_id和工资，要求……</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">SELECT last_name,job_id,salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE job_id &#x3D; (</span><br><span class="line"></span><br><span class="line">SELECT job_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE employee_id &#x3D; 141</span><br><span class="line"></span><br><span class="line">) AND (</span><br><span class="line"></span><br><span class="line">SELECT salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE employee_id &#x3D; 143</span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h5 id="2-7-2-列子查询（多行）"><a href="#2-7-2-列子查询（多行）" class="headerlink" title="2.7.2.列子查询（多行）"></a>2.7.2.列子查询（多行）</h5><p>案例：返回location_id是1400或1700的部门中的所有员工姓名</p><p>①查询location_id是1400或1700的部门编号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT department_id</span><br><span class="line">FROM departments</span><br><span class="line">WHERE location_id IN(1400,1700)</span><br></pre></td></tr></table></figure><p>②查询员工姓名，要求部门号是①列表中的某一个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">SELECT last_name</span><br><span class="line">FROM employees</span><br><span class="line">WHERE department_id IN(</span><br><span class="line"></span><br><span class="line">SELECT department_id</span><br><span class="line">FROM departments</span><br><span class="line">WHERE location_id IN(1400,1700)</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#或</span><br><span class="line"></span><br><span class="line">SELECT last_name</span><br><span class="line">FROM employees</span><br><span class="line">WHERE department_id &#x3D;ANY(</span><br><span class="line"></span><br><span class="line">SELECT department_id</span><br><span class="line">FROM departments</span><br><span class="line">WHERE location_id IN(1400,1700)</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#PS:NOT IN &#x3D;&#x3D; &lt;&gt;ALL</span><br></pre></td></tr></table></figure><p>案例2：返回其他工种中比job_id为<code>IT_PROG</code>工种任一工资低的员工的员工号，姓名，job_id以及salary</p><p>①查询job_id为<code>IT_PROG</code> 部门任一工资</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE job_id &#x3D; &#39;IT_PROG&#39;;</span><br></pre></td></tr></table></figure><p>②查询员工号、姓名、job_id以及salary，salary&lt;①的任一一个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">SELECT last_name,employee_id,salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE salary&lt;ANY(</span><br><span class="line"></span><br><span class="line">SELECT DISTINCT salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE job_id &#x3D; &#39;IT_PROG&#39;</span><br><span class="line"></span><br><span class="line">) AND job_id&lt;&gt;&#39;IT_PROG&#39;;</span><br><span class="line"></span><br><span class="line">#或</span><br><span class="line"></span><br><span class="line">SELECT last_name,employee_id,salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE salary&lt;(</span><br><span class="line"></span><br><span class="line">SELECT MAX(salary)</span><br><span class="line">FROM employees</span><br><span class="line">WHERE job_id &#x3D; &#39;IT_PROG&#39;</span><br><span class="line"></span><br><span class="line">) AND job_id&lt;&gt;&#39;IT_PROG&#39;;</span><br></pre></td></tr></table></figure><p>案例3：返回其他工种中比job_id为<code>IT_PROG</code>工种所有工资低的员工的员工号，姓名，job_id以及salary</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">SELECT last_name,employee_id,salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE salary&lt;ALL(</span><br><span class="line"></span><br><span class="line">SELECT DISTINCT salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE job_id &#x3D; &#39;IT_PROG&#39;</span><br><span class="line"></span><br><span class="line">) AND job_id&lt;&gt;&#39;IT_PROG&#39;;</span><br><span class="line"></span><br><span class="line">#或</span><br><span class="line"></span><br><span class="line">SELECT last_name,employee_id,salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE salary&lt;(</span><br><span class="line"></span><br><span class="line">SELECT MIN(salary)</span><br><span class="line">FROM employees</span><br><span class="line">WHERE job_id &#x3D; &#39;IT_PROG&#39;</span><br><span class="line"></span><br><span class="line">) AND job_id&lt;&gt;&#39;IT_PROG&#39;;</span><br></pre></td></tr></table></figure><h5 id="2-7-3-行子查询"><a href="#2-7-3-行子查询" class="headerlink" title="2.7.3.行子查询"></a>2.7.3.行子查询</h5><p>ps：用得少，但是面试会问</p><p>案例：查询员工编号最小并且工资最高的员工信息</p><p>之前的方式：</p><p>①查询最小的员工编号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT MIN(employee_id)</span><br><span class="line">FROM employees;</span><br></pre></td></tr></table></figure><p>②查询最高工资</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT MAX(salary)</span><br><span class="line">FROM employees;</span><br></pre></td></tr></table></figure><p>③查询员工信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM employee</span><br><span class="line">WHERE employee_id&#x3D;(</span><br><span class="line"></span><br><span class="line">SELECT MIN(employee_id)</span><br><span class="line">FROM employees</span><br><span class="line"></span><br><span class="line">) AND salary&#x3D;(</span><br><span class="line"></span><br><span class="line">SELECT MAX(salary)</span><br><span class="line">FROM employees</span><br><span class="line"></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>新的方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM employees</span><br><span class="line">WHERE (employee_id,salary)&#x3D;(</span><br><span class="line"></span><br><span class="line">SELECT MIN(employee_id),MAX(salary)</span><br><span class="line">FROM employees</span><br><span class="line"></span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p><strong>select后面</strong></p></blockquote><p>案例：查询每个部门的员工个数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT d.*,(</span><br><span class="line"></span><br><span class="line">SELECT COUNT(*)</span><br><span class="line">FROM employees e</span><br><span class="line">WHERE e.department_id &#x3D; d.department_id</span><br><span class="line">) 个数</span><br><span class="line">FROM departments d;</span><br></pre></td></tr></table></figure><p>案例：查询员工号=102的部门名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT (</span><br><span class="line"></span><br><span class="line">SELECT d.department_name</span><br><span class="line">FROM employees e</span><br><span class="line">INNER JOIN departments d</span><br><span class="line">on d.department_id&#x3D;e.department_id</span><br><span class="line">WHERE e.employee_id&#x3D;102</span><br><span class="line">) 部门名;</span><br></pre></td></tr></table></figure><p>可以用连接查询写</p><blockquote><p><strong>from后面</strong></p></blockquote><p><strong>ps：将子查询的结果充当一张表，要求必须起别名</strong></p><p>案例：查询每个部门的平均工资的工资等级</p><p>①查询每个部门的平均工资</p><p>②连接①的结果和hob_grades表，筛选条件平均工资</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT agb.*,g.grade_level</span><br><span class="line">FROM (</span><br><span class="line">SELECT AVG(salary) ag,department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">) agb </span><br><span class="line">INNER JOIN job_grades g</span><br><span class="line">WHERE agb.ag BETWEEN lowest_sal AND highest_sal</span><br></pre></td></tr></table></figure><blockquote><p><strong>exists后面</strong></p></blockquote><p>—–（相关子查询）</p><p>简单语法：</p><p><code>exitsts（完整的查询语句）</code></p><p>结果：1 or 0</p><p>案例1：查询有员工的部门名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">SELECT department_name</span><br><span class="line">FROM departments d</span><br><span class="line">WHERE EXISTS(</span><br><span class="line">SELECT *</span><br><span class="line">FROM employees e</span><br><span class="line">WHERE d.department_id&#x3D;e.department_id</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">#用in</span><br><span class="line"></span><br><span class="line">SELECT department_name</span><br><span class="line">FROM departments d</span><br><span class="line">WHERE d.department_id IN(</span><br><span class="line"></span><br><span class="line">SELECT department_id</span><br><span class="line">FROM employees</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>案例2：查询没有女朋友的男神信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#in</span><br><span class="line">SELECT bo.*</span><br><span class="line">FROM boys bo</span><br><span class="line">WHERE bo.id not in (</span><br><span class="line"></span><br><span class="line">SELECT boyfriend_id</span><br><span class="line">FROM beauty</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">#exists</span><br><span class="line"></span><br><span class="line">SELECT bo.*</span><br><span class="line">FROM boys bo</span><br><span class="line">WHERE NOT EXISTS(</span><br><span class="line"></span><br><span class="line">SELECT boyfriend_id</span><br><span class="line">FROM beauty b</span><br><span class="line">WHERE bo.id&#x3D;b.boyfriend_id</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="2-7-1-分页查询"><a href="#2-7-1-分页查询" class="headerlink" title="2.7.1 分页查询"></a>2.7.1 分页查询</h3><p>应用场景：当要显示的数据，一页显示不全，需要分页提交sql请求</p><p>语法：</p><p>​        <code>select 查询列表</code></p><p>​        <code>from 表</code></p><p>​        <code>【join type join 表2</code></p><p>​        <code>where 筛选条件</code></p><p>​        <code>group by 分组字段</code></p><p>​        <code>order by 排序的字段】</code></p><p>​        <code>limit offset，size；</code></p><p>​        </p><ul><li>offset要显示条目的起始索引（起始索引从0开始）</li><li>size要显示的条目个数</li></ul><p>特点：</p><ul><li><p>limit语句放在查询语句的最后</p></li><li><p>公式：</p><p>要显示的页数page，每页的条目数size</p></li></ul><p>​    <code>select 查询列表</code></p><p>​    <code>from 表</code></p><p>​    <code>limit (Page-1)*size，size;</code></p><p>案例1：查询前五条员工信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM employees LIMIT 0,5;</span><br><span class="line">#或</span><br><span class="line">SELECT * FROM employees LIMIT 5;#（从0开始可以省略）</span><br></pre></td></tr></table></figure><p>案例2：查询第11条—-第25条</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM employees LIMIT 10,15;</span><br></pre></td></tr></table></figure><p>案例3：查询有奖金的员工信息，并且工资较高的前10名显示出来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT * </span><br><span class="line">FROM employees </span><br><span class="line">WHERE commission_pct IS NOT NULL </span><br><span class="line">ORDER BY salary;</span><br></pre></td></tr></table></figure><p>案例4：查询平均工资最低的部门信息</p><p>①查询各部门的平均工资</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT AVG(salary),department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br></pre></td></tr></table></figure><p>②求出最低平均工资的部门编号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">ORDER BY AVG(salary)</span><br><span class="line">LIMIT 1;</span><br></pre></td></tr></table></figure><p>③查询部门信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM departments d</span><br><span class="line">WHERE d.department_id&#x3D;(</span><br><span class="line"></span><br><span class="line">SELECT department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">ORDER BY AVG(salary)</span><br><span class="line">LIMIT 1</span><br><span class="line"></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>案例：查询平均工资最低的部门信息和该部门的平均工资</p><p>①查询各部门的平均工资</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT AVG(salary),department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br></pre></td></tr></table></figure><p>②求出最低平均工资的部门编号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT AVG(salary),department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">ORDER BY AVG(salary)</span><br><span class="line">LIMIT 1;</span><br></pre></td></tr></table></figure><p>③查询部门信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">SELECT d.*,ag</span><br><span class="line">FROM departments d</span><br><span class="line">JOIN (</span><br><span class="line"></span><br><span class="line">SELECT AVG(salary) ag,department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">ORDER BY AVG(salary)</span><br><span class="line">LIMIT 1</span><br><span class="line"></span><br><span class="line">) ag_dep</span><br><span class="line">ON d.department_id&#x3D;ag_dep.department_id;</span><br></pre></td></tr></table></figure><h3 id="2-7-2-union联合查询"><a href="#2-7-2-union联合查询" class="headerlink" title="2.7.2 union联合查询"></a>2.7.2 union联合查询</h3><p>联合：将多条查询语句的结果合并成一个结果</p><p>语法：</p><p><code>查询语句1</code></p><p><code>union</code></p><p><code>查询语句2</code></p><p><code>union</code></p><p>应用场景:</p><p><strong>要查询的结果来自多个表，且多个表没有直接的连接关系，但查询的信息一致时</strong></p><p>特点：</p><ul><li>要求多条查询语句的查询列数是一致的</li><li>要求多条查询语句的每一列的类型和顺序最好是一致的</li><li>union关键字默认去重，如果使用union all可以包含重复项</li></ul><p>案例：查询中国用户中男性的信息以及外国用户中年男性的用户信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT id,cname,csex FROM t_ca WHERE csex&#x3D;&#39;男&#39;</span><br><span class="line">union</span><br><span class="line">SELECT t_id,tName,tGender FROM t_ua WHERE tGender&#x3D;&#39;male&#39;;</span><br></pre></td></tr></table></figure><p>ps：两表没有关联</p><h1 id="3-DML语言"><a href="#3-DML语言" class="headerlink" title="3. DML语言"></a>3. DML语言</h1><p>简介：数据库操作语言</p><p>包含：</p><ul><li><p>插入：insert</p></li><li><p>修改：update</p></li><li><p>删除：delete</p></li></ul><h4 id="3-1-插入语句"><a href="#3-1-插入语句" class="headerlink" title="3.1 插入语句"></a>3.1 插入语句</h4><p>方式一：</p><p>语法：</p><p><code>insert into 表名（列名，……）value（值1，……）;</code></p><p>1.插入的值的类型要与列的类型一致或兼容</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO beauty(id,NAME,sex,borndate,phone,photo,boyfriend_id)</span><br><span class="line">VALUES (13,&#39;王冰冰&#39;,&#39;女&#39;,&#39;1994-4-23&#39;,&#39;1898888888&#39;,NULL,2);</span><br></pre></td></tr></table></figure><p>2.不可以为null的列必须插入值</p><p>3.可以为null的列如何插入值？</p><p>way one：直接写null，如上例</p><p>way two：列不写，值也不写，如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">beauty(id,NAME,sex,borndate,phone,boyfriend_id)</span><br><span class="line">VALUES (13,&#39;王冰冰&#39;,&#39;女&#39;,&#39;1994-4-23&#39;,&#39;1898888888&#39;,2);</span><br></pre></td></tr></table></figure><p>4.列的顺序可以调换</p><p>5.列数和值的个数必须一致</p><p>6.可以省略列名，默认所有列，而且列的顺序和表中的顺序一致</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p> 方式2：</p><p>语法：</p><p><code>insert into 表名</code></p><p><code>set 列名=值，…</code></p><p>eg：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO beauty</span><br><span class="line">set id&#x3D;19,NAME&#x3D;&#39;刘涛&#39;,phone&#x3D;&#39;999&#39;;</span><br></pre></td></tr></table></figure><p>两种方式对比：</p><p>1.方式一支持插入多行，方式二不支持</p><p>eg：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO beauty</span><br><span class="line">VALUES (23,&#39;王冰冰1&#39;,&#39;女&#39;,&#39;1994-4-23&#39;,&#39;1898888888&#39;,NULL,2)</span><br><span class="line">,(24,&#39;王冰冰2&#39;,&#39;女&#39;,&#39;1994-4-23&#39;,&#39;1898888888&#39;,NULL,2)</span><br><span class="line">,(25,&#39;王冰冰3&#39;,&#39;女&#39;,&#39;1994-4-23&#39;,&#39;1898888888&#39;,NULL,2)</span><br></pre></td></tr></table></figure><p>2.方式一支持子查询，方式二不支持</p><p>eg：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO beauty(id,NAME,phone)</span><br><span class="line">SELECT 26,&#39;宋茜&#39;,&#39;11809866&#39;;</span><br></pre></td></tr></table></figure><p>eg：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO beauty(id,NAME,phone)</span><br><span class="line">SELECT id,boyName,&#39;1234567&#39;</span><br><span class="line">FROM boys WHERE id&lt;3</span><br></pre></td></tr></table></figure><h4 id="3-2-修改语句"><a href="#3-2-修改语句" class="headerlink" title="3.2 修改语句"></a>3.2 修改语句</h4><p>1.修改单表的记录</p><p>语法：</p><p><code>update 表名</code></p><p><code>set 列=新值，列=新值，……</code></p><p><code>where 筛选条件；</code></p><p>2.修改多表的记录</p><p>示例：</p><p>1.修改单表的记录</p><p>案例1：修改beauty表中姓王的女神的电话为13899888899</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UPDATE beauty SET phone&#x3D;&#39;13899888899&#39;</span><br><span class="line">WHERE NAME LIKE &#39;王%&#39;;</span><br></pre></td></tr></table></figure><p>案例2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UPDATE boys SET boyname&#x3D;&#39;张飞&#39;,usercp&#x3D;1000</span><br><span class="line">WHERE id&#x3D;2;</span><br></pre></td></tr></table></figure><p>2.修改多表记录</p><p>sql92语法：</p><p><code>update 表1 别名，表2 别名</code></p><p><code>set 列=值，……</code></p><p><code>where 连接条件</code></p><p><code>and 筛选条件；</code></p><p>sql99语法：</p><p><code>update 表1 别名</code></p><p><code>inner|left|right join 表2 别名</code></p><p><code>on 连接条件</code></p><p><code>set 列=值，……</code></p><p><code>where 筛选条件；</code></p><p>案例1：修改张无忌的女朋友的手机号为114</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">UPDATE boys bo</span><br><span class="line">INNER JOIN beauty b ON bo.id&#x3D;b.boyfriend_id</span><br><span class="line">SET b.phone&#x3D;&#39;114&#39;</span><br><span class="line">WHERE bo.boyName&#x3D;&#39;张无忌&#39;</span><br></pre></td></tr></table></figure><p>案例2：修改没有男朋友的女神的男朋友编号都为2号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">UPDATA boys bo</span><br><span class="line">RIGHT JOIN beauty b on bo.id&#x3D;b.boyfriend_id</span><br><span class="line">SET b.boyfriend_id&#x3D;2</span><br><span class="line">WHERE bo.id IS NULL;</span><br></pre></td></tr></table></figure><h4 id="3-3-删除语句"><a href="#3-3-删除语句" class="headerlink" title="3.3 删除语句"></a>3.3 删除语句</h4><p>方式一：delete</p><p>语法：</p><p>1.单表的删除★</p><p><code>delete from 表名 where 筛选条件</code></p><p>案例：删除手机号以9结尾的女神信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM beauty WHERE phone LIKE &#39;%9&#39;;</span><br></pre></td></tr></table></figure><p>2.多表的删除</p><p><strong>sql92语法：</strong></p><p><code>delete 表1的别名，表2的别名</code></p><p><code>from 表1 别名，表2 别名</code></p><p><code>where 连接条件</code></p><p><code>and 筛选条件；</code></p><p><strong>sql99语法：</strong><br><code>where 表1的别名，表2的别名</code></p><p><code>inner|left|right join 表2 别名 on 连接条件</code></p><p><code>where 筛选条件；</code></p><p>案例：删除张无忌的女朋友信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DELETE b</span><br><span class="line">FROM beauty b</span><br><span class="line">INNER JOIN boys bo ON b.boyfriend_id&#x3D;bo.id</span><br><span class="line">WHERE bo.boyName&#x3D;&#39;张无忌&#39;;</span><br></pre></td></tr></table></figure><p>案例2：删除黄晓明的信息以及他女朋友的信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DELETE bo,b</span><br><span class="line">FROM boys bo</span><br><span class="line">INNER JOIN beauty b</span><br><span class="line">ON bo.id&#x3D;b.boyfriend_id</span><br><span class="line">WHERE bo.boyName&#x3D;&#39;黄晓明&#39;;</span><br></pre></td></tr></table></figure><p>方式二：truncate</p><p>语法：<code>truncate table 表名；</code></p><p>案例：将魅力值打与100的男神信息删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRUNCATE TABLE boys;#一删全删，用来清空表的</span><br></pre></td></tr></table></figure><p>总结：delete和truncate区别</p><ul><li>delete可以加where条件，truncate不能加</li><li>truncate删除，效率高一点点</li><li>假如要删除的表中有自增长列，如果用delete删除后，再插入数据，自增长列的值从断点开始，而truncate删除后，再插入数据，自增长列的值从1开始</li><li>truncate删除没有返回值，delete删除有返回值</li><li>truncate删除不能回滚，delete删除可以回滚</li></ul><p>ps：自增长列在后面会详细讲解</p><h1 id="4-TCL语言"><a href="#4-TCL语言" class="headerlink" title="4. TCL语言"></a>4. TCL语言</h1><p>Transation Control Language 事务控制语言</p><p>事务：</p><p>一个或一组sql语句组成一个执行单元，这个执行单元要么全部执行，要么全部不执行。</p><p>事务的ACID(acid)属性</p><p>1.原子性（Atomicity）</p><p>原子性是指事务一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。</p><p>2.一致性（Consistency）</p><p>事务性必须使数据库从一个一致性状态变换到另外一个一致性状态。</p><p>3.隔离线（isolation）</p><p>事务的隔离性是指一个事务的执行不能被其他事务干扰，即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</p><p>4.持久性（Durability）</p><p>持久性是指一个事务一旦改变，它对数据库中的数据的改变就是永久性的，接下来的其他操作和数据库故障不应该对其有任何影响</p><h3 id="4-1-事务的创建"><a href="#4-1-事务的创建" class="headerlink" title="4.1 事务的创建"></a>4.1 事务的创建</h3><ul><li>隐式事务：事务没有明显的开启和结束的标记</li></ul><p>比如：insert、update、delete语句</p><ul><li>显示事务：事务具有明显的开启和结束的标志</li></ul><p>前提：必须先设置自动提交功能为禁用</p><p>设置禁用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SET autocommit&#x3D;0;</span><br><span class="line">SHOW VARIABLES LIKE &#39;autocommit&#39;</span><br></pre></td></tr></table></figure><p>显示事务书写：</p><p>步骤1：开启事务：</p><p>set autocommit=0；</p><p>start stransaction；（非必须）</p><p>步骤2：编写事务中的sql语句（select insert update delete）</p><p>语句1；</p><p>语句2；</p><p>…</p><p>步骤3：结束事务</p><p>commit；提交事务</p><p>rollback；回滚事务</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#准备工作：</span><br><span class="line">CREATE DATABASE test;</span><br><span class="line">use test;</span><br><span class="line">CREATE TABLE account(</span><br><span class="line">id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">username VARCHAR(20),</span><br><span class="line">balance DOUBLE</span><br><span class="line">);</span><br><span class="line">INSERT INTO account(username,balance)</span><br><span class="line">VALUES(&#39;张无忌&#39;,1000),(&#39;赵敏&#39;,1000);</span><br><span class="line">SELECT * FROM account;</span><br><span class="line"></span><br><span class="line">#开启事务</span><br><span class="line">SET autocommit&#x3D;0;</span><br><span class="line">START TRANSACTION;</span><br><span class="line">#编写一组事务的语句</span><br><span class="line">UPDATE account SET balance &#x3D; 1000 WHERE username&#x3D;&#39;张无忌&#39;;</span><br><span class="line">UPDATE account SET balance &#x3D; 1000 WHERE username&#x3D;&#39;赵敏&#39;;</span><br><span class="line">#结束事务</span><br><span class="line">ROLLBACK;</span><br><span class="line">COMMIT;</span><br><span class="line"></span><br><span class="line">SELECT * FROM account;</span><br></pre></td></tr></table></figure><p>delete和truncate在事务使用时的区别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#演示delete</span><br><span class="line">SET autocommit&#x3D;0;</span><br><span class="line">START TRANSACTION;</span><br><span class="line">DELETE FROM account;</span><br><span class="line">ROLLBACK;</span><br><span class="line">#演示truncate</span><br><span class="line">SET autocommit&#x3D;0;</span><br><span class="line">START TRANSACTION;</span><br><span class="line">TRUNCATE TABLE account;</span><br><span class="line">ROLLBACK;</span><br><span class="line"></span><br><span class="line">#演示savepoint的使用</span><br><span class="line"></span><br><span class="line">SET autocommit&#x3D;0;</span><br><span class="line">START TRANSACTION;</span><br><span class="line">DELETE FROM account WHERE id&#x3D;1;</span><br><span class="line">SAVEPOINT a;#设置保存点</span><br><span class="line">DELETE FROM account WHERE id&#x3D;2;</span><br><span class="line">ROLLBACK TO a;#回滚到保存点</span><br><span class="line">SELECT * FROM account;#结果是2号没删1号删了</span><br></pre></td></tr></table></figure><p>总结：delete支持回滚，而truncate不支持</p><p>savepoint 结点名；设置保存点</p><p>事务的隔离级别：</p><table><thead><tr><th></th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>read uncommitted</td><td>√</td><td>√</td><td>√</td></tr><tr><td>read committed</td><td>×</td><td>√</td><td>√</td></tr><tr><td>repeatable read</td><td>×</td><td>×</td><td>√</td></tr><tr><td>serializable</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><p>mysql中默认第三个隔离级别 repeatable read</p><p>Oracle默认第二个隔离级别 read committed</p><p>设置隔离级别</p><p>set session|global transaction isolation level 隔离级别；</p><p>展示当前隔离机制： </p><p> select @@transaction_isolation；</p><p>设置当前的mySQL连续的隔离级别：</p><p>set transaction isolation level read committed;</p><p>设置数据库系统的全局的隔离级别：</p><p>set global transaction isolation level read committed;</p><h3 id="4-2-视图"><a href="#4-2-视图" class="headerlink" title="4.2 视图"></a>4.2 视图</h3><p>含义：虚拟的表，和普通表一样使用，是通过表动态生成的数据，只保存sql逻辑，不保存查询结果</p><p>比如：舞蹈班和普通班的对比</p><p>视图vs表</p><table><thead><tr><th></th><th>创建语法的关键字</th><th>是否实际占用物理空间</th><th>使用</th></tr></thead><tbody><tr><td>视图</td><td>create view</td><td>只保存了sql逻辑</td><td>增删改查，一般不能增删改</td></tr><tr><td>表</td><td>create table</td><td>保存了数据</td><td>增删改查</td></tr></tbody></table><p>应用场景：</p><ul><li>多个地方用到同样的查询结果</li><li>该查询结果使用的sql语句较复杂</li></ul><p>案例：查询姓张的学生名和专业名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#以前</span><br><span class="line">SELECT stuname,majorname</span><br><span class="line">FROM stuinfo s</span><br><span class="line">INNER JOIN major m ON s.majorid&#x3D;m.id</span><br><span class="line">WHERE s.stuname LIKE &#39;张%&#39;；</span><br><span class="line"></span><br><span class="line">CREATE VIEW v1</span><br><span class="line">AS</span><br><span class="line">SELECT stuname,majorname</span><br><span class="line">FROM stuinfo s</span><br><span class="line">INNER JOIN major m ON s.majorid&#x3D;m.id;</span><br><span class="line"></span><br><span class="line">#现在</span><br><span class="line">SELECT * FROM v1 WHERE stuname LIKE &#39;张%&#39;;</span><br></pre></td></tr></table></figure><h4 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h4><p>语法：</p><p><code>create view 视图名</code></p><p><code>as</code></p><p><code>查询语句;</code></p><p>特点：</p><ul><li>重用sql语句</li><li>简化复杂的sql语句，不必 知道它的查询细节</li><li>保护数据，提高安全性</li></ul><p>案例1：查询员工名包含a字符的员工名、部门名和工种信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#①创建</span><br><span class="line">CREATE VIEW myv1</span><br><span class="line">AS</span><br><span class="line">SELECT last_name,department_name,job_title</span><br><span class="line">FROM employees e</span><br><span class="line">JOIN departments d ON e.department_id &#x3D; d.department_id</span><br><span class="line">JOIN jobs j ON e.job_id&#x3D;j.job_id;</span><br><span class="line"></span><br><span class="line">#②使用</span><br><span class="line">SELECT * FROM myv1 WHERE last_name LIKE &#39;%a%&#39;;</span><br></pre></td></tr></table></figure><p>案例2：查询每个部门平均工资对应的工资等级</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#创建视图查看每个部门的平均工资</span><br><span class="line">CREATE VIEW myv2</span><br><span class="line">AS</span><br><span class="line">SELECT AVG(salary) ag,department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id;</span><br><span class="line"></span><br><span class="line">SELECT * FROM myv2;</span><br><span class="line">#使用</span><br><span class="line">SELECT jg.grade_level,department_id,myv2.ag</span><br><span class="line">FROM myv2</span><br><span class="line">JOIN job_grades jg </span><br><span class="line">on myv2.ag BETWEEN jg.lowest_sal and jg.highest_sal;</span><br></pre></td></tr></table></figure><p>案例3：查询平均工资最低的部门信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM myv2 ORDER BY ag LIMIT 1;</span><br></pre></td></tr></table></figure><p>案例4：查询平均工资最低的部门名和工资</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#myway：</span><br><span class="line">SELECT d.*,salary </span><br><span class="line">FROM myv2</span><br><span class="line">JOIN employees e</span><br><span class="line">ON e.department_id&#x3D;myv2.department_id</span><br><span class="line">JOIN departments d</span><br><span class="line">ON d.department_id &#x3D; e.department_id</span><br><span class="line">ORDER BY ag LIMIT 1;</span><br><span class="line"></span><br><span class="line">#teachar&#39;s way:</span><br><span class="line"></span><br><span class="line">CREATE VIEW myv3</span><br><span class="line">AS</span><br><span class="line">SELECT * FROM myv2 ORDER BY ag LIMIT 1;</span><br><span class="line"></span><br><span class="line">SELECT d.*,m.ag</span><br><span class="line">FROM myv3 m</span><br><span class="line">JOIN departments d</span><br><span class="line">ON m.department_id&#x3D;d.department_id;</span><br></pre></td></tr></table></figure><h4 id="视图的修改"><a href="#视图的修改" class="headerlink" title="视图的修改"></a>视图的修改</h4><p>方式一：</p><p><code>create or replace view 视图名</code></p><p><code>as</code></p><p><code>查询语句；</code></p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE OR REPLACE VIEW myv3</span><br><span class="line">AS</span><br><span class="line">SELECT AVG(salary),job_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY job_id;</span><br></pre></td></tr></table></figure><p>方式二：</p><p>语法：</p><p><code>alter  view 视图名</code></p><p><code>as</code></p><p><code>查询语句；</code></p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER VIEW myv3</span><br><span class="line">AS</span><br><span class="line">SELECT * FROM employees;</span><br></pre></td></tr></table></figure><h4 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h4><p>语法：</p><p><code>drop view 视图名、视图名，…</code></p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP VIEW myv1,myv2,myv3;</span><br></pre></td></tr></table></figure><h4 id="查看视图"><a href="#查看视图" class="headerlink" title="查看视图"></a>查看视图</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DESC myv3;</span><br><span class="line">#或</span><br><span class="line">SHOW create view myv3;</span><br></pre></td></tr></table></figure><h4 id="视图的更新"><a href="#视图的更新" class="headerlink" title="视图的更新"></a>视图的更新</h4><blockquote><p>1.插入</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO myv1 VALUES(&#39;张飞&#39;,&#39;zf@qq.com&#39;);</span><br></pre></td></tr></table></figure><p>ps：连原表employees的数据一起更新了</p><blockquote><p>2.修改</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO myv1 VALUES(&#39;张飞&#39;,&#39;zf@qq.com&#39;);</span><br></pre></td></tr></table></figure><p>ps：也是连原始表一起更新了</p><blockquote><p>3.删除</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM myv1 WHERE last_name&#x3D;&#39;张无忌&#39;;</span><br></pre></td></tr></table></figure><p>具备以下特点的视图不允许更新：</p><p>1.包含关键字的sql语句：分组函数，distinct、group by、having、union或者union all</p><p>2.常量视图</p><p>3.select中包含子查询</p><p>4.join</p><p>5.from一个不能更新的视图</p><p>6.where字句中的子查询引用了from字句中的表</p><h1 id="5-变量"><a href="#5-变量" class="headerlink" title="5. 变量"></a>5. 变量</h1><p>分类：</p><table><thead><tr><th>系统变量</th><th>自定义变量</th></tr></thead><tbody><tr><td>全局变量、会话变量</td><td>用户变量、局部变量</td></tr></tbody></table><h3 id="5-1-系统变量"><a href="#5-1-系统变量" class="headerlink" title="5.1 系统变量"></a>5.1 系统变量</h3><p>ps：变量由系统提供，不是用户定义，属于服务器层面</p><p>使用语法：</p><p>1.查看所有的系统变量</p><p><code>SHOW GLOBAL|[SESSION] VARIABLES;</code></p><p>2.查看满足条件的部分变量</p><p><code>SHOW GLOBAL|[SESSION] VARIABLES LIKE &#39;%CHAR%&#39;;</code></p><p>3.查看指定的某个系统变量的值</p><p><code>SELECT @@GLOBAL | [SESSION].系统变量名；</code></p><p>4.为某个系统变量赋值</p><p>方式一：</p><p><code>set global|【session】系统变量名 = 值；</code></p><p>方式二：</p><p><code>set @@global | 【session】.系统变量名=值；</code></p><p>总结：</p><p>如果是全局级别，则需要加global；</p><p>如果是会话级别，则需要加session</p><blockquote><p>全局变量</p></blockquote><p>说明：</p><p>作用域：服务器每次启动将为所有的全局变量赋初始值，针对于所有的会话有效，但不能跨重启</p><p>查看所有的全局变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW GLOBAL VARIABLES;</span><br></pre></td></tr></table></figure><p>查看部分的全局变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW GLOBAL VARIABLES LIKE &#39;%char%&#39;;</span><br></pre></td></tr></table></figure><p>查看指定的全局变量的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT @@global.autocommit;</span><br><span class="line">#查看隔离级别</span><br><span class="line">SELECT @@transaction_isolation;</span><br></pre></td></tr></table></figure><p>为某个全局变量赋值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET @@global.autocommit&#x3D;0;#跨连接有效</span><br></pre></td></tr></table></figure><blockquote><p>会话连接</p></blockquote><p>作用域：仅仅针对于当前会话（连接）有效</p><p>查看所有的会话变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW (SESSION) VARIABLES;</span><br></pre></td></tr></table></figure><p>查看指定的某个会话变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW SESSION VARIABLES LIKE &#39;%char%&#39;;</span><br></pre></td></tr></table></figure><p>查看指定的某个会话变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT @@transaction_isolation;</span><br><span class="line">SELECT @@SESSION.transaction_isolation;</span><br></pre></td></tr></table></figure><p>为某个会话变量赋值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#方式一</span><br><span class="line">SET @@session.transaction_isolation&#x3D;&#39;read-uncommitted&#39;;</span><br><span class="line">#方式二</span><br><span class="line">SET session transaction_isolation&#x3D;&#39;read-committed&#39;;</span><br></pre></td></tr></table></figure><blockquote><p>自定义变量</p></blockquote><p>说明：变量是用户自定义的，不是由系统定义的</p><p>使用步骤：</p><p>1.声明2.赋值3.使用（查看、比较、运算等）</p><p>用户变量</p><p>作用域：针对于当前会话（连接）有效，同于会话变量的作用域</p><p>应用场合：应用在任何地方，在begin end内也可以在begin end外</p><p><strong>赋值的操作符：=或:=</strong></p><p>①声明并初始化</p><p><code>SET @用户变量名=值；或</code></p><p><code>SET @用户变量名:=值；或</code></p><p><code>SELECT @用户变量名:=值；</code></p><p>②赋值（更新用户变量的值）</p><p>方式一：通过SET或SELECT</p><p>​                <code>SET @用户变量名=值；或</code></p><p>​                <code>SET @用户变量名:=值；或</code></p><p>​                <code>SELECT @用户变量名:=值；</code></p><p>方式二：通过SELECT INTO</p><p>​                <code>SELECT 字段 INTO 变量名</code></p><p>​                <code>FROM 表；</code></p><p>③使用（查看用户变量的值）</p><p><code>SELECT @用户变量名；</code></p><p>案例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#声明并初始化</span><br><span class="line">SET @name&#x3D;&#39;john&#39;;</span><br><span class="line">SET @name&#x3D;100;</span><br><span class="line">SET @count&#x3D;1;</span><br><span class="line">#赋值</span><br><span class="line">SELECT COUNT(*) INTO @count</span><br><span class="line">FROM employees;</span><br><span class="line">#使用</span><br><span class="line">SELECT @count;</span><br></pre></td></tr></table></figure><p>局部变量</p><p>作用域：仅仅定义在它的begin end中有效</p><p>应用场合：应用在begin end中的第一句话</p><p>①声明</p><p><code>DECLARE 变量名 类型；</code></p><p><code>declare 变量名 类型 DEFAULT 值；</code></p><p>②赋值</p><p>方式一：通过SET或SELECT</p><p>​                <code>SET 局部变量名=值；或</code></p><p>​                <code>SET 局部变量名:=值；或</code></p><p>​                <code>SELECT @局部变量名:=值；</code></p><p>方式二：通过SELECT INTO</p><p>​                <code>SELECT 字段 INTO 局部变量名</code></p><p>​                <code>FROM 表；</code></p><p>③使用</p><p><code>SELECT 局部变量名；</code></p><p><strong>对比用户变量和局部变量</strong></p><table><thead><tr><th></th><th>作用域</th><th>定义和使用的位置</th><th>语法</th></tr></thead><tbody><tr><td>用户变量</td><td>当前会话</td><td>会话中的任何地方</td><td>必须加@符号，不用限定类型</td></tr><tr><td>局部变量</td><td>BEGIN END中</td><td>只能在BEGIN END中，且为第一句话</td><td>一般不用加@符号，需要限定类型</td></tr></tbody></table><p>案例：声明两个变量并赋初值，求和，并打印</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#1.用户变量</span><br><span class="line">SET @m&#x3D;1;</span><br><span class="line">SET @n&#x3D;2;</span><br><span class="line">SET @sum&#x3D;@m+@n;</span><br><span class="line">SELECT @sum;</span><br><span class="line">#2.局部变量（未放在begin end中报错）</span><br><span class="line">DECLARE m INT DEFAULT 1;</span><br><span class="line">DECLARE n INT DEFAULT 2;</span><br><span class="line">DECLARE SUM INT;</span><br><span class="line">SET SUM&#x3D;m+n;</span><br><span class="line">SELECT @SUM;</span><br></pre></td></tr></table></figure><h1 id="6-存储过程和函数"><a href="#6-存储过程和函数" class="headerlink" title="6. 存储过程和函数"></a>6. 存储过程和函数</h1><blockquote><p>存储过程和函数</p></blockquote><p>含义：类似于java中的方法</p><p>好处：</p><p>1.提高代码的重用性</p><p>2.简化操作</p><blockquote><h4 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h4></blockquote><p>含义：一组预先编译好的SQL语句的集合，理解成批处理语句</p><p>好处：</p><p>1.提高代码的重用性</p><p>2.简化操作</p><p>3.减少了编译次数并且减少了和数据库服务器的连接次数，提高了效率</p><p>一、创建语法</p><p><code>CREATE PROCEDURE 存储过程名（参数列表）</code></p><p><code>BEGIN</code></p><p>​            <code>存储过程体（一组合法的SQL语句）</code></p><p><code>END</code></p><p>ps：</p><p>1.参数列表包含三部分（参数模式 参数名 参数类型）</p><p>eg：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IN stuname VARCHAR(20);</span><br></pre></td></tr></table></figure><p>2.参数模式：</p><p>IN:       该参数可以作为输入，也就是该参数需要调用方法传入值</p><p>OUT:    该参数可以作为输出，也就是该参数可以作为返回值</p><p>INOUT:该参数既可以作为输入又可以作为输出</p><p>3.如果存储过程体仅仅只有一句话，BEGIN END 可以省略</p><p>存储过程体中每条SQL语句的结尾要求必须加分号</p><p>存储过程的结尾可以使用DELIMITER 重新设置</p><p>语法：</p><p><code>DELIMITER 结束标记</code></p><p>案例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $</span><br></pre></td></tr></table></figure><p>二、调用语法</p><p><code>CALL 存储过程名(实参列表)；</code></p><p>1.空参列表</p><p>案例：插入到admin表中五条记录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM admin;</span><br><span class="line">DELIMITER $</span><br><span class="line">CREATE PROCEDURE myp1()</span><br><span class="line">BEGIN</span><br><span class="line">INSERT INTO admin(username,&#96;password&#96;)</span><br><span class="line">VALUES(&#39;john&#39;,&#39;0000&#39;),(&#39;lily&#39;,&#39;0000&#39;),(&#39;rose&#39;,&#39;0000&#39;),(&#39;jack&#39;,&#39;0000&#39;),(&#39;tom&#39;,&#39;0000&#39;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">END $</span><br><span class="line">#调用</span><br><span class="line">CALL myp1()$</span><br></pre></td></tr></table></figure><p>2.创建一个带in模式参数的存储过程</p><p>案例：创建存储过程实现 根据女神名，查询对应的男神信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CREATE PROCEDURE myp2(IN beautyName VARCHAR(20))</span><br><span class="line">BEGIN</span><br><span class="line">SELECT bo.*</span><br><span class="line">FROM boys bo</span><br><span class="line">RIGHT JOIN beauty b on bo.id&#x3D;b.boyfriend_id</span><br><span class="line">WHERE b.name&#x3D;beautyName;</span><br><span class="line"></span><br><span class="line">END $</span><br><span class="line">#调用</span><br><span class="line">CALL myp2(&#39;小昭&#39;);</span><br></pre></td></tr></table></figure><p>案例：创建存储过程实现：用户是否登录成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER W</span><br><span class="line">CREATE PROCEDURE myp3(IN username VARCHAR(20),IN PASSWORD VARCHAR(20))</span><br><span class="line">BEGIN</span><br><span class="line">DECLARE result INT DEFAULT 0;#声明并初始化</span><br><span class="line"></span><br><span class="line">SELECT COUNT(*) INTO result #赋值</span><br><span class="line">FROM admin</span><br><span class="line">WHERE admin.username&#x3D;username</span><br><span class="line">AND admin.&#96;password&#96;&#x3D;&#96;password&#96;;</span><br><span class="line"></span><br><span class="line">SELECT IF(result&gt;0,&#39;成功&#39;,&#39;失败&#39;);#使用</span><br><span class="line">END W</span><br><span class="line">#调用</span><br><span class="line">CALL myq3(&#39;张飞&#39;,&#39;8888&#39;)W</span><br></pre></td></tr></table></figure><p>案例：根据女神名返回对应的男神名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE PROCEDURE myp5(IN beautyName VARCHAR(20),OUT boyName VARCHAR(20))</span><br><span class="line">BEGIN</span><br><span class="line">SELECT bo.boyName INTO boyName</span><br><span class="line">FROM boys bo</span><br><span class="line">INNER JOIN beauty b ON bo.id &#x3D; b.boyfriend_id</span><br><span class="line">WHERE b.name&#x3D;beautyName;</span><br><span class="line">END ;</span><br><span class="line"></span><br><span class="line">#调用</span><br><span class="line">CALL myp5(&#39;小昭&#39;,@bName);</span><br><span class="line">SELECT @bName;</span><br></pre></td></tr></table></figure><p>案例：根据女神名，返回对应的男生名和男神魅力值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CREATE PROCEDURE myp6(IN beautyName VARCHAR(20),OUT boyName VARCHAR(20),OUT userCP INT)</span><br><span class="line">BEGIN</span><br><span class="line">SELECT bo.boyName,bo.userCP INTO boyName,userCP</span><br><span class="line">FROM boys bo</span><br><span class="line">INNER JOIN beauty b ON bo.id &#x3D; b.boyfriend_id</span><br><span class="line">WHERE b.name&#x3D;beautyName;</span><br><span class="line">END ;</span><br><span class="line"></span><br><span class="line">CALL myp6(&#39;小昭&#39;,@bName,@userCP);</span><br><span class="line">SELECT @bName,@userCP;5</span><br></pre></td></tr></table></figure><p>4.创建带inout模式参数的存储过程</p><p>案例：传入a，b两个值，最终a和b都翻倍并返回</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE PROCEDURE myp8(INOUT a INT,INOUT b INT)</span><br><span class="line">BEGIN</span><br><span class="line">SET a&#x3D;a*2;</span><br><span class="line">SET b&#x3D;b*2;</span><br><span class="line">END ;</span><br><span class="line"></span><br><span class="line">SET @m&#x3D;10;</span><br><span class="line">set @n&#x3D;20;</span><br><span class="line">CALL myp8(@m,@n);</span><br><span class="line"></span><br><span class="line">select @m,@n;</span><br></pre></td></tr></table></figure><p>删除存储过程</p><p>语法：drop procedure  存储过程名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP PROCEDURE p1;</span><br></pre></td></tr></table></figure><p>查看存储过程的信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW CREATE PROCEDURE myp2;</span><br></pre></td></tr></table></figure><blockquote><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4></blockquote><p>含义：一组预先编译好的SQL语句的集合，理解成批处理语句</p><p>好处：</p><p>1.提高代码的重用性</p><p>2.简化操作</p><p>3.减少了编译次数并且减少了和数据库服务器的连接次数，提高了效率</p><p>区别：</p><p>存储过程：可以有0个返回值，也可以有多个返回，适合做批量插入、批量更新</p><p>函数：有且仅有一个返回值，适合做处理数据后返回一个结果</p><p>创建语法：</p><p><code>CREATER FUNCTION 函数（参数列表） RETURN&lt;u&gt;S&lt;/u&gt; 返回类型</code></p><p><code>BEGIN</code></p><p>​                        <code>函数体</code></p><p><code>END</code></p><p>ps：</p><p>1.参数列表包含：函数名、函数类型</p><p>2.函数体：一定要有return语句，如果没有会报错。</p><p>3.函数体中仅有一句话，则可以省略begin end</p><p>4.使用delimiter语句设置结束标记</p><p>调用语法：</p><p><code>select 函数名（参数列表）</code></p><p>1.无参有返回值</p><p>案例：返回公司的员工个数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">set global log_bin_trust_function_creators&#x3D;1;</span><br><span class="line"></span><br><span class="line">CREATE FUNCTION myf1() RETURNS INT</span><br><span class="line">BEGIN</span><br><span class="line">DECLARE c INT DEFAULT 0;#定义变量</span><br><span class="line">SELECT COUNT(*) INTO c</span><br><span class="line">FROM employees;</span><br><span class="line">RETURN c;</span><br><span class="line">END ;</span><br><span class="line"></span><br><span class="line">SELECT myf1();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.有参有返回</p><p>案例：根据员工名，返回它的工资</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CREATE FUNCTION myf2(empName VARCHAR(20)) RETURNS DOUBLE</span><br><span class="line">BEGIN</span><br><span class="line">SET @sal&#x3D;0;#定义用户变量</span><br><span class="line">SELECT salary INTO @sal #赋值</span><br><span class="line">FROM employees</span><br><span class="line">WHERE last_name&#x3D;empName;</span><br><span class="line"></span><br><span class="line">RETURN @sal;</span><br><span class="line">END ;</span><br><span class="line">SELECT myf2(&#39;kochhar&#39;);</span><br></pre></td></tr></table></figure><p>案例：根据部门名，返回该部门的平均工资</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CREATE FUNCTION myf3(deptName VARCHAR(20)) RETURNS DOUBLE</span><br><span class="line">BEGIN</span><br><span class="line">DECLARE sal DOUBLE;</span><br><span class="line">SELECT AVG(salary) INTO sal</span><br><span class="line">FROM employees e</span><br><span class="line">JOIN departments d ON e.department_id&#x3D;d.department_id</span><br><span class="line">WHERE d.department_name&#x3D;deptName;</span><br><span class="line">RETURN sal;</span><br><span class="line">END ;</span><br><span class="line">SELECT myf3(&#39;IT&#39;);</span><br></pre></td></tr></table></figure><p>查看函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW CREATE FUNCTION myf3;</span><br></pre></td></tr></table></figure><p>删除函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP FUNCTION myf3;</span><br></pre></td></tr></table></figure><p>案例：创建函数，实现传入两个float，返回二者之和</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE FUNCTION test_fun1(num1 FLOAT,num2 FLOAT) RETURNS FLOAT</span><br><span class="line">BEGIN</span><br><span class="line">DECLARE SUM FLOAT DEFAULT 0;</span><br><span class="line">SET SUM&#x3D;num1+num2;</span><br><span class="line">RETURN SUM;</span><br><span class="line">END ;</span><br><span class="line">SELECT test_fun1(1,2);</span><br></pre></td></tr></table></figure><h1 id="7-流程控制结构"><a href="#7-流程控制结构" class="headerlink" title="7. 流程控制结构"></a>7. 流程控制结构</h1><p>分类：</p><p>顺序结构：程序从上往下依次 执行</p><p>分支结构：程序从两条或多条路径中选择一条去执行</p><p>循环结构：程序在满足一定条件的基础上，重复执行一段代码</p><h3 id="7-1-分支结构"><a href="#7-1-分支结构" class="headerlink" title="7.1 分支结构"></a>7.1 分支结构</h3><p>1.if函数</p><p>功能：实现简单的双分支</p><p>语法：</p><p><code>IF(表达式1，表达式2，表达式3)</code></p><p>执行顺序：</p><p>如果表达式1成立，则if函数返回表示式2的值，否则返回表达式3的值</p><p>应用：任何地方</p><p>2.case结构</p><p>情况1：类似于java中的switch语句，一般用于实现等值判断</p><p>语法：    </p><p>​                    <code>CASE 变量|表达式|字段</code></p><p>​                    <code>WHEN 要判断的值 THEN 返回的值1或语句2</code>；</p><p>​                    <code>WHEN 要判断的值 THEN 返回的值2或语句2;</code></p><p>​                    <code>……</code></p><p>​                    <code>ELSE 要返回的值n或语句n;</code></p><p>​                    <code>END CASE;</code></p><p>情况2：类似于java中的多重IF语句，一般用于实现区间判断</p><p>语法：</p><p>​                    <code>CASE </code></p><p>​                    <code>WHEN 要判断的条件1 THEN 返回的值1或语句1;</code></p><p>​                    <code>WHEN 要判断的条件2 THEN 返回的值2</code>或语句2;</p><p>​                    <code>……</code></p><p>​                    <code>ELSE 要返回的值n</code></p><p>​                    <code>END</code> <code>CASE;</code></p><p>特点：</p><ul><li><p>可以作为表达式，嵌套在其他语句中使用，可以 放在任何地方，BEGIN END中或BEGIN END的外面</p></li><li><p>可以作为独立的语句去使用，只能放在BEGIN END中</p></li></ul><ul><li>如果WHEN中的值满足或条件成立，则执行对应的THEN后面的语句，并且结束CASE</li></ul><p>如果都不满足，则执行ELSE中的语句或值</p><ul><li>ELSE语句可以省略，如果省略，并且所有WHEN条件都不满足，则返回NULL</li></ul><p>案例：</p><p>创建存储过程，根据传入的成绩，来显示等级，比如传入的成绩：90-100，显示B，60-80显示C</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE PROCEDURE test_case(IN score INT)</span><br><span class="line">BEGIN</span><br><span class="line">CASE</span><br><span class="line">WHEN score&gt;&#x3D;90 AND score&lt;100 THEN SELECT &#39;A&#39;;</span><br><span class="line">WHEN score&gt;&#x3D;80 THEN SELECT &#39;B&#39;;</span><br><span class="line">WHEN score&gt;&#x3D;60 THEN SELECT &#39;C&#39;;</span><br><span class="line">ELSE SELECT &#39;D&#39;;</span><br><span class="line">END CASE;</span><br><span class="line">END ;</span><br><span class="line"></span><br><span class="line">CALL test_case(95);</span><br></pre></td></tr></table></figure><p>3.if结构</p><p>功能：实现多重分支</p><p>语法：</p><p><code>if 条件1 then 语句1；</code></p><p><code>elseif 条件2 then 语句2；</code></p><p><code>……</code></p><p><code>【else 语句n；】</code></p><p><code>end if;</code></p><p>应用场景：应用在begin end中</p><p>案例：</p><p>创建存储过程，根据传入的成绩，来返回等级，比如传入的成绩：90-100，显示A，80-90返回B,60-80返回C</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE FUNCTION test_if(score INT) RETURNS CHAR</span><br><span class="line">BEGIN</span><br><span class="line"></span><br><span class="line">IF score&gt;&#x3D;90 AND score&lt;100 THEN RETURN &#39;A&#39;;</span><br><span class="line">ELSEIF score&gt;&#x3D;80 THEN RETURN &#39;B&#39;;</span><br><span class="line">ELSEIF score&gt;&#x3D;60 THEN RETURN &#39;C&#39;;</span><br><span class="line">ELSE RETURN &#39;D&#39;;</span><br><span class="line">END IF;</span><br><span class="line">END ;</span><br><span class="line"></span><br><span class="line">select test_if(80);</span><br></pre></td></tr></table></figure><h3 id="7-2-循环结构"><a href="#7-2-循环结构" class="headerlink" title="7.2 循环结构"></a>7.2 循环结构</h3><p>分类：</p><p>while、loop、repeat</p><p>循环控制：</p><p>iterate 类似于continue，继续，结束本次循环，继续下一次</p><p>leave 类似于 break，跳出，结束当前所在的循环</p><p>1.while</p><p>语法：</p><p><code>【标签：】while 循环条件 do</code></p><p>​                    <code>循环体；</code></p><p><code>end while 【标签：】</code></p><p>联想：</p><p><code>while(循环条件)&#123;</code></p><p>​                <code>循环体；</code></p><p><code>&#125;</code></p><p>2.loop</p><p>语法：</p><p><code>【标签：】loop</code></p><p>​                    <code>循环体；</code></p><p><code>end loop【标签】；</code></p><p>可以用来模拟简单的死循环</p><p>3.repeat</p><p>语法：</p><p><code>【标签：】repeat</code></p><p>​                    <code>循环体；</code></p><p><code>until 结束循环的条件</code></p><p><code>end repeat 【标签】；</code></p><p>案例：批量插入，根据次数插入到admin表中多条记录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CREATE PROCEDURE pro_while1(IN insertCount INT)</span><br><span class="line">BEGIN</span><br><span class="line">DECLARE I INT DEFAULT 1;</span><br><span class="line">WHILE I&lt;&#x3D;insertCount DO</span><br><span class="line">INSERT INTO admin(username,password) VALUES(CONCAT(&#39;Rose&#39;,I),&#39;666&#39;);</span><br><span class="line">SET I&#x3D;I+1;</span><br><span class="line">END WHILE;</span><br><span class="line">END ;</span><br><span class="line"></span><br><span class="line">CALL pro_while1(100);</span><br><span class="line"></span><br><span class="line">SELECT * FROM admin;</span><br></pre></td></tr></table></figure><p>2.添加leave语句</p><p>案例：批量插入，根据次数插入到admin表中多条记录，如果次数&gt;20就停止</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">DROP PROCEDURE pro_while1;</span><br><span class="line">CREATE PROCEDURE pro_while1(IN insertCount INT)</span><br><span class="line">BEGIN</span><br><span class="line">DECLARE I INT DEFAULT 1;</span><br><span class="line">a:WHILE I&lt;&#x3D;insertCount DO</span><br><span class="line">INSERT INTO admin(username,password) VALUES(CONCAT(&#39;Huahua&#39;,I),&#39;1111&#39;);</span><br><span class="line">IF I&gt;&#x3D;20 THEN LEAVE a;</span><br><span class="line">END IF;</span><br><span class="line">SET I&#x3D;I+1;</span><br><span class="line">END WHILE a;</span><br><span class="line">END ;</span><br><span class="line"></span><br><span class="line">CALL pro_while1(100);</span><br><span class="line"></span><br><span class="line">SELECT * FROM admin;</span><br></pre></td></tr></table></figure><p>3.添加iterate语句</p><p>案例：批量插入，根据次数插入到admin表中多条记录，只插入偶数次</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">TRUNCATE TABLE admin;</span><br><span class="line">DROP PROCEDURE pro_while1;</span><br><span class="line">CREATE PROCEDURE pro_while1(IN insertCount INT)</span><br><span class="line">BEGIN</span><br><span class="line">DECLARE I INT DEFAULT 0;</span><br><span class="line">a:WHILE I&lt;&#x3D;insertCount DO</span><br><span class="line">SET I&#x3D;I+1;</span><br><span class="line">IF MOD(I,2)!&#x3D;0 THEN ITERATE a;</span><br><span class="line">END IF;</span><br><span class="line">INSERT INTO admin(username,password) VALUES(CONCAT(&#39;Huahua&#39;,I),&#39;1111&#39;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">END WHILE a;</span><br><span class="line">END ;</span><br><span class="line"></span><br><span class="line">CALL pro_while1(100);</span><br><span class="line"></span><br><span class="line">SELECT * FROM admin;</span><br></pre></td></tr></table></figure><p>总结：</p><table><thead><tr><th>名称</th><th>特点</th><th>位置</th></tr></thead><tbody><tr><td>while</td><td>先判断后执行</td><td>begin end中</td></tr><tr><td>repeat</td><td>先执行后判断</td><td></td></tr><tr><td>loop</td><td>没有条件的死循环</td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库的相关概念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博弈论</title>
      <link href="2021/02/23/%E5%8D%9A%E5%BC%88%E8%AE%BA/"/>
      <url>2021/02/23/%E5%8D%9A%E5%BC%88%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="五个重要结论"><a href="#五个重要结论" class="headerlink" title="五个重要结论"></a>五个重要结论</h1><blockquote><p> 永远不要选择严格劣势策略</p></blockquote><blockquote><p>理性造成了次优结果</p></blockquote><blockquote><p>如欲得之，必先知之</p></blockquote><blockquote><p>学会换位思考</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 暂无 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博弈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++学习</title>
      <link href="2021/02/10/C-%E5%AD%A6%E4%B9%A0/"/>
      <url>2021/02/10/C-%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="C-提高编程"><a href="#C-提高编程" class="headerlink" title="C++提高编程"></a>C++提高编程</h1><ul><li>C++泛型编程+STL技术</li></ul><h2 id="1-模板"><a href="#1-模板" class="headerlink" title="1.模板"></a>1.模板</h2><h3 id="1-1-模板的概念"><a href="#1-1-模板的概念" class="headerlink" title="1.1 模板的概念"></a>1.1 模板的概念</h3><p>模板就是建立<strong>通用的模具</strong>，大大<strong>提高复用性</strong>。</p><p>生活中类似月饼模具，ppt模板。</p><p>模板的特点：</p><ul><li>只是一个框架，不可直接使用</li><li>模板的通用不是万能的。</li></ul><h3 id="1-2-函数模板"><a href="#1-2-函数模板" class="headerlink" title="1.2 函数模板"></a>1.2 函数模板</h3><ul><li><p>C++另一种编程思想称为 <strong>泛型编程</strong>，主要利用的技术就是模板。</p></li><li><p>C++提供两种模板机制： <strong>函数模板</strong>和<strong>类模板</strong></p></li></ul><h4 id="1-2-1函数模板语法"><a href="#1-2-1函数模板语法" class="headerlink" title="1.2.1函数模板语法"></a>1.2.1函数模板语法</h4><p>函数模板作用：</p><p>建立一个通用函数，其函数返回值类型和形参类型可以不具体制定，用一个虚拟的类型来代表。</p><p><strong>语法</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="comment">//函数声明或定义</span></span><br></pre></td></tr></table></figure><p><strong>解释：</strong></p><p>template———声明创建模板</p><p>typename——-表面其后面的符号是一种数据类型，可以用class代替</p><p>​        T         ——通用的数据类型，名称可以替换，通常为大写字母</p><p><strong>示例：</strong></p><p>如果我们要实现两个整型数据的交换，我们写出以下函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swapInt</span><span class="params">(<span class="keyword">int</span> &amp;a, <span class="keyword">int</span> &amp;b)</span>   <span class="comment">//用引用的方式传递，因此会交换本体</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是如果我们要实现两个浮点型数据的交换，我们又要重新再写一个函数，如果我们还需要交换字符型函数，string类型函数，bool类型函数，自定义数据类型，是不是还需要再写n个函数来满足我们的需求，这样的话效率极低，而且每个函数只是数据类型不同，其他都基本相同，因此为了提高效率，提高函数的复用性，我们使用模板技术：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">emplate&lt;typename T&gt; &#x2F;&#x2F;声明一个模板，T是一个通用数据类型</span><br><span class="line">void mySwap(T&amp; a, T&amp; b)</span><br><span class="line">&#123;</span><br><span class="line">T temp &#x3D; a;</span><br><span class="line">a &#x3D; b;</span><br><span class="line">b &#x3D; temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是我们应该如何使用模板呢，这里有2种办法：</p><ul><li><p>自动类型推导</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">mySwap</span>(a, b);  <span class="comment">//这里不明写a，b是哪种数据类型，而是交给编译器自动推导</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>显示指定类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mySwap&lt;int&gt;(a, b);   &#x2F;&#x2F;在&lt;&gt;中指明数据类型</span><br></pre></td></tr></table></figure></li></ul><p>总结：</p><ul><li>函数模板利用关键字template</li><li>使用函数模板2种方式：自动类型推导、显示指定类型</li><li>模板的目的：提到复用性，将类型参数化</li></ul><h4 id="1-2-2-函数模板注意事项"><a href="#1-2-2-函数模板注意事项" class="headerlink" title="1.2.2 函数模板注意事项"></a>1.2.2 函数模板注意事项</h4><p>注意事项：</p><ul><li>自动类型推导，必须推导出一致的数据类型T，才可以使用</li><li>模板必须要确定出T的数据类型，才可以使用</li></ul><p><strong>示例1：</strong></p><p>错误写法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">char b = &#x27;20&#x27;;</span><br><span class="line"><span class="built_in">mySwap</span>(a, b);  <span class="comment">//数据类型不一致！！！报错</span></span><br></pre></td></tr></table></figure><p><strong>示例2：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;func 调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">func</span>();<span class="comment">//报错，因为未指定数据类型</span></span><br><span class="line">func&lt;<span class="keyword">int</span>&gt;();<span class="comment">//正确：为了解决上述问题，可以给T一个数据类型如int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-3-函数模板案例"><a href="#1-2-3-函数模板案例" class="headerlink" title="1.2.3 函数模板案例"></a>1.2.3 函数模板案例</h4><p>案例描述：</p><ul><li>利用函数模板封装一个排序函数，可以对不同数据类型数组进行排序</li><li>排序规定：从小到大，排序算法为选择排序</li><li>分别利用<strong>char数组</strong>和<strong>int数组</strong>进行测试</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="comment">//声明一个模板，T是一个通用数据类型</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(T a[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> min;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">min = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; len; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[j] &lt; a[min])</span><br><span class="line">&#123;</span><br><span class="line">min = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (min != i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">mySwap</span>(a[min], a[i]);<span class="comment">//这个函数在前面写过了</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)  <span class="comment">//ps:最好把输出函数也封装成一个函数模板</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> arr[] = <span class="string">&quot;adbce&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> num = <span class="built_in"><span class="keyword">sizeof</span></span>(arr) / <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">char</span>);</span><br><span class="line"><span class="built_in">sort</span>(arr, num);</span><br></pre></td></tr></table></figure><p>输出：</p><p>  a b c d e</p><h4 id="1-2-4-普通函数与函数模板的区别"><a href="#1-2-4-普通函数与函数模板的区别" class="headerlink" title="1.2.4 普通函数与函数模板的区别"></a>1.2.4 普通函数与函数模板的区别</h4><p><strong>普通函数与函数模板区别</strong>：</p><ul><li>普通函数调用时可以发生自动类型转换（隐式类型转换）</li><li>函数模板调用时，如果利用自动类型推导，不会发生隐式类型转换</li><li>如果利用显示指定类型方式，可以发生隐式类型转换</li></ul><p><strong>示例</strong>：</p><p>普通函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">myAdd01</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">char</span> c = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line">cout &lt;&lt; <span class="built_in">myAdd01</span>(a, c) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><p>109</p><p>分析：c对应的ASCII码是99，与10相加刚好等于109,发生了隐式类型转换</p><p>函数模板类：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">myAdd02</span><span class="params">(T a, T b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">char</span> c = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自动类型推导---不会发生隐式类型转换</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">myAdd02</span>(a, c) &lt;&lt; endl;<span class="comment">//报错，参数不一致</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//显示指定类型---会发生隐式类型转换</span></span><br><span class="line">cout&lt;&lt; myAddd02&lt;<span class="keyword">int</span>&gt;(a, c) &lt;&lt; endl;<span class="comment">//正确，成功输出109</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：建议使用显示指定类型的方式，调用函数模板，因为可以自己确定通用类型T</p><h4 id="1-2-5-普通函数和函数模板的调用规则"><a href="#1-2-5-普通函数和函数模板的调用规则" class="headerlink" title="1.2.5 普通函数和函数模板的调用规则"></a>1.2.5 普通函数和函数模板的调用规则</h4><p>调用规则如下：</p><ol><li>如果函数模板和普通函数皆可实现，优先调用普通函数</li><li>可以通过空模板参数列表来强制调用函数模板</li><li>函数模板也可以发生重载</li><li>如果函数模板可以产生更好的匹配，优先调用函数模板</li></ol><p><strong>示例：</strong></p><p>1.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myPrint</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;普通函数的调用&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myPrint</span><span class="params">(T a, T b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;函数模板&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">myPrint</span>(a,b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：普通函数的调用</p><p>2.</p><p>修改上述代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myPrint&lt;&gt;(a,b);&#x2F;&#x2F;通过空模板强制调用模板函数</span><br></pre></td></tr></table></figure><p>结果：函数模板</p><p>3.</p><p>在上述代码增加一个函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myPrint</span><span class="params">(T a, T b, T c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;函数模板的重载&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myPrint&lt;&gt;(a,b,<span class="number">100</span>);</span><br></pre></td></tr></table></figure><p>结果：函数模板的重载</p><p>4.</p><p>测试：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myPrint&lt;&gt;(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>);<span class="comment">//如果函数模板可以产生更好的匹配，优先调用函数模板</span></span><br></pre></td></tr></table></figure><p>总结：既然提供了函数模板，最好不要提供普通函数，以免出现二义性。</p><h4 id="1-2-6-模板的局限性"><a href="#1-2-6-模板的局限性" class="headerlink" title="1.2.6 模板的局限性"></a>1.2.6 模板的局限性</h4><p>局限性：模板的通用性并不是万能的</p><p>例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(T a, T b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">a = b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中提供的赋值操作，如果传入的a和b是一个数组，就无法实现了</p><p>再例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(T a, T b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a &gt; b)</span><br><span class="line">&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，如果T的数据类型传入的是像Person这样的自定义数据类型，也无法正常运行。</p><p>因此C++为了解决这种问题，提供模板的重载，可以为这些<strong>特定的类型</strong>提供<strong>具体化的模板</strong>。</p><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(string name, <span class="keyword">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line">m_name = name;</span><br><span class="line">m_age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">string m_name;</span><br><span class="line"><span class="keyword">int</span> m_age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对比两个数据是否相等</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">myCompare</span><span class="params">(T&amp; a, T&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a == b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">bool</span> ret = <span class="built_in">myCompare</span>(a, b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ret)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a==b&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a!=b&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//重载格式：先写template，再写尖括号</span></span><br><span class="line"><span class="keyword">template</span>&lt;&gt; <span class="function"><span class="keyword">bool</span> <span class="title">myCompare</span><span class="params">(Person&amp; p1, Person&amp; p2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p1.m_age == p2.m_age &amp;&amp; p1.m_name == p2.m_name)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;Tom&quot;</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;Tom&quot;</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> ret = <span class="built_in">myCompare</span>(p1, p2);</span><br><span class="line"><span class="keyword">if</span> (ret)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;相等&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;不相等&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>利用具体化的模板，可以解决自定义类型的通用化</li><li>学习模板并不是为了写模板，而是在STL能够运用系统提供的模板</li></ul><h3 id="1-3-类模板"><a href="#1-3-类模板" class="headerlink" title="1.3 类模板"></a>1.3 类模板</h3><h4 id="1-3-1-类模板语法"><a href="#1-3-1-类模板语法" class="headerlink" title="1.3.1 类模板语法"></a>1.3.1 类模板语法</h4><p>类模板作用：建立一个同类，类中的成员 数据类型可以不具体制定，用一个<strong>虚拟的类型</strong>来代表。</p><p>语法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">类</span><br></pre></td></tr></table></figure><p>解释：</p><p>template—–声明创建模板</p><p>typename—表明其后的符号是一种数据类型，可以用class代替</p><p>   T————-通用的数据类型，名称可以替换，通常为大写字母</p><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类模板，要有两个数据类型模板</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">NameType</span>,<span class="keyword">class</span> <span class="title">AgeType</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(NameType name, AgeType age)</span><br><span class="line">&#123;</span><br><span class="line">m_name = name;</span><br><span class="line">m_age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showPerson</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;name:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_name &lt;&lt; <span class="string">&quot; age:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NameType m_name;</span><br><span class="line">AgeType m_age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person&lt;string, int&gt; p1(&quot;Tom&quot;, 10);</span><br><span class="line">p1.<span class="built_in">showPerson</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-2-类模板与函数模板的区别"><a href="#1-3-2-类模板与函数模板的区别" class="headerlink" title="1.3.2 类模板与函数模板的区别"></a>1.3.2 类模板与函数模板的区别</h4><p>主要有两点:</p><p>​    1.类模板没有自动类型推导的使用方式</p><p>​    2.类模板在模板参数列表中可以有默认参数</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类模板</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">NameType</span>,<span class="keyword">class</span> <span class="title">AgeType</span> =</span> <span class="keyword">int</span>&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(NameType name, AgeType age)</span><br><span class="line">&#123;</span><br><span class="line">m_name = name;</span><br><span class="line">m_age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showPerson</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;name:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_name &lt;&lt; <span class="string">&quot; age:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NameType m_name;</span><br><span class="line">AgeType m_age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Person&lt;string&gt; <span class="title">p1</span><span class="params">(<span class="string">&quot;Tom&quot;</span>, <span class="number">10</span>)</span></span>;<span class="comment">//没有指明数据类型就使用默认数据类型</span></span><br><span class="line">p1.<span class="built_in">showPerson</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-3-类模板中成员函数创建时机"><a href="#1-3-3-类模板中成员函数创建时机" class="headerlink" title="1.3.3 类模板中成员函数创建时机"></a>1.3.3 类模板中成员函数创建时机</h4><p>类模板中成员函数和普通类中成员函数创建时机是有区别的：</p><ul><li>普通类中的成员函数一开始就可以创建</li><li>类模板中的成员函数在调用时才创建</li></ul><h4 id="1-3-4-类模板对象做函数参数"><a href="#1-3-4-类模板对象做函数参数" class="headerlink" title="1.3.4 类模板对象做函数参数"></a>1.3.4 类模板对象做函数参数</h4><p>类模板实例化的对象，向函数传参的方式</p><p>一共有三种传入方式：</p><ol><li>指定传入类型———直接显示对象的数据类型</li><li>参数模板化————将对象中的参数变为模板进行传递</li><li>整个类模板化———将这个对象类型 模板化进行传递</li></ol><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类模板</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">NameType</span>,<span class="keyword">class</span> <span class="title">AgeType</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>(NameType name, AgeType age)</span><br><span class="line">&#123;</span><br><span class="line">m_name = name;</span><br><span class="line">m_age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showPerson</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;name:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_name &lt;&lt; <span class="string">&quot; age:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NameType m_name;</span><br><span class="line">AgeType m_age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.指定传入类型</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printperson1</span><span class="params">(Person&lt;string, <span class="keyword">int</span>&gt;&amp; p1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">p1.<span class="built_in">showPerson</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.参数模板化</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="keyword">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printperson2</span><span class="params">(Person&lt;T1, T2&gt;&amp; p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">p.<span class="built_in">showPerson</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.整个类模板化</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printperson3</span><span class="params">(T&amp; p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">p.<span class="built_in">showPerson</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test03</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person&lt;string, int&gt; p(&quot;bluesgler&quot;, 17);</span><br><span class="line"><span class="built_in">printperson3</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person&lt;string,int&gt; p1(&quot;Tom&quot;, 10);</span><br><span class="line"><span class="built_in">printperson1</span>(p1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person&lt;string, int&gt; p(&quot;Lriver&quot;, 17);</span><br><span class="line"><span class="built_in">printperson2</span>(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>通过类模板创建的对象，可以有三种方式向函数中进行传参</li><li>使用比较广泛是第一种，指定传入的类型</li></ul><h4 id="1-3-5-类模板与继承"><a href="#1-3-5-类模板与继承" class="headerlink" title="1.3.5 类模板与继承"></a>1.3.5 类模板与继承</h4><p>当类模板碰到继承时，需要注意以下几点：</p><ul><li>当子类继承的父类是一个类模板时，子类在声明的时候，要指定父类的T类型</li><li>如果不指定，编译器无法给子类分配内存</li><li>如果想灵活指出父类中T的类型，子类也需要变为类模板</li></ul><p>示例1：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">T m;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Class Son public Base  //报错，必须要知道父类中的T类型才能继承给子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> :</span><span class="keyword">public</span> Base&lt;<span class="keyword">int</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>示例2：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">T m;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果想灵活指定父类中T类型，子类也需要变类模板</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="keyword">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son2</span> :</span><span class="keyword">public</span> Base&lt;T2&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">Son2</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;T1的类型为：&quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">typeid</span></span>(T1).name &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;T2的类型为：&quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">typeid</span></span>(T2).name &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">T1 obj;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Son2&lt;<span class="keyword">int</span>, <span class="keyword">char</span>&gt;S2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：如果父类是类模板，子类需要指定出父类中T的数据类型</p><h4 id="1-3-6-类模板成员函数类外实现"><a href="#1-3-6-类模板成员函数类外实现" class="headerlink" title="1.3.6 类模板成员函数类外实现"></a>1.3.6 类模板成员函数类外实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="keyword">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>(T1 name, T2 age);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showPerson</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">T1 m_Name;</span><br><span class="line">T2 m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造函数类外实现</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="keyword">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line">Person&lt;T1,T2&gt;::<span class="built_in">Person</span>(T1 name, T2 age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//成员函数类外实现</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="keyword">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> Person&lt;T1, T2&gt;::<span class="built_in">showPerson</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="string">&quot;年龄：&quot;</span> &lt;&lt;<span class="keyword">this</span>-&gt;m_Age&lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person&lt;string, <span class="keyword">int</span>&gt;<span class="built_in">p1</span>(<span class="string">&quot;Tom&quot;</span>, <span class="number">10</span>);</span><br><span class="line">p1.<span class="built_in">showPerson</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：类模板中成员函数类外实现时，需要加上模板参数列表</p><h4 id="1-3-7-类模板分文件编写"><a href="#1-3-7-类模板分文件编写" class="headerlink" title="1.3.7 类模板分文件编写"></a>1.3.7 类模板分文件编写</h4><p>问题：</p><ul><li>类模板中成员函数创建时机在调用阶段，导致分文件编写时链接不到</li></ul><p>解决：</p><ul><li>way1：直接包含.cpp源文件</li><li>way2：将声明和实现写到同一个文件中，并更改后缀名为.hpp,hpp是约定的名称，并不是强制</li></ul><p>示例：</p><p>person.h中的代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>, <span class="keyword">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>(T1 name, T2 age);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showPerson</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">T1 m_Name;</span><br><span class="line">T2 m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>person.cpp中的代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;person.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>, <span class="keyword">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line">Person&lt;T1, T2&gt;::<span class="built_in">Person</span>(T1 name, T2 age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//成员函数类外实现</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>, <span class="keyword">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> Person&lt;T1, T2&gt;::<span class="built_in">showPerson</span>()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="string">&quot;年龄：&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>含有main函数的.cpp中的代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;person.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person&lt;string, <span class="keyword">int</span>&gt;<span class="built_in">p1</span>(<span class="string">&quot;Tom&quot;</span>, <span class="number">10</span>);</span><br><span class="line">p1.<span class="built_in">showPerson</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test01</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>运行一下，发生报错了，怎么回事呢？</p><p>因为类模板中成员函数在调用时才创建，编译器预先是读不到person.h和person.cpp中的部分代码，因此出错。</p><p>这里有两种解决方法：</p><p>1.直接在main函数中包含person.cpp文件，即用person.cpp替换person.h</p><p>2.将.h和.cpp中的内容写到一起，将后缀名改为.hpp文件</p><p>总结：</p><p>主流的解决方式是第二种，将类模板成员函数写到一起，并将后缀名改为.hpp</p><h4 id="1-3-8-类模板与友元"><a href="#1-3-8-类模板与友元" class="headerlink" title="1.3.8 类模板与友元"></a>1.3.8 类模板与友元</h4><p>类模板配合友元函数的类内和类外实现</p><p>全局函数类内实现-直接在类内声明友元即可</p><p>全局函数类外实现-需要提前让编译器知道全局函数的存在</p><p><strong>示例：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//提前让编译器知道Person类的存在</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>, <span class="keyword">class</span> <span class="title">t2</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//类外实现</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>, <span class="keyword">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printPerson2</span><span class="params">(Person&lt;T1, T2&gt;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;类型---姓名：&quot;</span> &lt;&lt; p.m_Name &lt;&lt; <span class="string">&quot;类外---年龄：&quot;</span> &lt;&lt; p.m_Age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="keyword">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//全局函数 类内实现</span></span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">printPerson</span><span class="params">(Person&lt;T1, T2&gt;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; p.m_Name &lt;&lt; <span class="string">&quot;年龄：&quot;</span> &lt;&lt; p.m_Age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局函数 类外实现</span></span><br><span class="line"><span class="comment">//加空模板的参数列表</span></span><br><span class="line"><span class="comment">//如果全局函数是类外实现，务必让编译器提前知道这个函数存在</span></span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">void</span> printPerson2&lt;&gt;(Person&lt;T1, T2&gt;p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>(T1 name, T2 age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T1 m_Name;</span><br><span class="line">T2 m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局函数在类内实现</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person&lt;string, <span class="keyword">int</span>&gt;<span class="built_in">p</span>(<span class="string">&quot;Tom&quot;</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printPerson</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person&lt;string, <span class="keyword">int</span>&gt;<span class="built_in">p2</span>(<span class="string">&quot;Lriver&quot;</span>, <span class="number">80</span>);</span><br><span class="line"><span class="built_in">printPerson2</span>(p2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test02</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：建议全局函数做类内实现，用法简单，而且编译器可以直接识别</p><h4 id="1-3-9-类模板案例"><a href="#1-3-9-类模板案例" class="headerlink" title="1.3.9 类模板案例"></a>1.3.9 类模板案例</h4><p>案例描述：实现一个通用的数据类，要求如下：</p><ul><li>可以对内置数据类型以及自定义类型的数据进行存储</li><li>将数组中的数据存储到堆区</li><li>构造函数中可以传入数组的容量</li><li>提供对应的拷贝构造函数以及operator= 防止浅拷贝问题</li><li>提供尾插法和尾删法对数组中的数据进行增加和删除</li><li>可以通过下标的方式访问数据中的元素</li><li>可以获取数组中当前元素个数和数组的容量</li></ul><p><strong>示例：</strong></p><p>myArray.hpp中的代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通用数组类</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyArray</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//有参构造 参数 容量</span></span><br><span class="line"><span class="built_in">MyArray</span>(<span class="keyword">int</span> capacity)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Myarray 有参构造函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Capacity = capacity;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Size = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;pAddress = <span class="keyword">new</span> T[<span class="keyword">this</span>-&gt;m_Capacity];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//拷贝构造</span></span><br><span class="line"><span class="built_in">MyArray</span>(<span class="keyword">const</span> MyArray&amp; arr)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Myarray 拷贝构造函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Capacity = arr.m_Capacity;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Size = arr.m_Size;</span><br><span class="line"></span><br><span class="line"><span class="comment">//深拷贝</span></span><br><span class="line"><span class="keyword">this</span>-&gt;pAddress = <span class="keyword">new</span> T[arr.m_Capacity];</span><br><span class="line"></span><br><span class="line"><span class="comment">//将arr中的数据都拷贝过来</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_Size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;pAddress[i] = arr.pAddress[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//operator= 防止浅拷贝问题</span></span><br><span class="line">MyArray&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> MyArray&amp; arr)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;operator=调用&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//先判断原来堆区是否有数据，如果有先释放</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;pAddress != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;pAddress;</span><br><span class="line"><span class="keyword">this</span>-&gt;pAddress = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Capacity = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//深拷贝</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_Capacity = arr.m_Capacity;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Size = arr.m_Size;</span><br><span class="line"><span class="keyword">this</span>-&gt;pAddress = <span class="keyword">new</span> T[arr.m_Capacity];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>-&gt;m_Size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;pAddress[i] = arr.pAddress[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//尾插法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push_Back</span><span class="params">(<span class="keyword">const</span> T&amp; val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//判断容量是否等于大小</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Capacity == <span class="keyword">this</span>-&gt;m_Size)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>-&gt;pAddress[<span class="keyword">this</span>-&gt;m_Size] = val;<span class="comment">//在数组末尾插入数据</span></span><br><span class="line"><span class="keyword">this</span>-&gt;m_Size++;<span class="comment">//更新数组大小</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//尾删法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pop_Back</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//让用户访问不到最后一个元素，即为尾删，逻辑删除</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;m_Size == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Size--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过下标方式访问数组中的元素</span></span><br><span class="line">T&amp; <span class="keyword">operator</span>[](<span class="keyword">int</span> index)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;pAddress[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回数组容量</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getCapacity</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;m_Capacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回数组大小</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;m_Size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//析构函数</span></span><br><span class="line">~<span class="built_in">MyArray</span>()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;pAddress != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Myarray 有参析构函数调用&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;pAddress;</span><br><span class="line"><span class="keyword">this</span>-&gt;pAddress = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T * pAddress; <span class="comment">//指针指向堆区开辟的真实数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m_Capacity;<span class="comment">//数组容量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m_Size;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>测试整型数据</p><p>含main函数中的代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;MyArray.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printIntArray</span><span class="params">(MyArray &lt;<span class="keyword">int</span>&gt;&amp; arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.<span class="built_in">getSize</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; arr[i] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MyArray&lt;<span class="keyword">int</span>&gt;<span class="built_in">arr1</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//利用尾插法向数组中插入数据</span></span><br><span class="line">arr1.<span class="built_in">Push_Back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;arr1的打印输出为：&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">printIntArray</span>(arr1);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;arr1的容量为：&quot;</span> &lt;&lt;arr1.<span class="built_in">getCapacity</span>() &lt;&lt;  endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;arr1的容量为：&quot;</span> &lt;&lt; arr1.<span class="built_in">getSize</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">MyArray&lt;<span class="keyword">int</span>&gt;<span class="built_in">arr2</span>(arr1);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;arr2的打印输出：&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printIntArray</span>(arr2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//尾删</span></span><br><span class="line">arr2.<span class="built_in">Pop_Back</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;arr2尾删后：&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;arr2的容量：&quot;</span> &lt;&lt; arr2.<span class="built_in">getCapacity</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;arr2的大小为：&quot;</span> &lt;&lt; arr2.<span class="built_in">getSize</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p>Myarray 有参构造函数调用<br>arr1的打印输出为：<br>0<br>1<br>2<br>3<br>4<br>arr1的容量为：5<br>arr1的容量为：5<br>Myarray 拷贝构造函数调用<br>arr2的打印输出：<br>0<br>1<br>2<br>3<br>4<br>arr2尾删后：<br>arr2的容量：5<br>arr2的大小为：4<br>Myarray 有参析构函数调用<br>Myarray 有参析构函数调用</p><hr><p>测试自定义数据</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试自定义数据类型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">Person</span>() &#123;&#125;;</span><br><span class="line"><span class="built_in">Person</span>(string name, <span class="keyword">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">string m_Name;</span><br><span class="line"><span class="keyword">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printPersonArray</span><span class="params">(MyArray&lt;Person&gt;&amp; arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.<span class="built_in">getSize</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; arr[i].m_Name &lt;&lt; <span class="string">&quot;\t年龄：&quot;</span> &lt;&lt; arr[i].m_Age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">MyArray&lt;Person&gt; <span class="title">arr</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;孙悟空&quot;</span>, <span class="number">999</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;花花&quot;</span>, <span class="number">810</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p3</span><span class="params">(<span class="string">&quot;Lriver&quot;</span>, <span class="number">17</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p4</span><span class="params">(<span class="string">&quot;bulesgler&quot;</span>, <span class="number">17</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将数据插入到数组中</span></span><br><span class="line">arr.<span class="built_in">Push_Back</span>(p1);</span><br><span class="line">arr.<span class="built_in">Push_Back</span>(p2);</span><br><span class="line">arr.<span class="built_in">Push_Back</span>(p3);</span><br><span class="line">arr.<span class="built_in">Push_Back</span>(p4);</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印数组</span></span><br><span class="line"><span class="built_in">printPersonArray</span>(arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出容量</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;arr容量为：&quot;</span> &lt;&lt; arr.<span class="built_in">getCapacity</span>() &lt;&lt; endl;</span><br><span class="line"><span class="comment">//输出大小</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;arr大小为：&quot;</span> &lt;&lt; arr.<span class="built_in">getSize</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p>Myarray 有参构造函数调用<br>姓名：孙悟空    年龄：999<br>姓名：花花      年龄：810<br>姓名：Lriver    年龄：17<br>姓名：bulesgler 年龄：17<br>arr容量为：10<br>arr大小为：4<br>Myarray 有参析构函数调用</p><h2 id="2-STL初识"><a href="#2-STL初识" class="headerlink" title="2 STL初识"></a>2 STL初识</h2><h3 id="2-1-STL的诞生"><a href="#2-1-STL的诞生" class="headerlink" title="2.1 STL的诞生"></a>2.1 STL的诞生</h3><ul><li>长久以来，软件界一直希望建立一种可重复利用的东西</li><li>C++的<strong>面向对象</strong>和<strong>泛型编程</strong>思想，目的就是<strong>复用性的提升</strong></li><li>大多数情况下，数据结构和算法都未能有一套标准，导致被迫从事大量重复工作</li><li>为了建立数据结构和算法的一套标准，诞生了STL</li></ul><h3 id="2-2-STL基本概念"><a href="#2-2-STL基本概念" class="headerlink" title="2.2 STL基本概念"></a>2.2 STL基本概念</h3><ul><li>STL（Standard Template Library,<strong>标准模板库</strong>）</li><li>STL 从广义上分为：<strong>容器（container）</strong>，<strong>算法（algorithm）</strong>，<strong>迭代器（iterator）</strong></li><li><strong>容器</strong>和<strong>算法</strong>之间通过<strong>迭代器</strong>进行无缝连接</li><li>STL 几乎所有代码都采用了模板类或者模板函数</li></ul><h3 id="2-3-STL六大组件"><a href="#2-3-STL六大组件" class="headerlink" title="2.3 STL六大组件"></a>2.3 STL六大组件</h3><p>STL 大体分为六大组件，分别是：<strong>容器</strong>、<strong>算法</strong>、<strong>迭代器</strong>、<strong>仿函数</strong>、<strong>适配器（配接器）</strong>、<strong>空间配置器</strong></p><p>1.容器：各种数据结构，如vector、list、deque、set、map等，用来存放数据。</p><p>2.算法：各种常用的算法，如sort、find、copy、for_each等。</p><p>3.迭代器：扮演了容器与算法之间的胶合剂。</p><p>4.仿函数：行为类似函数，可作为算法的某种策略。</p><p>5.适配器：一种用来修饰容器或仿函数或迭代器接口的函数。</p><p>6.空间配置器：负责空间的分配与管理。</p><h3 id="2-4-STL中容器、算法、迭代器"><a href="#2-4-STL中容器、算法、迭代器" class="headerlink" title="2.4 STL中容器、算法、迭代器"></a>2.4 STL中容器、算法、迭代器</h3><p><strong>容器</strong>：置物之所也。</p><p>STL <strong>容器</strong>就是将运用<strong>最广泛的一些数据结构</strong>实现出来</p><p>常用的数据结构：数组，链表，树，栈，队列，集合，映射表等</p><p>这些容器分为：<strong>序列式容器</strong>和<strong>关联式容器</strong>两种：</p><ul><li><strong>序列式容器</strong>：强调值的排序，序列式容器中每个元素均有固定的位置</li><li><strong>关联式容器</strong>：二叉树结构，各元素之间没有样的物理上的顺序关系</li></ul><p><strong>算法</strong>：问题之解法也。</p><p>有限的步骤，解决逻辑或数学上的问题，这一门学科我们叫做算法（Algorithms）</p><p>算法分为：<strong>质变算法</strong>和<strong>非质变算法</strong>。</p><ul><li>质变算法：运算过程中会更改区间内元素的内容。eg：拷贝，替换，删除等。</li><li>非质变算法：运算过程中不会更改区间内元素内容，例如查找，计数，遍历。寻找极值等等。</li></ul><p><strong>迭代器</strong>：容器和算法之间的粘合剂</p><p>提供一种方法，使之能依序寻访某个容器的各个元素，而又无需暴露该容器的内部表示方式。</p><p>每个容器都有自己专属的迭代器。</p><p>迭代器种类：</p><table><thead><tr><th>种类</th><th>功能</th><th>支持运算</th></tr></thead><tbody><tr><td>输入迭代器</td><td>对数组的只读访问</td><td>只读，支持++、==、！=</td></tr><tr><td>输出迭代器</td><td>对数组的只写访问</td><td>只写，支持++</td></tr><tr><td>前向迭代器</td><td>读写操作，并能向前推进迭代器</td><td>读写，支持++、==、！=</td></tr><tr><td>双向迭代器</td><td>读写操作，并能向前和向后操作</td><td>读写，支持++，–</td></tr><tr><td>随机访问迭代器</td><td>读写操作，可以以跳跃的方式访问任意数据，功能最强迭代器</td><td>读写，支持++、–、[n]、-n、&lt;、&lt;=、&gt;、&gt;=</td></tr></tbody></table><p>常用的容器中迭代器种类为双向迭代器，随机迭代器。</p><h3 id="2-5-容器算法迭代器初识"><a href="#2-5-容器算法迭代器初识" class="headerlink" title="2.5 容器算法迭代器初识"></a>2.5 容器算法迭代器初识</h3><p>了解STL中容器、算法、迭代器概念之后，我们利用代码感受STL的魅力</p><p>STL 中最常用容器为Vector，可以理解为数组，下面我们将介绍如何向这个容器中插入数据，并遍历这个容器。</p><h4 id="2-5-1-vector存放内置数据类型"><a href="#2-5-1-vector存放内置数据类型" class="headerlink" title="2.5.1 vector存放内置数据类型"></a>2.5.1 vector存放内置数据类型</h4><p>容器：<code>vector</code></p><p>算法：<code>for_each</code></p><p>迭代器：<code>vector&lt;int&gt;::iterator</code></p><p>示例：</p><p>vector容器存放内置数据类型</p><p>第一种遍历方式，稍微有些复杂，注意使用vector容器要包含vector头文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F;创建了一个vector容器、数组</span><br><span class="line">vector&lt;int&gt; v;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;向容器中插入数据</span><br><span class="line">v.push_back(10);</span><br><span class="line">v.push_back(20);</span><br><span class="line">v.push_back(30);</span><br><span class="line">v.push_back(40);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;通过迭代器访问容器中的类型</span><br><span class="line">vector&lt;int&gt;::iterator itBegin &#x3D; v.begin();  &#x2F;&#x2F;起始迭代器，指向容器中第一个元素</span><br><span class="line">vector&lt;int&gt;::iterator itEnd &#x3D; v.end();  &#x2F;&#x2F;结束迭代器，指向容器中最后一个元素的下一个元素</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;第一种遍历方式</span><br><span class="line">while (itBegin !&#x3D; itEnd)</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F;把迭代器当成指针来使用，因此解引用</span><br><span class="line">cout &lt;&lt; *itBegin &lt;&lt; endl;</span><br><span class="line">itBegin++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种遍历方式，for循环 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;第二种遍历方式</span><br><span class="line">for (vector&lt;int&gt;::iterator it &#x3D; v.begin() ; it !&#x3D; v.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三种遍历方式，利用STL提供遍历算法for_each,要包含头文件algorithm，还有提供一个打印的函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;第三种遍历方式</span><br><span class="line">for_each(v.begin(), v.end(), myPrint);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">void myPrint(int val)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; val &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-5-2-Vector存放自定义数据类型"><a href="#2-5-2-Vector存放自定义数据类型" class="headerlink" title="2.5.2 Vector存放自定义数据类型"></a>2.5.2 Vector存放自定义数据类型</h4><p>学习目标：vector中存放自定义数据类型，并打印输出</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;vector容器中存放自定义数据类型</span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">Person(string name, int age)</span><br><span class="line">&#123;</span><br><span class="line">this-&gt;m_Name &#x3D; name;</span><br><span class="line">this-&gt;m_Age &#x3D; age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">string m_Name;</span><br><span class="line">int m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;Person&gt; v;</span><br><span class="line"></span><br><span class="line">Person p1(&quot;aaa&quot;, 10);</span><br><span class="line">Person p2(&quot;bbb&quot;, 20);</span><br><span class="line">Person p3(&quot;ccc&quot;, 30);</span><br><span class="line">Person p4(&quot;ddd&quot;, 40);</span><br><span class="line">Person p5(&quot;eee&quot;, 50);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;向容器中添加数据</span><br><span class="line">v.push_back(p1);</span><br><span class="line">v.push_back(p2);</span><br><span class="line">v.push_back(p3);</span><br><span class="line">v.push_back(p4);</span><br><span class="line">v.push_back(p5);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;遍历容器中的数据</span><br><span class="line">for (vector&lt;Person&gt;::iterator it &#x3D; v.begin(); it !&#x3D; v.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F;cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; (*it).m_Name &lt;&lt; &quot;\t年龄：&quot; &lt;&lt; (*it).m_Age &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot;\t年龄：&quot; &lt;&lt; it-&gt;m_Age &lt;&lt; endl;&#x2F;&#x2F;也可以这样写</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>存放自定义类型指针</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;存放自定义类型指针</span><br><span class="line">void test02()</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;Person*&gt; v;</span><br><span class="line"></span><br><span class="line">Person p1(&quot;aaa&quot;, 10);</span><br><span class="line">Person p2(&quot;bbb&quot;, 20);</span><br><span class="line">Person p3(&quot;ccc&quot;, 30);</span><br><span class="line">Person p4(&quot;ddd&quot;, 40);</span><br><span class="line">Person p5(&quot;eee&quot;, 50);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;向容器中添加数据</span><br><span class="line">v.push_back(&amp;p1);</span><br><span class="line">v.push_back(&amp;p2);</span><br><span class="line">v.push_back(&amp;p3);</span><br><span class="line">v.push_back(&amp;p4);</span><br><span class="line">v.push_back(&amp;p5);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;遍历容器</span><br><span class="line">for (vector&lt;Person*&gt;::iterator it &#x3D; v.begin(); it !&#x3D; v.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F;这里尖括号里面是Person *类型，解引用以后就是Person*类型，是个指针，要访问元素，还要加箭头</span><br><span class="line">cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; (*it)-&gt;m_Name &lt;&lt; &quot;年龄：&quot; &lt;&lt; (*it)-&gt;m_Age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-5-3-Vector-容器嵌套容器"><a href="#2-5-3-Vector-容器嵌套容器" class="headerlink" title="2.5.3 Vector 容器嵌套容器"></a>2.5.3 Vector 容器嵌套容器</h4><p>学习目标：容器中嵌套容器，我们将所有数据进行遍历输出</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;vector&lt;int&gt;&gt;v;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;创建小容器</span><br><span class="line">vector&lt;int&gt;v1;</span><br><span class="line">vector&lt;int&gt;v2;</span><br><span class="line">vector&lt;int&gt;v3;</span><br><span class="line">vector&lt;int&gt;v4;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;向小容器中添加数据</span><br><span class="line">for (int i &#x3D; 0; i &lt; 4; i++)</span><br><span class="line">&#123;</span><br><span class="line">v1.push_back(i + 1);</span><br><span class="line">v2.push_back(i + 2);</span><br><span class="line">v3.push_back(i + 3);</span><br><span class="line">v4.push_back(i + 4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;将小容器插入到大容器中</span><br><span class="line">v.push_back(v1);</span><br><span class="line">v.push_back(v2);</span><br><span class="line">v.push_back(v3);</span><br><span class="line">v.push_back(v4);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;通过大容器，把所有数据遍历一遍</span><br><span class="line">for (vector&lt;vector&lt;int&gt;&gt;::iterator it &#x3D; v.begin(); it !&#x3D; v.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F;(*it)--------容器vector&lt;int&gt;</span><br><span class="line">for (vector&lt;int&gt;::iterator vit &#x3D; (*it).begin(); vit !&#x3D; (*it).end(); vit++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *vit &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">test01();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-STL-常用容器"><a href="#3-1-STL-常用容器" class="headerlink" title="3.1 STL-常用容器"></a>3.1 STL-常用容器</h3><h4 id="3-1-1-string基本概念"><a href="#3-1-1-string基本概念" class="headerlink" title="3.1.1 string基本概念"></a>3.1.1 string基本概念</h4><p>本质：</p><ul><li>string是C++风格的字符串，而string本质上是一个类</li></ul><p><strong>string和char*区别:</strong></p><ul><li>char* 是一个指针</li><li>string是一个类，类内部封装char<em>，管理职工字符串，是一个char</em>型的容器。</li></ul><p><strong>特点：</strong></p><p>string类内部封装了很多成员方法</p><p>eg：查找find，拷贝copy，删除delete替换replace，插入insert</p><p>string管理char*所分配的内存，不用担心复制越界和取值越界等，由类内部进行负责</p><h4 id="3-1-2-string构造函数"><a href="#3-1-2-string构造函数" class="headerlink" title="3.1.2 string构造函数"></a>3.1.2 string构造函数</h4><p>构造函数原型：</p><ul><li><p><code>string();</code>                                            //    创建一个空的字符串，eg：string str；</p><p><code>string(const char* s);</code>                //使用字符串s初始化</p></li><li><p><code>string(const string &amp; str);</code>     //使用一个string对象初始化另一个string对象</p></li><li><p><code>string(int n, char c);</code>                //使用n个字符c初始化</p></li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">string s1;   &#x2F;&#x2F;默认构造，创建一个空的字符串</span><br><span class="line"></span><br><span class="line">const char* str &#x3D; &quot;hello world&quot;;</span><br><span class="line">string s2(str);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; &quot;s2 &#x3D; &quot; &lt;&lt; s2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">string s3(s2);</span><br><span class="line">cout &lt;&lt; &quot;s3 &#x3D; &quot; &lt;&lt; s3 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">string s4(10, &#39;a&#39;);</span><br><span class="line">cout &lt;&lt; &quot;s4 &#x3D; &quot; &lt;&lt; s4 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><p>s2 = hello world<br>s3 = hello world<br>s4 = aaaaaaaaaa</p><p>总结：string的多种构造方式没有可比性，灵活使用即可。</p><h4 id="3-1-3-string赋值操作"><a href="#3-1-3-string赋值操作" class="headerlink" title="3.1.3 string赋值操作"></a>3.1.3 string赋值操作</h4><p>功能描述：</p><ul><li>给string字符串进行赋值</li></ul><p>赋值的函数原型：</p><ul><li><code>string&amp; operator = (const char * s);</code>      //char * 类型字符串 赋值给当前的字符串</li><li><code>string&amp; operator = (const string &amp;s); </code>   //把字符串s赋给当前的字符串</li><li><code>string&amp; operator = (char c);</code>                      //字符赋值给当前的字符串</li><li><code>string&amp; assign(const char *s);</code>                  //把字符串s赋给当前的字符串串</li><li><code>string&amp; assign(const char *s, int n);</code>    //把字符串s的前n个字符赋给当前的字符串</li><li><code>string&amp; assign(const string &amp;s);</code>              //把字符串s赋给当前字符串</li><li><code>string&amp; assign(int n, char c);</code>                  //用n个字符c赋给当前字符串</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">string str1;</span><br><span class="line">str1 &#x3D; &quot;hello world&quot;;</span><br><span class="line">cout &lt;&lt; &quot;str1 &#x3D; &quot; &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">string str2;</span><br><span class="line">str2 &#x3D; str1;</span><br><span class="line">cout &lt;&lt; &quot;str2 &#x3D; &quot; &lt;&lt; str2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">string str3;</span><br><span class="line">str3 &#x3D; &#39;a&#39;;</span><br><span class="line">cout &lt;&lt; &quot;str3 &#x3D; &quot; &lt;&lt; str3 &lt;&lt; endl;&#x2F;&#x2F;单个字符赋值</span><br><span class="line"></span><br><span class="line">string str4;</span><br><span class="line">str4.assign(&quot;hello C++&quot;);</span><br><span class="line">cout &lt;&lt; &quot;str4 &#x3D; &quot; &lt;&lt; str4 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">string str5;</span><br><span class="line">str5.assign(&quot;HELLO C++&quot;, 7);</span><br><span class="line">cout &lt;&lt; &quot;str5 &#x3D; &quot; &lt;&lt; str5 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">string str6;</span><br><span class="line">str6.assign(str5);</span><br><span class="line">cout &lt;&lt; &quot;str6 &#x3D; &quot; &lt;&lt; str6 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">string str7;</span><br><span class="line">str7.assign(10, &#39;w&#39;);</span><br><span class="line">cout &lt;&lt; &quot;str7 &#x3D; &quot; &lt;&lt; str7 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p>str1 = hello world<br>str2 = hello world<br>str3 = a<br>str4 = hello C++<br>str5 = HELLO C<br>str6 = HELLO C<br>str7 = wwwwwwwwww</p><p>总结：</p><p>string的赋值方式很多，<code>operator=</code> 这种方式是比较实用的</p><h4 id="3-1-4-string字符串拼接"><a href="#3-1-4-string字符串拼接" class="headerlink" title="3.1.4 string字符串拼接"></a>3.1.4 string字符串拼接</h4><p>功能描述：</p><ul><li>实现在字符串末尾拼接字符串</li></ul><p>函数原型：</p><ul><li><code>string&amp; operator+=(const char * str);</code>         //重载+=操作符</li><li><code>string&amp; operator+=(const char c);</code>                 //重载+=操作符</li><li><code>string&amp; operator+=(const string&amp; str);</code>       //重载+=操作符</li><li><code>string&amp; append(const string&amp; str);</code>               //把字符串s连接到当前字符串结尾</li><li><code>string&amp; append(const char *s, int n);</code>         //把字符串s的前n个字符连接到当前字符串结尾</li><li><code>string&amp; append(const string &amp;s);</code>                    //同operator+=(const string&amp; str)</li><li><code>string&amp; append(const string &amp;s, int pos, int n);</code>//字符串s中从pos开始的n个字符连接到字符串结尾</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">string str1 &#x3D; &quot;我&quot;;</span><br><span class="line">str1 +&#x3D; &quot;爱米切氏凤头鹦鹉&quot;;</span><br><span class="line">str1 +&#x3D; &quot;!&quot;;</span><br><span class="line">cout &lt;&lt; &quot;str1 &#x3D; &quot; &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">string str2 &#x3D; &quot;也爱小虎皮！&quot;;</span><br><span class="line">str1 +&#x3D; str2;</span><br><span class="line">cout &lt;&lt; &quot;str1 &#x3D; &quot; &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">string str3 &#x3D; &quot;I &quot;;</span><br><span class="line">str3.append(&quot;love &quot;);</span><br><span class="line">cout &lt;&lt; &quot;str3 &#x3D; &quot; &lt;&lt; str3 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">str3.append(&quot;this word!dfosh&quot;, 10);</span><br><span class="line">cout &lt;&lt; &quot;str3 &#x3D; &quot; &lt;&lt; str3 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">str3.append(str2);</span><br><span class="line">cout &lt;&lt; &quot;str3 &#x3D; &quot; &lt;&lt; str3 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">str3.append(str3, 0, 4);&#x2F;&#x2F;截取字符，参数1是开始截取的位置，参数2是截取是长度，空格也算是一个字符</span><br><span class="line">cout &lt;&lt; &quot;str3 &#x3D; &quot; &lt;&lt; str3 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><p>str1 = 我爱米切氏凤头鹦鹉!<br>str1 = 我爱米切氏凤头鹦鹉!也爱小虎皮！<br>str3 = I love<br>str3 = I love this word!<br>str3 = I love this word!也爱小虎皮！<br>str3 = I love this word!也爱小虎皮！I lo</p><h4 id="3-1-5-string查找和替换"><a href="#3-1-5-string查找和替换" class="headerlink" title="3.1.5 string查找和替换"></a>3.1.5 string查找和替换</h4><p>功能描述：</p><ul><li>查找：查找指定的字符串是否存在</li><li>替换：在指定的位置替换字符串</li></ul><p>函数原型：</p><ul><li><code>int find(const string&amp; str, int pos = 0) const;</code>                              //查找str第一次出现位置，从pos开始查找</li><li><code>int find(const char* s, int pos = 0 ) const; </code>                                    //查找s第一次出现的位置，从pos开始查找</li><li><code>int find(const char s, int pos, int n) const;</code>                                 //从pos位置查找s的前n个字符第一次位置</li><li><code>int find(const char c, int pos = 0) const;</code>                                       //查找字符c第一次出现位置</li><li><code>int rfind(const string&amp; str, int pos = npos) const; </code>                    //查找str最后一次位置，从pos开始查找</li><li><code>int rfind(const char* s, int pos = npos) const;</code>                            //查找str最后一次出现位置，从pos开始查找</li><li><code>int rfind(const char s, int pos, int n) const; </code>                              //从pos查找s的前n个字符最后一次位置</li><li><code>int rfind(const char c, int pos = 0) const;</code>                                    //查找字符c最后一次出现位置</li><li><code>string&amp; replace(int pos, int n, const string&amp; str); </code>                   //替换从pos开始n个字符为字符串str</li><li><code>string&amp; replace(int pos, int n,const char* s); </code>                             //替换从pos开始的n个字符为字符串s</li></ul><p>示例：</p><p>查找—–find</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">string str1 &#x3D; &quot;abcdefg&quot;;</span><br><span class="line"></span><br><span class="line">int pos &#x3D; str1.find(&quot;df&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if (pos &#x3D;&#x3D; -1)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;未找到字符串&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;找到字符串，pos &#x3D; &quot; &lt;&lt; pos &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查找—–rfind</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">string str1 &#x3D; &quot;abcdefgde&quot;;</span><br><span class="line">int pos &#x3D; str1.rfind(&quot;de&quot;);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; &quot;pos &#x3D; &quot; &lt;&lt; pos &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>find和rfind的区别：</p><ul><li>rfind从右往左查</li><li>find从左往右查</li></ul><p>替换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">string str1 &#x3D; &quot;abcdefgde&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;从1号位置起3个字符替换为“1111”</span><br><span class="line">str1.replace(1, 3, &quot;1111&quot;);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; &quot;str1 &#x3D; &quot; &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p>str1 = a1111efgde</p><p>总结：</p><ul><li>find查找从左往右，rfind查找从右往左</li><li>find找到字符串后返回第一个字符位置，找不到返回-1</li><li>replace在替换时，要指定从哪个位置起，多少个字符，替换成什么样的字符串</li></ul><h4 id="3-1-6-string字符串比较"><a href="#3-1-6-string字符串比较" class="headerlink" title="3.1.6 string字符串比较"></a>3.1.6 string字符串比较</h4><p>功能描述：</p><ul><li>字符串之间的比较</li></ul><p>比较方式：</p><ul><li>字符串比较是按字符的ASCII码进行对比</li></ul><p>= 返回 0    &gt; 返回1    &lt; 返回-1</p><p>函数原型：</p><ul><li><code>int compare(const string &amp;s) const;</code>        //与字符串s比较</li><li><code>int compare(const char *s) const;</code>           //与字符串s比较</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">string str1 &#x3D; &quot;xello&quot;;</span><br><span class="line">string str2 &#x3D; &quot;hello&quot;;</span><br><span class="line"></span><br><span class="line">if (str1.compare(str2) &#x3D;&#x3D; 0)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;str1 &#x3D; str2&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else if (str1.compare(str2) &gt; 0)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;str1 &gt; str2&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;str1 &lt; str2&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：字符串对比主要是比较两个字符串是否相等，判断谁大谁小意义不大</p><h4 id="3-1-7-string字符存取"><a href="#3-1-7-string字符存取" class="headerlink" title="3.1.7 string字符存取"></a>3.1.7 string字符存取</h4><p>string中单个字符存取方式有两种</p><ul><li><code>char&amp; operator[](int n);</code>            //通过[]方式取字符</li><li><code>char&amp; at(int n); </code>                            //通过at方式获取字符</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">string str1 &#x3D; &quot;hello&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;1.通过[]访问单个字符</span><br><span class="line">for (int i &#x3D; 0; i &lt; str1.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; str1[i] &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;2.通过at方式访问单个字符</span><br><span class="line">for (int i &#x3D; 0; i &lt; str1.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; str1.at(i) &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;修改单个字符</span><br><span class="line">str1[0] &#x3D; &#39;x&#39;;</span><br><span class="line">cout &lt;&lt; &quot;str1 &#x3D; &quot; &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">str1.at(1) &#x3D; &#39;x&#39;;</span><br><span class="line">cout &lt;&lt; &quot;str1 &#x3D; &quot; &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-1-8string插入和删除"><a href="#3-1-8string插入和删除" class="headerlink" title="3.1.8string插入和删除"></a>3.1.8string插入和删除</h4><p>功能描述：</p><ul><li>对string字符串进行插入和删除字符操作</li></ul><p>函数原型：</p><ul><li><code>string&amp; insert(int pos, const char* s);</code>            //插入字符串</li><li><code>string&amp; insert(int pos, const string&amp; str);</code>     //插入字符串</li><li><code>string&amp; insert(int pos, int n, char c);</code>             //在指定位置插入n个c</li><li><code>string&amp; erase(int pos, int n = npos);</code>             //删除从Pos开始的n个字符</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">string str1 &#x3D; &quot;hello&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;插入</span><br><span class="line">str1.insert(1, &quot;1111&quot;);</span><br><span class="line">cout &lt;&lt; &quot;str1 &#x3D; &quot; &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">&#x2F;&#x2F;输出：str1 &#x3D; h1111ello</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;删除</span><br><span class="line">str1.erase(1, 4);&#x2F;&#x2F;参数1：从哪开始删；参数2：删多少个字符</span><br><span class="line">cout &lt;&lt; &quot;str1 &#x3D; &quot; &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">&#x2F;&#x2F;输出：str1 &#x3D; hello</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-1-9-string子串"><a href="#3-1-9-string子串" class="headerlink" title="3.1.9 string子串"></a>3.1.9 string子串</h4><p>功能描述：</p><ul><li>从字符串中获取想要的子串</li></ul><p>函数原型：</p><ul><li><code>string substr(int pos = 0, int n = npos) const;</code>   //返回由pos开始的n个自发组成的字符串</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">string str1 &#x3D; &quot;abcdef&quot;;</span><br><span class="line">string subStr &#x3D; str1.substr(1, 3);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; &quot;subStr &#x3D; &quot; &lt;&lt; subStr &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;实用操作</span><br><span class="line">void test02()</span><br><span class="line">&#123;</span><br><span class="line">string email &#x3D; &quot;huahua@sina.com&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;从邮件地址中 获取 用户名信息</span><br><span class="line"></span><br><span class="line">int pos &#x3D; email.find(&quot;@&quot;);</span><br><span class="line">cout &lt;&lt; pos &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">string userName &#x3D; email.substr(0, pos);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; userName &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：灵活运用求子串功能，可以在实际开发中获取有效信息</p><h3 id="3-2-vector容器"><a href="#3-2-vector容器" class="headerlink" title="3.2 vector容器"></a>3.2 vector容器</h3><h4 id="3-2-1-vector基本概念"><a href="#3-2-1-vector基本概念" class="headerlink" title="3.2.1 vector基本概念"></a>3.2.1 vector基本概念</h4><p>功能：</p><ul><li>vector数据结构和数组非常相似，也称为<strong>单端数组</strong></li></ul><p><strong>vector与普通数组区别：</strong></p><ul><li>不同之处：数组是静态空间，而vector可以动态扩展</li></ul><p><strong>动态扩展：</strong></p><ul><li>并不是在原空间之后续接新空间，而是找到更大的内存空间，然后将原数据拷贝新空间，释放原空间</li></ul><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="/noteimg/vector.png"></p><ul><li>vector容器的迭代器是支持随机范围的迭代器</li></ul><h4 id="3-2-2-vector构造函数"><a href="#3-2-2-vector构造函数" class="headerlink" title="3.2.2 vector构造函数"></a>3.2.2 vector构造函数</h4><p>功能描述：</p><ul><li>创建vector容器</li></ul><p>函数原型：</p><ul><li><code>vector&lt;T&gt; v;</code>                                       //采用模板实现，默认构造函数 </li><li><code>vector(v.begin(), v.end() );   </code>     //将v[begin(),end() )区间中的元素拷贝给本身(前闭后开)</li><li><code>vector(n,elem);</code>                                 //构造函数将n个elem拷贝给本身</li><li><code>vector(const vector &amp;vec);</code>          //拷贝构造函数</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">void printVector(vector&lt;int&gt;&amp;v)</span><br><span class="line">&#123;</span><br><span class="line">for (vector&lt;int&gt;::iterator it &#x3D; v.begin(); it !&#x3D; v.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;int&gt;v1;   &#x2F;&#x2F;默认构造，无参构造</span><br><span class="line"></span><br><span class="line">for (int i &#x3D; 0; i &lt; 10; i++)</span><br><span class="line">&#123;</span><br><span class="line">v1.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printVector(v1);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;通过区间方式进行构造</span><br><span class="line">vector&lt;int&gt;v2(v1.begin(), v1.end());</span><br><span class="line">printVector(v2);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;n个elem方式构造</span><br><span class="line">vector&lt;int&gt;v3(10, 100);</span><br><span class="line">printVector(v3);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;拷贝构造</span><br><span class="line">vector&lt;int&gt;v4(v3);</span><br><span class="line">printVector(v4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>0 1 2 3 4 5 6 7 8 9<br>0 1 2 3 4 5 6 7 8 9<br>100 100 100 100 100 100 100 100 100 100<br>100 100 100 100 100 100 100 100 100 100</p><h4 id="3-2-3-vector赋值操作"><a href="#3-2-3-vector赋值操作" class="headerlink" title="3.2.3 vector赋值操作"></a>3.2.3 vector赋值操作</h4><p>功能描述：</p><ul><li>给vector容器进行赋值 </li></ul><p> 函数原型：</p><ul><li><code>vector&amp; operator=(const vector &amp;vec);</code>       //重载等号操作符</li><li><code>assign(beg, end);</code>                                                //将[beg，end)区间中的数据拷贝赋值给本身</li><li><code>assign(n, elem); </code>                                                  //将n个elem拷贝赋值给本身</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">void printVector(vector&lt;int&gt;&amp;v)</span><br><span class="line">&#123;</span><br><span class="line">for (vector&lt;int&gt;::iterator it &#x3D; v.begin(); it !&#x3D; v.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;int&gt;v1;   </span><br><span class="line"></span><br><span class="line">for (int i &#x3D; 0; i &lt; 10; i++)</span><br><span class="line">&#123;</span><br><span class="line">v1.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printVector(v1);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;赋值 operator&#x3D;</span><br><span class="line">vector&lt;int&gt;v2;</span><br><span class="line">v2 &#x3D; v1;</span><br><span class="line">printVector(v2);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;assign</span><br><span class="line">vector&lt;int&gt;v3;</span><br><span class="line">v3.assign(v1.begin(), v1.end());</span><br><span class="line">printVector(v3);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;n个elem方式赋值</span><br><span class="line">vector&lt;int&gt;v4;</span><br><span class="line">v4.assign(10, 100);</span><br><span class="line">printVector(v4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>0 1 2 3 4 5 6 7 8 9<br>0 1 2 3 4 5 6 7 8 9<br>0 1 2 3 4 5 6 7 8 9<br>100 100 100 100 100 100 100 100 100 100</p><p>总结：vector赋值方式比较简单，使用operator=，或者assign都可以</p><h4 id="3-2-4-vector容器和大小"><a href="#3-2-4-vector容器和大小" class="headerlink" title="3.2.4 vector容器和大小"></a>3.2.4 vector容器和大小</h4><p>功能描述：</p><ul><li>对vector容器的容量和大小操作</li></ul><p>函数原型：</p><ul><li><code>empty();</code>                                   //判断容器是否为空</li><li><code>capacity();</code>                             //容器的容量</li><li><code>size();</code>                                     //返回容器中元素的个数</li><li><code>resize(int num);</code>                  //重新指定容器的长度为num，若容器变长，则以默认值填充新位置</li></ul><p>​                                                           //如果容器变短，则末尾超出容器长度的元素被删除</p><ul><li><code>resize(int num,elem); </code>      //重新指定容器的长度为num，若容器变长，则以elem值填充新位置</li></ul><p>​                                                           //如果容器变短，则末尾超出容器长度的元素被删除</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">void printVector(vector&lt;int&gt;&amp;v)</span><br><span class="line">&#123;</span><br><span class="line">for (vector&lt;int&gt;::iterator it &#x3D; v.begin(); it !&#x3D; v.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;int&gt;v1;   </span><br><span class="line"></span><br><span class="line">for (int i &#x3D; 0; i &lt; 10; i++)</span><br><span class="line">&#123;</span><br><span class="line">v1.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printVector(v1);</span><br><span class="line"></span><br><span class="line">if (v1.empty())  &#x2F;&#x2F;为真，代表容器为空</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;v1为空&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;v1不为空&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;v1的容量为：&quot; &lt;&lt; v1.capacity() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;v1的大小为：&quot; &lt;&lt; v1.size() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;重新指定大小</span><br><span class="line">v1.resize(15, 100);        &#x2F;&#x2F;利用重载的版本，可以指定默认填充值，参数2</span><br><span class="line">printVector(v1);           &#x2F;&#x2F;如果重新指定的比原来长，默认用0填充新位置</span><br><span class="line"></span><br><span class="line">v1.resize(5);</span><br><span class="line">printVector(v1);           &#x2F;&#x2F;如果重新指定的比原来短，超出部分会被删除</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>判断是否为空—empty</li><li>返回元素个数—size</li><li>返回容器容量—capacity</li><li>重新指定大小—resize</li></ul><h4 id="3-2-5-vector插入和删除"><a href="#3-2-5-vector插入和删除" class="headerlink" title="3.2.5 vector插入和删除"></a>3.2.5 vector插入和删除</h4><p>功能描述：</p><ul><li>对vector容器进行插入、删除操作</li></ul><p>函数原型：</p><ul><li><code>push_back(elem);</code>                                                                                //尾部插入元素elem</li><li><code>pop_back();</code>                                                                                          //删除最后一个元素 </li><li><code>insert(const_iterator pos, elem); </code>                                            //迭代器指向位置pos插入元素elem </li><li><code>insert(const_iterator pos, int const elem);</code>                       //迭代器指向位置pos插入cout个元素elem</li><li><code>erase(const_iterator pos);</code>                                                           //删除迭代器指向的元素</li><li><code>erase(const_iterator start, const_iterator end);</code>             //删除迭代器从start到end之间的元素</li><li><code>clear();</code>                                                                                                //删除容器中所有的元素</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;int&gt;v1;</span><br><span class="line">&#x2F;&#x2F;尾插</span><br><span class="line">v1.push_back(10);</span><br><span class="line">v1.push_back(20);</span><br><span class="line">v1.push_back(30);</span><br><span class="line">v1.push_back(40);</span><br><span class="line">v1.push_back(50);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;遍历</span><br><span class="line">printVector(v1);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;尾删</span><br><span class="line">v1.pop_back();</span><br><span class="line">printVector(v1);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;插入 第一个参数是迭代器</span><br><span class="line">v1.insert(v1.begin(), 100);</span><br><span class="line">printVector(v1);</span><br><span class="line"></span><br><span class="line">v1.insert(v1.begin(), 2, 1000);</span><br><span class="line">printVector(v1);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;删除,参数也是迭代器</span><br><span class="line">v1.erase(v1.begin());</span><br><span class="line">printVector(v1);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;清空</span><br><span class="line">v1.clear();</span><br><span class="line">&#x2F;&#x2F;v1.erase(v1.begin(), v1.end());</span><br><span class="line">printVector(v1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>尾插—–push_back;</li><li>尾删—–pop_back;</li><li>插入—–insert(位置迭代器)</li><li>删除—–erase(位置迭代器）</li><li>清空—–clear</li></ul><h4 id="3-2-6-vector数据存取"><a href="#3-2-6-vector数据存取" class="headerlink" title="3.2.6 vector数据存取"></a>3.2.6 vector数据存取</h4><p>功能描述：</p><ul><li>对vector中的数据的存取操作</li></ul><p>函数原型：</p><ul><li><code>at(int idx);</code>                   //返回索引idx所指的数据</li><li><code>operator[];</code>                 //返回索引idx所指的数据</li><li><code>front();</code>                        //返回容器中第一个数据元素</li><li><code>back();</code>                         //返回容器中最后一个数据元素</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;int&gt;v1;</span><br><span class="line">&#x2F;&#x2F;尾插</span><br><span class="line">for (int i &#x3D; 0; i &lt; 10; i++)</span><br><span class="line">&#123;</span><br><span class="line">v1.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;利用[]方式访问数组中的元素</span><br><span class="line">for (int i &#x3D; 0; i &lt; v1.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; v1[i] &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;利用at方式访问元素</span><br><span class="line">for (int i &#x3D; 0; i &lt; v1.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; v1.at(i) &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;获取第一个元素</span><br><span class="line">cout &lt;&lt; &quot;第一个元素为：&quot; &lt;&lt; v1.front() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;获取最后一个元素</span><br><span class="line">cout &lt;&lt; &quot;最后一个元素为：&quot; &lt;&lt; v1.back() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>0 1 2 3 4 5 6 7 8 9<br>0 1 2 3 4 5 6 7 8 9<br>第一个元素为：0<br>最后一个元素为：9</p><p>总结：</p><ul><li>除了用迭代器获取vector容器中元素，[]和at也可以</li><li>front返回容器第一个元素</li><li>back返回容器最后一个元素</li></ul><h4 id="3-2-7-vector互换容器"><a href="#3-2-7-vector互换容器" class="headerlink" title="3.2.7 vector互换容器"></a>3.2.7 vector互换容器</h4><p>功能描述：</p><ul><li>实现两个容器内元素进行互换</li></ul><p>函数原型：</p><ul><li><code>swap(vec);</code>                      //将vec与本身的元素互换</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;基本使用</span><br><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;int&gt;v1;</span><br><span class="line">&#x2F;&#x2F;尾插</span><br><span class="line">for (int i &#x3D; 0; i &lt; 10; i++)</span><br><span class="line">&#123;</span><br><span class="line">v1.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; &quot;交换前：&quot; &lt;&lt; endl;</span><br><span class="line">printVector(v1);</span><br><span class="line"></span><br><span class="line">vector&lt;int&gt;v2;</span><br><span class="line">for (int i &#x3D; 10; i &gt; 0; i--)</span><br><span class="line">&#123;</span><br><span class="line">v2.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printVector(v2);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; &quot;交换后：&quot; &lt;&lt; endl;</span><br><span class="line">v1.swap(v2);</span><br><span class="line">printVector(v1);</span><br><span class="line">printVector(v2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;实际用途,可以收缩内存空间</span><br><span class="line">void test02()</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;int&gt;v;</span><br><span class="line">for (int i &#x3D; 0; i &lt; 100000; i++)</span><br><span class="line">&#123;</span><br><span class="line">v.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; &quot;v的容器为：&quot; &lt;&lt;v.capacity() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;v的大小为：&quot; &lt;&lt; v.size() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">v.resize(3);  &#x2F;&#x2F; 重新指定大小</span><br><span class="line">cout &lt;&lt; &quot;v的容器为：&quot; &lt;&lt; v.capacity() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;v的大小为：&quot; &lt;&lt; v.size() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;巧用swap收缩内存</span><br><span class="line">vector&lt;int&gt;(v).swap(v);&#x2F;&#x2F;vector&lt;int&gt;(v)是一个匿名对象，利用v来进行初始化操作，所有这个匿名对象一开始容量是3，大小也是3</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; &quot;v的容器为：&quot; &lt;&lt; v.capacity() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;v的大小为：&quot; &lt;&lt; v.size() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output：<br>v的容器为：138255<br>v的大小为：100000<br>v的容器为：138255<br>v的大小为：3<br>v的容器为：3<br>v的大小为：3</p><h4 id="3-2-8-vector预留空间"><a href="#3-2-8-vector预留空间" class="headerlink" title="3.2.8 vector预留空间"></a>3.2.8 vector预留空间</h4><p>功能描述：</p><ul><li>减少vector在动态扩展容量时扩展次数</li></ul><p>函数原型：</p><ul><li><code>reserve(int len);</code>                          //容器预留len个元素长度，预留位置不初始化，元素不可访问</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">void test02()</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;int&gt;v;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;利用reserve预留空间</span><br><span class="line">v.reserve(100000);</span><br><span class="line"></span><br><span class="line">int num &#x3D; 0;&#x2F;&#x2F;统计开辟次数</span><br><span class="line">int* p &#x3D; NULL;</span><br><span class="line"></span><br><span class="line">for (int i &#x3D; 0; i &lt; 100000; i++)</span><br><span class="line">&#123;</span><br><span class="line">v.push_back(i);</span><br><span class="line"></span><br><span class="line">if (p !&#x3D; &amp;v[0])</span><br><span class="line">&#123;</span><br><span class="line">p &#x3D; &amp;v[0];</span><br><span class="line">num++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; &quot;num &#x3D; &quot; &lt;&lt; num &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-deque容器"><a href="#3-3-deque容器" class="headerlink" title="3.3 deque容器"></a>3.3 deque容器</h3><h4 id="3-3-1-deque容器基本概念"><a href="#3-3-1-deque容器基本概念" class="headerlink" title="3.3.1 deque容器基本概念"></a>3.3.1 deque容器基本概念</h4><p>功能：</p><ul><li>双端数组，可以对头端进行插入删除操作</li></ul><p><strong>deque容器和vector容器的区别：</strong></p><ul><li>vector对于头部的插入删除效率低，数据量越大，功能越低</li><li>deque相对而言，对头部的插入删除速度比vector快</li><li>vector访问元素时的速度会比deque快，这和两者内部实现有关<br><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="/noteimg/deque.png"></li></ul><p>deque内部工作原理：</p><p>deque内部有个<strong>中控器</strong>，维护每段缓冲区中的内存，缓冲区中存放真实数据</p><p> 中控器维护的是每个缓冲区的地址，使得使用deque时像一片连续的内存空间</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="/noteimg/zkq.png"></p><ul><li>deque容器的迭代也是支持随机访问的</li></ul><h4 id="3-3-2-deque构造函数"><a href="#3-3-2-deque构造函数" class="headerlink" title="3.3.2 deque构造函数"></a>3.3.2 deque构造函数</h4><p>功能描述：</p><ul><li>deque容器构造</li></ul><p>函数原型：</p><ul><li><code>deque&lt;T&gt; deqT;</code>                          //默认构造形式</li><li><code>deque(beg, end);</code>                      //构造函数将[beg, end)区间中的元素拷贝给本身</li><li><code>deque(n, elem);</code>                         //构造函数将n个elem拷贝给本身</li><li><code>deque(const deque &amp;deq);</code>       //拷贝构造函数</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">void printDeque(const deque&lt;int&gt;&amp; d)</span><br><span class="line">&#123;</span><br><span class="line">for (deque&lt;int&gt;::const_iterator it &#x3D; d.begin(); it !&#x3D; d.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">deque&lt;int&gt;d1;</span><br><span class="line">for (int i &#x3D; 0; i &lt; 10; i++)</span><br><span class="line">&#123;</span><br><span class="line">d1.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">printDeque(d1);</span><br><span class="line"></span><br><span class="line">deque&lt;int&gt;d2(d1.begin(), d1.end());</span><br><span class="line">printDeque(d2);</span><br><span class="line"></span><br><span class="line">deque&lt;int&gt;d3(10, 100);</span><br><span class="line">printDeque(d3);</span><br><span class="line"></span><br><span class="line">deque&lt;int&gt;d4(d3);</span><br><span class="line">printDeque(d4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>out_put:</p><p>0 1 2 3 4 5 6 7 8 9<br>0 1 2 3 4 5 6 7 8 9<br>100 100 100 100 100 100 100 100 100 100<br>100 100 100 100 100 100 100 100 100 100</p><h4 id="3-3-3-deque赋值操作"><a href="#3-3-3-deque赋值操作" class="headerlink" title="3.3.3 deque赋值操作"></a>3.3.3 deque赋值操作</h4><p>功能描述：</p><ul><li>给deque容器进行赋值</li></ul><p>函数原型：</p><ul><li><code>deque&amp; operator=(const deque &amp;deq);</code>                      //重载等号操作符</li><li><code>assign(beg, end);</code>                                                            //将[beg, end)区间中的数据拷贝赋值给本身</li><li><code>assign(n, elem); </code>                                                              //将n个elem拷贝赋值给本身</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">deque&lt;int&gt;d1;</span><br><span class="line">for (int i &#x3D; 0; i &lt; 10; i++)</span><br><span class="line">&#123;</span><br><span class="line">d1.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">printDeque(d1);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;operator&#x3D; 赋值</span><br><span class="line">deque&lt;int&gt;d2;</span><br><span class="line">d2 &#x3D; d1;</span><br><span class="line">printDeque(d2);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;assign赋值</span><br><span class="line">deque&lt;int&gt;d3;</span><br><span class="line">d3.assign(d1.begin(), d1.end());</span><br><span class="line">printDeque(d3);</span><br><span class="line"></span><br><span class="line">deque&lt;int&gt;d4;</span><br><span class="line">d4.assign(10, 1100);</span><br><span class="line">printDeque(d4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：deque 容器和vector赋值方式基本相同。</p><p> 3.3.4 deque大小操作</p><p>功能描述：</p><ul><li>对deque容器的大小进行操作</li></ul><p>函数原型：</p><ul><li><code>deque.empty();</code>                                            //判断容器是否为空</li><li><code>deque.size();</code>                                              //返回容器中元素的个数</li><li><code>deque.resize(num); </code>                                    //重新指定容器的长度为num，若则以默认值填充新位置</li></ul><p>​                                                                                  //如果容器变短，则末尾超出容器长度的元素被删除</p><ul><li><code>deque.resize(num, elem);</code>                       //重新指定容器长度为num，若容器变长，则以elem值填充新位置</li></ul><p>​                                                                                  //如果容器变短，则末尾超出容器长度的元素被删除</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">deque&lt;int&gt;d1;</span><br><span class="line">for (int i &#x3D; 0; i &lt; 10; i++)</span><br><span class="line">&#123;</span><br><span class="line">d1.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">printDeque(d1);</span><br><span class="line"></span><br><span class="line">if (d1.empty())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;d1为空&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;d1不为空&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;d1的大小为：&quot; &lt;&lt; d1.size() &lt;&lt; endl;</span><br><span class="line">&#x2F;&#x2F;deque容器没有容量概念</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;重新指定大小</span><br><span class="line">&#x2F;&#x2F;d1.resize(15);</span><br><span class="line">d1.resize(15, 1);</span><br><span class="line">printDeque(d1);</span><br><span class="line"></span><br><span class="line">d1.resize(5);</span><br><span class="line">printDeque(d1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>deque没有容量的概念</li><li>判断是否为空————empty</li><li>返回元素个数————size</li><li>重新指定个数————resize</li></ul><h4 id="3-3-5-插入和删除"><a href="#3-3-5-插入和删除" class="headerlink" title="3.3.5 插入和删除"></a>3.3.5 插入和删除</h4><p>功能描述：</p><ul><li>向deque容器中插入和删除数据</li></ul><p>函数原型：<br>两端插入插入操作：</p><ul><li><code>push_back(elem);</code>                    //在容器尾部添加一个数据</li><li><code>push_from(elem);</code>                   //在容器头部插入一个数据</li><li><code>pop_front();</code>                           //删除容器第一个数据</li><li><code>pop_back();</code>                            //删除容器最后一个数据</li></ul><p>指定位置操作：</p><ul><li><code>insert(pos, elem);</code>                //在pos位置插入一个elem元素的拷贝，返回新数据的位置</li><li><code>insert(pos, n, elem); </code>         //在pos位置插入n个elem数据，无返回值</li><li><code>insert(pos, beg, end);</code>       //在pos位置插入[beg，end)区间的数据，无返回值</li><li><code>clear();</code>                                    //清空容器的所有数据</li><li><code>erase(beg, end); </code>                   //删除[beg，end)区间的数据，返回下一个数据的位置</li><li><code>erase(pos);</code>                             //删除pos位置的数据，返回下一个数据的位置</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">deque&lt;int&gt;d1;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;尾插</span><br><span class="line">d1.push_back(10);</span><br><span class="line">d1.push_back(20);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;头插</span><br><span class="line">d1.push_front(100);</span><br><span class="line">d1.push_front(200);</span><br><span class="line"></span><br><span class="line">printDeque(d1);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;尾删</span><br><span class="line">d1.pop_back();</span><br><span class="line">printDeque(d1);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;头删</span><br><span class="line">d1.pop_front();</span><br><span class="line">printDeque(d1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void test02()</span><br><span class="line">&#123;</span><br><span class="line">deque&lt;int&gt;d1;</span><br><span class="line"></span><br><span class="line">d1.push_back(10);</span><br><span class="line">d1.push_back(20);</span><br><span class="line">d1.push_front(100);</span><br><span class="line">d1.push_front(200);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;insert插入</span><br><span class="line">d1.insert(d1.begin(), 1000);</span><br><span class="line">printDeque(d1);</span><br><span class="line"></span><br><span class="line">d1.insert(d1.begin(), 2, 10000);</span><br><span class="line">printDeque(d1);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;按照区间进行插入</span><br><span class="line">deque&lt;int&gt;d2;</span><br><span class="line">d2.push_back(1);</span><br><span class="line">d2.push_back(2);</span><br><span class="line">d2.push_back(3);</span><br><span class="line"></span><br><span class="line">d1.insert(d1.begin(), d2.begin(), d2.end());</span><br><span class="line"></span><br><span class="line">printDeque(d1);  &#x2F;&#x2F;1 2 3 10000 10000 1000 200 100 10 20</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void test03()</span><br><span class="line">&#123;</span><br><span class="line">deque&lt;int&gt;d1;</span><br><span class="line"></span><br><span class="line">d1.push_back(10);</span><br><span class="line">d1.push_back(20);</span><br><span class="line">d1.push_front(100);</span><br><span class="line">d1.push_front(200);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;删除</span><br><span class="line">deque&lt;int&gt;::iterator it &#x3D; d1.begin();</span><br><span class="line">it++;</span><br><span class="line">d1.erase(it);</span><br><span class="line">printDeque(d1);  &#x2F;&#x2F;200 10 20</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;按区间方式删除</span><br><span class="line">&#x2F;&#x2F;d1.erase(d1.begin(), d1.end());  &#x2F;&#x2F;相当于清空</span><br><span class="line">d1.clear();</span><br><span class="line">printDeque(d1);  </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>插入和删除提供的位置是迭代器</li><li>尾插—–push_back;</li><li>尾删—–pop_back;</li><li>头插—–push_front;</li><li>头插—–pop_front.</li></ul><h4 id="3-3-6-deque数据存取"><a href="#3-3-6-deque数据存取" class="headerlink" title="3.3.6 deque数据存取"></a>3.3.6 deque数据存取</h4><p>功能描述：</p><ul><li>对deque中的数据的存取操作</li></ul><p>函数原型：</p><ul><li><code>at(int, idx);</code>              //返回索引idx所指的数据</li><li><code>operator[];</code>                  //返回索引idx所指的数据</li><li><code>front();</code>                        //返回容器中第一个数据元素</li><li><code>back();</code>                          //返回容器中最后一个数据元素</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">deque&lt;int&gt;d;</span><br><span class="line">d.push_back(10);</span><br><span class="line">d.push_back(20);</span><br><span class="line">d.push_back(30);</span><br><span class="line">d.push_back(100);</span><br><span class="line">d.push_back(200);</span><br><span class="line">d.push_back(300);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;通过[]方式访问元素</span><br><span class="line">for (int i &#x3D; 0; i &lt; d.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; d[i] &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;通过at的方式访问</span><br><span class="line">for (int i &#x3D; 0; i &lt; d.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; d.at(i) &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; &quot;第一个元素为：&quot; &lt;&lt; d.front() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;最后一个元素为：&quot; &lt;&lt; d.back() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>除了用迭代器获取deque容器中的元素，[]和at也可以</li><li>front返回容器第一个元素</li><li>back返回容器最后一个元素</li></ul><h4 id="3-3-7-deque排序"><a href="#3-3-7-deque排序" class="headerlink" title="3.3.7 deque排序"></a>3.3.7 deque排序</h4><p>功能描述：</p><ul><li>利用算法使之对deque容器进行排序</li></ul><p>算法：</p><ul><li><code>sort(iterator beg, iterator end)</code>         //对beg和end区间内元素进行排序</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">deque&lt;int&gt;d;</span><br><span class="line">d.push_back(10);</span><br><span class="line">d.push_back(20);</span><br><span class="line">d.push_back(30);</span><br><span class="line">d.push_front(100);</span><br><span class="line">d.push_front(200);</span><br><span class="line">d.push_front(300);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;排序前：</span><br><span class="line">printDeque(d);</span><br><span class="line"></span><br><span class="line">sort(d.begin(),d.end()); &#x2F;&#x2F;默认排序规则：升序</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;对于支持随机访问的迭代器的容器，都可以利用sort算法直接对其进行排序</span><br><span class="line">&#x2F;&#x2F;vector容器也可以利用sort进行排序</span><br><span class="line">&#x2F;&#x2F;排序后：</span><br><span class="line">printDeque(d);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：sort算法非常实用，使用时包含头文件algorithm即可</p><h3 id="3-4-评委打分"><a href="#3-4-评委打分" class="headerlink" title="3.4 评委打分"></a>3.4 评委打分</h3><h4 id="3-4-1-案例描述"><a href="#3-4-1-案例描述" class="headerlink" title="3.4.1 案例描述"></a>3.4.1 案例描述</h4><p>有5名选手：选手ABCDEE，10个评委分别对每一个选手打分，去除最高分，去除评委中最低分，取平均分。</p><h4 id="3-4-1-实现步骤"><a href="#3-4-1-实现步骤" class="headerlink" title="3.4.1 实现步骤"></a>3.4.1 实现步骤</h4><ol><li>创建5名选手，放到vector中</li><li>遍历vector容器，取出来每一个选手，执行for循环，可以把10个评分存到deque容器中。</li><li>sort算法对deque容器中分数排序，去除最高和最低分</li><li>deque容器遍历一遍，累加总分</li><li>获取平均分</li></ol><p>示例示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;deque&gt;</span><br><span class="line">#include &lt;ctime&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">Person(string name, int score)</span><br><span class="line">&#123;</span><br><span class="line">m_Name &#x3D; name;</span><br><span class="line">m_Score &#x3D; score;</span><br><span class="line">&#125;</span><br><span class="line">string m_Name;</span><br><span class="line">int m_Score;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;创建选手</span><br><span class="line">void createPerson(vector&lt;Person&gt;&amp; v)</span><br><span class="line">&#123;</span><br><span class="line">string nameSeed &#x3D; &quot;ABCDE&quot;;</span><br><span class="line">for (int i &#x3D; 0; i &lt; 5; i++)</span><br><span class="line">&#123;</span><br><span class="line">string name &#x3D; &quot;选手&quot;;</span><br><span class="line">name +&#x3D; nameSeed[i];</span><br><span class="line"></span><br><span class="line">int score &#x3D; 0;</span><br><span class="line">Person p(name, score);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;将创建的person对象放入容器中</span><br><span class="line">v.push_back(p);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;打分</span><br><span class="line">void setScore(vector&lt;Person&gt;&amp; v)</span><br><span class="line">&#123;</span><br><span class="line">for (vector&lt;Person&gt;::iterator it &#x3D; v.begin(); it !&#x3D; v.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F;将评委的分数放到deque容器中</span><br><span class="line">deque&lt;int&gt;d;</span><br><span class="line">for (int i &#x3D; 0; i &lt; 10; i++)</span><br><span class="line">&#123;</span><br><span class="line">int score &#x3D; rand() % 41 + 60;</span><br><span class="line">d.push_back(score);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;测试代码</span><br><span class="line">&#x2F;*cout &lt;&lt; &quot;选手：&quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot;打分：&quot; &lt;&lt; endl;</span><br><span class="line">for (deque&lt;int&gt;::iterator dit &#x3D; d.begin(); dit !&#x3D; d.end(); dit++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *dit &lt;&lt; &quot; &quot;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;排序</span><br><span class="line">sort(d.begin(), d.end());</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;去除最高和最低分</span><br><span class="line">d.pop_back();</span><br><span class="line">d.pop_front();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;取平均分</span><br><span class="line">int sum &#x3D; 0;</span><br><span class="line">for (deque&lt;int&gt;::iterator dit &#x3D; d.begin(); dit !&#x3D; d.end(); dit++)</span><br><span class="line">&#123;</span><br><span class="line">sum +&#x3D; *dit;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int avg &#x3D; sum &#x2F; d.size();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;将平均分赋值给选手上</span><br><span class="line">it-&gt;m_Score &#x3D; avg;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;显示最终得分</span><br><span class="line">void showScore(vector&lt;Person&gt;&amp; v)</span><br><span class="line">&#123;</span><br><span class="line">for (vector&lt;Person&gt;::iterator it &#x3D; v.begin(); it !&#x3D; v.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot;平均分：&quot; &lt;&lt; it-&gt;m_Score &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">srand((unsigned int)time(NULL));</span><br><span class="line">&#x2F;&#x2F;1.创建五名选手</span><br><span class="line">vector&lt;Person&gt;v;</span><br><span class="line">createPerson(v);</span><br><span class="line"></span><br><span class="line">&#x2F;*for (vector&lt;Person&gt;::iterator it &#x3D; v.begin(); it !&#x3D; v.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; (*it).m_Name &lt;&lt; (*it).m_Score &lt;&lt; endl;</span><br><span class="line">&#125;*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;2.给5名选手打分</span><br><span class="line">setScore(v);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;3.显示最终得分</span><br><span class="line">showScore(v);</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-stack容器"><a href="#3-5-stack容器" class="headerlink" title="3.5 stack容器"></a>3.5 stack容器</h3><h4 id="3-5-1-stack基本概念"><a href="#3-5-1-stack基本概念" class="headerlink" title="3.5.1 stack基本概念"></a>3.5.1 stack基本概念</h4><p>概念：stack是一种先进后出（FILO）的数据结构，它只有一个出口<img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="D:\blog\Blueblog\themes\butterfly\source\noteimg\stack.png" alt="stack"></p><p>栈顶只有顶端的元素才可以别外界使用，因此栈不允许有遍历行为</p><p>栈中进入数据成为—–<strong>入栈</strong>push</p><p>栈中弹出元素成为——<strong>出栈</strong>pop</p><h4 id="3-5-2-stack常用接口"><a href="#3-5-2-stack常用接口" class="headerlink" title="3.5.2 stack常用接口"></a>3.5.2 stack常用接口</h4><p>功能：栈容器常用的对外接口</p><p>构造函数：</p><ul><li><code>stack&lt;T&gt; stk;</code>                                    //stack 采用模板类实现，stack对象的默认构造形式</li><li><code>stack(const stack &amp;stk); </code>             //拷贝构造函数</li></ul><p>赋值操作：</p><ul><li><code>stack&amp; operator=(const stack &amp;stk);</code>  //重载等号操作符</li></ul><p>数据存取：</p><ul><li><code>push(elem);</code>            //向栈顶添加元素</li><li><code>pop();</code>                      //从栈顶移除第一个元素</li><li><code>top();</code>                      //返回栈顶元素</li></ul><p>大小操作：</p><ul><li><code>empty();</code>                   //判断堆栈是否为空</li><li><code>size();</code>                     //返回栈的大小</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">stack&lt;int&gt;s;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;入栈</span><br><span class="line">s.push(10);</span><br><span class="line">s.push(20);</span><br><span class="line">s.push(30);</span><br><span class="line">s.push(40);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; &quot;栈的大小：&quot; &lt;&lt; s.size() &lt;&lt; endl;</span><br><span class="line">&#x2F;&#x2F;只要栈不为空，查看栈顶，并且指向出栈操作</span><br><span class="line">while (!s.empty())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;栈顶元素为：&quot; &lt;&lt; s.top() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;出栈</span><br><span class="line">s.pop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; &quot;栈的大小：&quot; &lt;&lt; s.size() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>out_put:</p><p>栈的大小：4<br>栈顶元素为：40<br>栈顶元素为：30<br>栈顶元素为：20<br>栈顶元素为：10<br>栈的大小：0</p><h3 id="3-6-queue容器"><a href="#3-6-queue容器" class="headerlink" title="3.6 queue容器"></a>3.6 queue容器</h3><h4 id="3-6-1-queue基本概念"><a href="#3-6-1-queue基本概念" class="headerlink" title="3.6.1 queue基本概念"></a>3.6.1 queue基本概念</h4><p>概念：queue是一种先进先出(First in First Out,FIFO)的数据结构，它有两个出口</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="D:\blog\Blueblog\themes\butterfly\source\noteimg\queue.png" alt="queue"></p><p>队列容器允许从一端新增元素，从另一端移除数据</p><p>队列中只有队头和队尾才可以被外界使用，因此队列不允许有遍历行为</p><p>队列中进数据称为—-<strong>入队</strong>push</p><p>队列中出数据称为—-<strong>出队</strong>pop</p><h4 id="3-6-2-queue常用接口"><a href="#3-6-2-queue常用接口" class="headerlink" title="3.6.2 queue常用接口"></a>3.6.2 queue常用接口</h4><p>功能：队列容器常用的对外接口</p><p>构造函数：</p><ul><li><code>queue&lt;T&gt; que;</code>                                    //queue 采用模板类实现，queue对象的默认构造形式</li><li><code>queue(const queue &amp;que); </code>             //拷贝构造函数</li></ul><p>赋值操作：</p><ul><li><code>queue&amp; operator=(const queue &amp;que);</code>  //重载等号操作符</li></ul><p>数据存取：</p><ul><li><p><code>push(elem);</code>              //向队尾添加元素</p></li><li><p><code>pop();</code>                        //从队头移除第一个元素</p></li><li><p><code>back();</code>                      //返回最后元素</p></li><li><p><code>front();</code>                    //返回第一个元素</p></li></ul><p>大小操作：</p><ul><li><code>empty();</code>                   //判断队列是否为空</li><li><code>size();</code>                     //返回队列的大小</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F;创建队列</span><br><span class="line">queue&lt;Person&gt;q;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;准备数据</span><br><span class="line">Person p1(&quot;贾宝玉&quot;,16);</span><br><span class="line">Person p2(&quot;林黛玉&quot;,15);</span><br><span class="line">Person p3(&quot;薛宝钗&quot;,16);</span><br><span class="line">Person p4(&quot;贾探春&quot;,15);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;入队</span><br><span class="line">q.push(p1);</span><br><span class="line">q.push(p2);</span><br><span class="line">q.push(p3);</span><br><span class="line">q.push(p4);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; &quot;队列大小为：&quot; &lt;&lt; q.size() &lt;&lt; endl;</span><br><span class="line">&#x2F;&#x2F;判断只要队列不为空，查看队头、队尾，出队</span><br><span class="line">while (!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F;查看队头</span><br><span class="line">cout &lt;&lt; &quot;队头元素---姓名：&quot; &lt;&lt; q.front().m_Name &lt;&lt; &quot;年龄：&quot; &lt;&lt; q.front().m_age &lt;&lt; endl;</span><br><span class="line">&#x2F;&#x2F;查看尾</span><br><span class="line">cout &lt;&lt; &quot;队尾元素---姓名：&quot; &lt;&lt; q.back().m_Name &lt;&lt; &quot;年龄：&quot; &lt;&lt; q.back().m_age &lt;&lt; endl;</span><br><span class="line">&#x2F;&#x2F;出队</span><br><span class="line">q.pop();</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; &quot;队列大小为：&quot; &lt;&lt; q.size() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-7-list容器"><a href="#3-7-list容器" class="headerlink" title="3.7 list容器"></a>3.7 list容器</h3><h4 id="3-7-1-list基本概念"><a href="#3-7-1-list基本概念" class="headerlink" title="3.7.1 list基本概念"></a>3.7.1 list基本概念</h4><p>功能：将数据进行链式存储</p><p>链表（list）是一种物理存储单元上非连续的存储结构，数据元素的逻辑顺序是通过链表中的指针链接实现的</p><p>链表的组成：链表由一系列结点组成</p><p>结点的组成：一个是存储数据元素的数据域，一个是存储下一个结点的地址的指针域。</p><p>STL中的链表是一个<strong>双向循环</strong>的链表。</p><p>由于链表的存储方式并不是连续的内存空间，因此链表list中的迭代器只支持前移和后移，属于<strong>双向迭代器</strong>。</p><p>list优点：</p><ul><li>采用动态存储分配，不会造成内存浪费和溢出</li><li>链表执行插入和删除操作十分方便，修改指针即可，不需要移动大量元素。</li></ul><p>list缺点：</p><ul><li>链表灵活，但是空间（指针域）和时间（遍历）额外消耗较大</li></ul><p>list有一个重要的性质，插入操作和删除操作都不会造成原有list迭代器失效，这在vector是不成立的</p><p>总结：<br>STL中list容器和vector容器是两个最常用的容器，各有优缺点</p><h4 id="3-7-2-list构造函数"><a href="#3-7-2-list构造函数" class="headerlink" title="3.7.2 list构造函数"></a>3.7.2 list构造函数</h4><p>功能描述：</p><ul><li>创建list容器</li></ul><p>函数原型：</p><ul><li><code>list&lt;T&gt; lst;</code>                               //list采用模板类实现对象的默认构造形式</li><li><code>list(beg, end);</code>                         //构造函数将[beg, end)区间中的元素拷贝给本身</li><li><code>list(n, elem);</code>                           //构造函数将n个elem拷贝给本身</li><li><code>list(const list &amp;lst);</code>          //拷贝构造函数</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">void printList(const list&lt;int&gt;&amp; L)</span><br><span class="line">&#123;</span><br><span class="line">for (list&lt;int&gt;::const_iterator it &#x3D; L.begin(); it !&#x3D; L.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F;创建list容器</span><br><span class="line">list&lt;int&gt;L1;&#x2F;&#x2F;默认构造</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;添加数据</span><br><span class="line">L1.push_back(10);</span><br><span class="line">L1.push_back(20);</span><br><span class="line">L1.push_back(30);</span><br><span class="line">L1.push_back(40);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;遍历容器</span><br><span class="line">printList(L1);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;区间方式构造</span><br><span class="line">list&lt;int&gt;L2(L1.begin(), L1.end());</span><br><span class="line">printList(L2);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;拷贝构造</span><br><span class="line">list&lt;int&gt;L3(L2);</span><br><span class="line">printList(L3);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;n个elem</span><br><span class="line">list&lt;int&gt;L4(10, 1000);</span><br><span class="line">printList(L4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-7-3-list赋值和交换"><a href="#3-7-3-list赋值和交换" class="headerlink" title="3.7.3 list赋值和交换"></a>3.7.3 list赋值和交换</h4><p>功能描述：</p><ul><li>给list容器进行赋值，以及交换list容器</li></ul><p>函数原型：</p><ul><li><code>assign(beg, end);</code>                                       //将[beg, end)区间中的数据拷贝赋值给本身</li><li><code>assign(n, elem);</code>                                          //将n个elem拷贝赋值给本身</li><li><code>list&amp; operator=(const list &amp;lst);</code>      //重载等号操作符</li><li><code>swap(lst);</code>                                                      //将lst与本身的元素互换</li></ul><p>示例：</p><p>赋值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F;创建list容器</span><br><span class="line">list&lt;int&gt;L1;&#x2F;&#x2F;默认构造</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;添加数据</span><br><span class="line">L1.push_back(10);</span><br><span class="line">L1.push_back(20);</span><br><span class="line">L1.push_back(30);</span><br><span class="line">L1.push_back(40);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;遍历容器</span><br><span class="line">printList(L1);</span><br><span class="line"></span><br><span class="line">list&lt;int&gt;L2;</span><br><span class="line">L2 &#x3D; L1; &#x2F;&#x2F;operator&#x3D;赋值</span><br><span class="line">printList(L2);</span><br><span class="line"></span><br><span class="line">list&lt;int&gt;L3;</span><br><span class="line">L3.assign(L2.begin(), L2.end());</span><br><span class="line">printList(L3);</span><br><span class="line"></span><br><span class="line">list&lt;int&gt;L4;</span><br><span class="line">L4.assign(10, 100);</span><br><span class="line">printList(L4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>交换：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">void test02()</span><br><span class="line">&#123;</span><br><span class="line">list&lt;int&gt;L1;&#x2F;&#x2F;默认构造</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;添加数据</span><br><span class="line">L1.push_back(10);</span><br><span class="line">L1.push_back(20);</span><br><span class="line">L1.push_back(30);</span><br><span class="line">L1.push_back(40);</span><br><span class="line"></span><br><span class="line">list&lt;int&gt;L2;</span><br><span class="line">L2.assign(10, 100);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; &quot;交换前：&quot; &lt;&lt; endl;</span><br><span class="line">printList(L1);</span><br><span class="line">printList(L2);</span><br><span class="line"></span><br><span class="line">L1.swap(L2);</span><br><span class="line">cout &lt;&lt; &quot;交换后：&quot; &lt;&lt; endl;</span><br><span class="line">printList(L1);</span><br><span class="line">printList(L2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-7-4-list大小操作"><a href="#3-7-4-list大小操作" class="headerlink" title="3.7.4 list大小操作"></a>3.7.4 list大小操作</h4><p>功能描述：</p><ul><li>对list容器的大小进行操作</li></ul><p>函数原型：</p><ul><li><code>size();</code>                               //返回容器中元素的个数</li><li><code>empty();</code>                            //判断容器是否为空</li><li><code>resize(num);</code>                    //重新指定容器长度为num，若容器变长，则以默认值填充新位置</li></ul><p>​                                                     //若容器变短，则末尾超出容器的元素被删除</p><ul><li><code>resize(num, elem);</code>        //重新指定容器的长度为num，若容器变长，则以elem值填充新位置</li></ul><p>​                                                     //若容器变短，则末尾超出容器长度的元素被删除</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F;创建list容器</span><br><span class="line">list&lt;int&gt;L1;&#x2F;&#x2F;默认构造</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;添加数据</span><br><span class="line">L1.push_back(10);</span><br><span class="line">L1.push_back(20);</span><br><span class="line">L1.push_back(30);</span><br><span class="line">L1.push_back(40);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;遍历容器</span><br><span class="line">printList(L1);</span><br><span class="line"></span><br><span class="line">if (L1.empty())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;L1为空！&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;L1不为空&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;L1的元素个数为：&quot; &lt;&lt; L1.size() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;重新指定大小</span><br><span class="line">L1.resize(10,100);</span><br><span class="line">printList(L1);</span><br><span class="line"></span><br><span class="line">L1.resize(2);</span><br><span class="line">printList(L1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>out_put:</p><p>10 20 30 40<br>L1不为空<br>L1的元素个数为：4<br>10 20 30 40 100 100 100 100 100 100<br>10 20</p><h4 id="3-7-5-list插入和删除"><a href="#3-7-5-list插入和删除" class="headerlink" title="3.7.5 list插入和删除"></a>3.7.5 list插入和删除</h4><p>功能描述：</p><ul><li>对list容器进行数据的插入和删除</li></ul><p>函数原型：</p><ul><li><code>push_back(elem);</code></li><li><code>pop_back();</code></li><li><code>push_front(elem);</code></li><li><code>pop_front();</code></li><li><code>insert(pos, elem);</code>                      //在pos位置插elem元素拷贝，返回新数据的位置</li><li><code>insert(pos, n, elem);</code>                //在pos位置插n个elem元素，无返回值</li><li><code>insert(pos, beg, end); </code>               //无返回值</li><li><code>clear();</code></li><li><code>erase(beg, end);</code>                            //返回下一个数据的位置</li><li><code>erase(pos); </code>                                       //返回下一个数据的位置</li><li><code>remove(elem);</code>                                   //删除容器中所有与elem值匹配的元素</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">list&lt;int&gt;L;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;尾插</span><br><span class="line">L.push_back(10);</span><br><span class="line">L.push_back(20);</span><br><span class="line">L.push_back(30);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;头插</span><br><span class="line">L.push_front(100);</span><br><span class="line">L.push_front(200);</span><br><span class="line">L.push_front(300);</span><br><span class="line"></span><br><span class="line">printList(L);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;尾删</span><br><span class="line">L.pop_back();</span><br><span class="line">printList(L);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;头删</span><br><span class="line">L.pop_front();</span><br><span class="line">printList(L);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;insert插入</span><br><span class="line">list&lt;int&gt;::iterator it &#x3D; L.begin();</span><br><span class="line">L.insert(++it, 1000);</span><br><span class="line">printList(L);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;删除</span><br><span class="line">it &#x3D; L.begin();</span><br><span class="line">L.erase(++it);</span><br><span class="line">printList(L);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;移除</span><br><span class="line">L.push_back(10000);</span><br><span class="line">L.push_back(10000);</span><br><span class="line">L.push_back(10000);</span><br><span class="line">L.push_back(10000);</span><br><span class="line">printList(L);</span><br><span class="line"></span><br><span class="line">L.remove(10000);</span><br><span class="line">printList(L);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>out_put:</p><p>300 200 100 10 20 30<br>300 200 100 10 20<br>200 100 10 20<br>200 1000 100 10 20<br>200 100 10 20<br>200 100 10 20 10000 10000 10000 10000<br>200 100 10 20</p><h4 id="3-7-6-list数据存取"><a href="#3-7-6-list数据存取" class="headerlink" title="3.7.6 list数据存取"></a>3.7.6 list数据存取</h4><p>功能描述：</p><ul><li>对list容器中数据进行存取</li></ul><p>函数原型：</p><ul><li><code>front();</code>                        //返回第一个元素</li><li><code>back();</code>                           //返回最后一个元素</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">list&lt;int&gt;L;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;尾插</span><br><span class="line">L.push_back(10);</span><br><span class="line">L.push_back(20);</span><br><span class="line">L.push_back(30);</span><br><span class="line">L.push_back(40);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; &quot;第一个元素为：&quot; &lt;&lt; L.front() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;最后一个元素为：&quot; &lt;&lt; L.back() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">list&lt;int&gt;::iterator it &#x3D; L.begin();</span><br><span class="line">it++;   </span><br><span class="line">it--;   &#x2F;&#x2F; 支持双向</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;it&#x3D;it+1;&#x2F;&#x2F;不支持随机访问</span><br><span class="line">printList(L);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>list容器中不可以通过[]或at方式访问数据</li><li>返回第一个元素—–front</li><li>返回最后一个元素—back</li></ul><h4 id="3-7-7-list反转和排序"><a href="#3-7-7-list反转和排序" class="headerlink" title="3.7.7 list反转和排序"></a>3.7.7 list反转和排序</h4><ul><li><code>reverse();</code>      //反转链表</li><li><code>sort();</code>            //链表排序</li></ul><p>示例：</p><p>反转：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F;反转</span><br><span class="line">list&lt;int&gt;L;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;尾插</span><br><span class="line">L.push_back(10);</span><br><span class="line">L.push_back(20);</span><br><span class="line">L.push_back(110);</span><br><span class="line">L.push_back(40);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; &quot;反转前：&quot; &lt;&lt; endl;</span><br><span class="line">printList(L);</span><br><span class="line"></span><br><span class="line">L.reverse();</span><br><span class="line">cout &lt;&lt; &quot;反转后：&quot; &lt;&lt; endl;</span><br><span class="line">printList(L);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>排序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">bool myCompare(int v1, int v2)</span><br><span class="line">&#123;</span><br><span class="line">return v1 &gt; v2;</span><br><span class="line">&#125;</span><br><span class="line">void test02()</span><br><span class="line">&#123;</span><br><span class="line">list&lt;int&gt;L;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;尾插</span><br><span class="line">L.push_back(10);</span><br><span class="line">L.push_back(20);</span><br><span class="line">L.push_back(110);</span><br><span class="line">L.push_back(40);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;排序</span><br><span class="line">cout &lt;&lt; &quot;排序前：&quot; &lt;&lt; endl;</span><br><span class="line">printList(L);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;所有不支持随机访问迭代器的容器，不可以用标准算法</span><br><span class="line">&#x2F;&#x2F;不支持随机访问的容器，内部会提供对应一些算法</span><br><span class="line">L.sort();</span><br><span class="line">cout &lt;&lt; &quot;排序后：&quot; &lt;&lt; endl;</span><br><span class="line">printList(L);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;降序</span><br><span class="line">L.sort(myCompare);</span><br><span class="line">printList(L);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><p>sort—–成员函数</p><h4 id="3-7-8-排序案例"><a href="#3-7-8-排序案例" class="headerlink" title="3.7.8 排序案例"></a>3.7.8 排序案例</h4><p>案例描述：将Person自定义数据类型进行排序，Person中属性有姓名、年龄、身高、评分</p><p>排序规则：按照评分降序，如果评分相同，按照年龄进行升序，如果年龄相同按照升高进行降序</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#include &lt;list&gt;</span><br><span class="line"></span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">Person(string name, int age, double height, int score)</span><br><span class="line">&#123;</span><br><span class="line">m_Name &#x3D; name;</span><br><span class="line">m_age &#x3D; age;</span><br><span class="line">m_height &#x3D; height;</span><br><span class="line">m_score &#x3D; score;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">string m_Name;</span><br><span class="line">int m_age;</span><br><span class="line">double m_height;</span><br><span class="line">int m_score;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void printList(list&lt;Person&gt;&amp; L)</span><br><span class="line">&#123;</span><br><span class="line">for (list&lt;Person&gt;::iterator it &#x3D; L.begin(); it !&#x3D; L.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; (*it).m_Name &lt;&lt; &quot;\t年龄：&quot; &lt;&lt; (*it).m_age &lt;&lt; &quot;\t身高：&quot; &lt;&lt; (*it).m_height &lt;&lt; &quot;\t打分：&quot; &lt;&lt; (*it).m_score &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;指定排序规则</span><br><span class="line">bool comparePerson(Person &amp;p1, Person &amp;p2)</span><br><span class="line">&#123;</span><br><span class="line">if (p1.m_score &#x3D;&#x3D; p2.m_score &amp;&amp; p1.m_age&#x3D;&#x3D;p2.m_age)</span><br><span class="line">&#123;</span><br><span class="line">return p1.m_height &gt; p2.m_height;</span><br><span class="line">&#125;</span><br><span class="line">else if(p1.m_score &#x3D;&#x3D; p2.m_score &amp;&amp; p1.m_age !&#x3D; p2.m_age)</span><br><span class="line">&#123;</span><br><span class="line">return p1.m_age &lt; p2.m_age;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">return p1.m_score &gt; p2.m_score;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F;准备数据</span><br><span class="line">list&lt;Person&gt;L;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;准备数据</span><br><span class="line">Person p1(&quot;贾宝玉&quot;, 16, 174, 8);</span><br><span class="line">Person p2(&quot;林黛玉&quot;, 15, 162, 8);</span><br><span class="line">Person p3(&quot;薛宝钗&quot;, 16, 164, 8);</span><br><span class="line">Person p4(&quot;贾探春&quot;, 15, 160, 9);</span><br><span class="line">Person p5(&quot;牛人&quot;, 15, 190, 2);</span><br><span class="line">Person p6(&quot;红红儿&quot;, 16, 120, 2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;插入数据</span><br><span class="line">L.push_back(p1);</span><br><span class="line">L.push_back(p2);</span><br><span class="line">L.push_back(p3);</span><br><span class="line">L.push_back(p4);</span><br><span class="line">L.push_back(p5);</span><br><span class="line">L.push_back(p6);</span><br><span class="line"></span><br><span class="line">printList(L);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;排序后</span><br><span class="line">cout &lt;&lt; &quot;-------------------------------&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;排序后：&quot; &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">L.sort(comparePerson);</span><br><span class="line">printList(L);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">test01();</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>对于自定义数据类型，必须要指定排序规则，否则编译器不知道如何进行排序</li><li>高级排序只是在排序规则上再次逻辑规则制定，并不复杂</li></ul><h3 id="3-8-set-multiset-容器"><a href="#3-8-set-multiset-容器" class="headerlink" title="3.8 set/multiset 容器"></a>3.8 set/multiset 容器</h3><h4 id="3-8-1-set进本概念"><a href="#3-8-1-set进本概念" class="headerlink" title="3.8.1 set进本概念"></a>3.8.1 set进本概念</h4><p>简介：</p><ul><li>所有元素都会在插入式自动被排序</li></ul><p>本质：</p><ul><li>set/multiset属于<strong>关联式容器</strong>，底层结构是用<strong>二叉树</strong>实现。</li></ul><p>set和multiset区别：</p><ul><li>set不允许容器中有重复的元素</li><li>multiset允许容器中有重复的元素</li></ul><h4 id="3-8-2-set构造和赋值"><a href="#3-8-2-set构造和赋值" class="headerlink" title="3.8.2 set构造和赋值"></a>3.8.2 set构造和赋值</h4><p>功能描述：创建set容器以及赋值。</p><p>构造：</p><ul><li><code>set&lt;T&gt;st;</code>                             //默认构造函数</li><li><code>set(const set &amp;st);</code>        //拷贝构造函数</li></ul><p>赋值：</p><ul><li><code>set&amp; operator=(const set &amp;st);</code>               //重载等号操作符</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">void printSet(set&lt;int&gt;&amp; s)</span><br><span class="line">&#123;</span><br><span class="line">for (set&lt;int&gt;::iterator it &#x3D; s.begin(); it !&#x3D; s.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; (*it) &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">set&lt;int&gt;s1;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;插入数据，只有insert方式</span><br><span class="line">s1.insert(10);</span><br><span class="line">s1.insert(20);</span><br><span class="line">s1.insert(30);</span><br><span class="line">s1.insert(40);</span><br><span class="line">s1.insert(30);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;遍历容器</span><br><span class="line">&#x2F;&#x2F;set容器不允许插入重复值</span><br><span class="line">printSet(s1);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;拷贝构造</span><br><span class="line">set&lt;int&gt;s2(s1);</span><br><span class="line">printSet(s2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>out_put:</p><p>10 20 30 40<br>10 20 30 40</p><p>总结：</p><ul><li>set容器插入数据时用insert</li><li>set容器插入数据的数据会被自动排序</li></ul><h4 id="3-8-3-set大小和交换"><a href="#3-8-3-set大小和交换" class="headerlink" title="3.8.3 set大小和交换"></a>3.8.3 set大小和交换</h4><p>功能描述：</p><ul><li>统计set容器大小以及交换set容器</li></ul><p>函数原型：</p><ul><li><code>size();</code>                        //返回容器中元素的数目</li><li><code>empty();</code>                      //判断容器是否为空</li><li><code>swap(st);</code>                    //交换两个集合容器</li></ul><p>示例：</p><p>大小：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">void printSet(set&lt;int&gt;&amp; s)</span><br><span class="line">&#123;</span><br><span class="line">for (set&lt;int&gt;::iterator it &#x3D; s.begin(); it !&#x3D; s.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; (*it) &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">set&lt;int&gt;s1;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;插入数据</span><br><span class="line">s1.insert(10);</span><br><span class="line">s1.insert(20);</span><br><span class="line">s1.insert(30);</span><br><span class="line">s1.insert(40);</span><br><span class="line">s1.insert(30);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">printSet(s1);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;判断是否为空</span><br><span class="line">if (s1.empty())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;s1为空!&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;s1不为空！&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;s1的大小为：&quot; &lt;&lt; s1.size() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>交换：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">void test02()</span><br><span class="line">&#123;</span><br><span class="line">set&lt;int&gt;s1;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;插入数据</span><br><span class="line">s1.insert(10);</span><br><span class="line">s1.insert(20);</span><br><span class="line">s1.insert(30);</span><br><span class="line">s1.insert(40);</span><br><span class="line">s1.insert(30);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">set&lt;int&gt;s2;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;插入数据</span><br><span class="line">s2.insert(100);</span><br><span class="line">s2.insert(200);</span><br><span class="line">s2.insert(300);</span><br><span class="line">s2.insert(400);</span><br><span class="line">s2.insert(300);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; &quot;交换前：&quot; &lt;&lt; endl;</span><br><span class="line">printSet(s1);</span><br><span class="line">printSet(s2);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;交换</span><br><span class="line">s1.swap(s2);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; &quot;交换后：&quot; &lt;&lt; endl;</span><br><span class="line">printSet(s1);</span><br><span class="line">printSet(s2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-8-4-set插入和删除"><a href="#3-8-4-set插入和删除" class="headerlink" title="3.8.4 set插入和删除"></a>3.8.4 set插入和删除</h4><p>功能描述：</p><ul><li>set容器进行插入数据和删除数据</li></ul><p>函数原型：</p><ul><li><code>insert(elem);</code></li><li><code>clear();</code></li><li><code>erase(pos); </code>                                       //删除，返回下一个元素的迭代器</li><li><code>erase(beg, end);</code>                            //删除，返回下一个元素的迭代器</li><li><code>erase(elem);</code>                                    //删除容器中值为elem的元素</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">set&lt;int&gt;s1;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;插入数据</span><br><span class="line">s1.insert(10);</span><br><span class="line">s1.insert(20);</span><br><span class="line">s1.insert(30);</span><br><span class="line">s1.insert(40);</span><br><span class="line">s1.insert(30);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">printSet(s1);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;删除</span><br><span class="line">s1.erase(s1.begin());</span><br><span class="line"></span><br><span class="line">printSet(s1);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;删除重载版本</span><br><span class="line">s1.erase(30);</span><br><span class="line">printSet(s1);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;清空</span><br><span class="line">&#x2F;&#x2F;s1.erase(s1.begin(), s1.end());</span><br><span class="line">s1.clear();</span><br><span class="line">printSet(s1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.8.5 set查找和统计</p><p>功能描述：</p><ul><li>对set容器查找数据以及统计数据</li></ul><p>函数原型：</p><ul><li><code>find(key);</code>                      //查找key是否存在，返回该键的元素的迭代器；若不存在，返回set.end();</li><li><code>count(key);</code>                    //统计key的元素个数</li></ul><p>查找：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">set&lt;int&gt;s1;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;插入数据</span><br><span class="line">s1.insert(10);</span><br><span class="line">s1.insert(20);</span><br><span class="line">s1.insert(30);</span><br><span class="line">s1.insert(40);</span><br><span class="line">s1.insert(30);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">set&lt;int&gt;::iterator pos &#x3D; s1.find(30);</span><br><span class="line"></span><br><span class="line">if (pos !&#x3D; s1.end())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;找到元素：&quot; &lt;&lt; *pos &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;未找到元素!&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>统计：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">void test02()</span><br><span class="line">&#123;</span><br><span class="line">set&lt;int&gt;s1;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;插入数据</span><br><span class="line">s1.insert(10);</span><br><span class="line">s1.insert(20);</span><br><span class="line">s1.insert(30);</span><br><span class="line">s1.insert(40);</span><br><span class="line">s1.insert(30);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;统计30的个数</span><br><span class="line">int num &#x3D; s1.count(30);</span><br><span class="line">cout &lt;&lt; &quot;num &#x3D; &quot; &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-8-6-set和multiset区别"><a href="#3-8-6-set和multiset区别" class="headerlink" title="3.8.6 set和multiset区别"></a>3.8.6 set和multiset区别</h4><p>区别：</p><ul><li>set不可以插入重复数据，而multiset可以</li><li>set插入数据的同时会返回插入结果，表示插入是否成功</li><li>multiset不会检测数据，因此可以插入重复数据</li></ul><h4 id="3-8-7-pair对组创建"><a href="#3-8-7-pair对组创建" class="headerlink" title="3.8.7 pair对组创建"></a>3.8.7 pair对组创建</h4><p>功能描述：</p><ul><li>成对出现的数据，利用对组可以返回两个数据</li></ul><p>两种创建方式：</p><ul><li><code>pair&lt;type, type&gt; p (value, value2);</code></li><li><code>pair&lt;type, type&gt; p =make_pair(value, value2);</code></li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F;第一种方式</span><br><span class="line">pair&lt;string, int&gt;p(&quot;Tom&quot;, 20);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; p.first &lt;&lt; &quot;\t年龄：&quot; &lt;&lt; p.second &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;第二种方式</span><br><span class="line">pair&lt;string, int&gt;p2 &#x3D; make_pair(&quot;Jarry&quot;, 30);</span><br><span class="line">cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; p2.first &lt;&lt; &quot;\t年龄：&quot; &lt;&lt; p2.second &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-8-8-set容器排序"><a href="#3-8-8-set容器排序" class="headerlink" title="3.8.8 set容器排序"></a>3.8.8 set容器排序</h4><p>学习目标：</p><ul><li>set容器默认排序规则从小到大，掌握如何改变排序规则</li></ul><p>主要技术点：</p><ul><li>利用仿函数，改变排序规则</li></ul><p>示例：set存放内置数据类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class MyCompare</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">bool operator()(int v1, int v2)const</span><br><span class="line">&#123;</span><br><span class="line">return v1 &gt; v2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">set&lt;int, MyCompare&gt;s2;</span><br><span class="line"></span><br><span class="line">s2.insert(10);</span><br><span class="line">s2.insert(40);</span><br><span class="line">s2.insert(20);</span><br><span class="line">s2.insert(150);</span><br><span class="line">s2.insert(30);</span><br><span class="line"></span><br><span class="line">for (set&lt;int,MyCompare&gt;::iterator it &#x3D; s2.begin(); it !&#x3D; s2.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>自定义数据类型:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">class comparePerson</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">bool operator()(const Person&amp;p1,const Person&amp;p2)const</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F;按照年龄降序</span><br><span class="line">return p1.m_age &gt; p2.m_age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F;自定义数据类型 都会制定排序规则</span><br><span class="line">set&lt;Person,comparePerson&gt;s;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;创建Person对象</span><br><span class="line">Person p1(&quot;刘备&quot;, 24);</span><br><span class="line">Person p2(&quot;关羽&quot;, 28);</span><br><span class="line">Person p3(&quot;张飞&quot;, 25);</span><br><span class="line">Person p4(&quot;赵云&quot;, 21);</span><br><span class="line"></span><br><span class="line">s.insert(p1);</span><br><span class="line">s.insert(p2);</span><br><span class="line">s.insert(p3);</span><br><span class="line">s.insert(p4);</span><br><span class="line"></span><br><span class="line">for (set&lt;Person,comparePerson&gt;::iterator it &#x3D; s.begin(); it !&#x3D; s.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot;年龄：&quot; &lt;&lt; it-&gt;m_age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：对于自定义数据类型，必须指明排序规则才能插入。</p><h3 id="3-9-map-multimap容器"><a href="#3-9-map-multimap容器" class="headerlink" title="3.9 map/multimap容器"></a>3.9 map/multimap容器</h3><h4 id="3-9-1-map的基本概念"><a href="#3-9-1-map的基本概念" class="headerlink" title="3.9.1 map的基本概念"></a>3.9.1 map的基本概念</h4><p>简介：</p><ul><li>map中所有元素狗屎pair</li><li>pair中第一个元素为key（键值），起到索引作用，第二个元素为value（实值）</li><li>所有元素都会根据元素的键值自动排序</li></ul><p>本质：</p><ul><li>map/multimap属于 关联式容器，底层结构使用二叉树实现。</li></ul><p>优点：</p><ul><li>可以根据key值快速找到value值</li></ul><p>map和multimap区别：</p><ul><li>map不允许容器中有重复key值元素</li><li>multimap允许容器中有重复key值元素</li></ul><h4 id="3-9-2-map构造和赋值"><a href="#3-9-2-map构造和赋值" class="headerlink" title="3.9.2 map构造和赋值"></a>3.9.2 map构造和赋值</h4><p>功能描述：</p><ul><li>对map容器进行构造和赋值操作</li></ul><p>函数原型：</p><p>构造：</p><ul><li>map&lt;T1, T2&gt; mp;</li><li>map(const map &amp;mp);</li></ul><p>赋值：</p><ul><li>map&amp; operator=(const map &amp;mp);</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">void printMap(map&lt;int,int&gt;&amp; m)</span><br><span class="line">&#123;</span><br><span class="line">for (map&lt;int,int&gt;::iterator it &#x3D; m.begin(); it !&#x3D; m.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;key &#x3D; &quot; &lt;&lt; (*it).first &lt;&lt; &quot; value &#x3D; &quot; &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">map&lt;int, int&gt;m;</span><br><span class="line"></span><br><span class="line">m.insert(pair&lt;int,int&gt;(1, 10));</span><br><span class="line">m.insert(pair&lt;int,int&gt;(2, 20));</span><br><span class="line">m.insert(pair&lt;int,int&gt;(3, 30));</span><br><span class="line">m.insert(pair&lt;int,int&gt;(4, 40));</span><br><span class="line"></span><br><span class="line">printMap(m);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;拷贝构造</span><br><span class="line">map&lt;int, int&gt;m2(m);</span><br><span class="line">printMap(m2);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;赋值</span><br><span class="line">map&lt;int, int&gt;m3;</span><br><span class="line">m3 &#x3D; m2;</span><br><span class="line">printMap(m3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：map中所有元素都是成对出现，插入数据时要使用对组。</p><h4 id="3-9-3-map-大小和交换"><a href="#3-9-3-map-大小和交换" class="headerlink" title="3.9.3 map 大小和交换"></a>3.9.3 map 大小和交换</h4><p>函数原型：</p><ul><li>size();</li><li>empty();</li><li>swap(st);</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">m.size();</span><br><span class="line">m1.swap(m2);</span><br></pre></td></tr></table></figure><p>和之前的容器差别不大</p><h4 id="3-9-4-map插入和删除"><a href="#3-9-4-map插入和删除" class="headerlink" title="3.9.4 map插入和删除"></a>3.9.4 map插入和删除</h4><p>函数原型：</p><ul><li><code>insert(elem);</code></li><li><code>clear();</code></li><li><code>erase(pos); </code>                                       //删除，返回下一个元素的迭代器</li><li><code>erase(beg, end);</code>                            //删除，返回下一个元素的迭代器</li><li><code>erase(key);</code>                                      //删除容器中值为key的元素</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">map&lt;int, int&gt;m;</span><br><span class="line">&#x2F;&#x2F;第一种</span><br><span class="line">m.insert(pair&lt;int, int&gt;(1, 10));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;第二种</span><br><span class="line">m.insert(make_pair(2, 20));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;第三种</span><br><span class="line">m.insert(map&lt;int, int&gt;::value_type(3, 30));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;第四种</span><br><span class="line">m[4] &#x3D; 40;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;第四种不建议做插入用途，可以利用key访问到value</span><br><span class="line">&#x2F;&#x2F;cout&lt;&lt;m[4]&lt;&lt;endl;</span><br><span class="line">printMap(m);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;删除</span><br><span class="line">m.erase(m.begin());</span><br><span class="line">printMap(m);</span><br><span class="line"></span><br><span class="line">m.erase(3);&#x2F;&#x2F;按照key删除</span><br><span class="line">printMap(m);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;清空两种方式，和其他容器一样</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-9-5-map查找和统计"><a href="#3-9-5-map查找和统计" class="headerlink" title="3.9.5 map查找和统计"></a>3.9.5 map查找和统计</h4><p>功能描述：</p><ul><li>对map容器进行查找数据以及统计数据</li></ul><p>函数原型：</p><ul><li><code>find(key);</code>                              //查找key是否存在，若存在，返回该键的元素的迭代器，若不存在，返回set.end()</li><li><code>count(key);</code>                            //统计key的元素个数</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">map&lt;int, int&gt;m;</span><br><span class="line"></span><br><span class="line">m.insert(pair&lt;int, int&gt;(1, 10));</span><br><span class="line">m.insert(pair&lt;int, int&gt;(2, 20));</span><br><span class="line">m.insert(pair&lt;int, int&gt;(3, 30));</span><br><span class="line">m.insert(pair&lt;int, int&gt;(3, 40));</span><br><span class="line"></span><br><span class="line">map&lt;int, int&gt;::iterator pos &#x3D; m.find(3);</span><br><span class="line">if (pos !&#x3D; m.end())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;查到了元素 key &#x3D; &quot; &lt;&lt; (*pos).first &lt;&lt; &quot; value &#x3D; &quot; &lt;&lt; pos-&gt;second &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;未找到元素!&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;统计</span><br><span class="line">&#x2F;&#x2F;map不允许插入重复key元素，count统计而言，结果只有1和0两种</span><br><span class="line">int num &#x3D; m.count(3);</span><br><span class="line">cout &lt;&lt; &quot;num &#x3D; &quot; &lt;&lt; num &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>查找—find（返回的是迭代器）</li><li>统计—count（对于map，结果为0或者1）</li></ul><h4 id="3-6-8-map容器排序"><a href="#3-6-8-map容器排序" class="headerlink" title="3.6.8 map容器排序"></a>3.6.8 map容器排序</h4><p>学习目标：</p><ul><li>map容器默认排序规则为按照key值进行，从小到大排序，掌握如何改变排序规则</li></ul><p>主要技术：</p><ul><li>利用仿函数，可以改变排序规则</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">class MyCompare</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">bool operator()(int v1, int v2)const</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F;降序</span><br><span class="line">return v1 &gt; v2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void printMap(map&lt;int,int,MyCompare&gt;&amp; m)</span><br><span class="line">&#123;</span><br><span class="line">for (map&lt;int,int,MyCompare&gt;::iterator it &#x3D; m.begin(); it !&#x3D; m.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;key &#x3D; &quot; &lt;&lt; (*it).first &lt;&lt; &quot; value &#x3D; &quot; &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">class comparePerson</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">bool operator()(const Person&amp;p1,const Person&amp;p2)const</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F;按照年龄降序</span><br><span class="line">return p1.m_age &gt; p2.m_age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">map&lt;int, int, MyCompare&gt;m;</span><br><span class="line"></span><br><span class="line">m.insert(pair&lt;int, int&gt;(1, 10));</span><br><span class="line">m.insert(pair&lt;int, int&gt;(4, 40));</span><br><span class="line">m.insert(pair&lt;int, int&gt;(2, 20));</span><br><span class="line">m.insert(pair&lt;int, int&gt;(3, 30));</span><br><span class="line">m.insert(pair&lt;int, int&gt;(3, 40));</span><br><span class="line"></span><br><span class="line">printMap(m);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>利用仿函数可以指定map容器的排序规则</li><li>对于自定义数据类型，map必须要指定排序规则，同set容器</li></ul><h3 id="3-10-案例-员工分组"><a href="#3-10-案例-员工分组" class="headerlink" title="3.10 案例-员工分组"></a>3.10 案例-员工分组</h3><h4 id="3-10-1-案例描述"><a href="#3-10-1-案例描述" class="headerlink" title="3.10.1 案例描述"></a>3.10.1 案例描述</h4><p>lue</p><h4 id="3-10-2-实现步骤"><a href="#3-10-2-实现步骤" class="headerlink" title="3.10.2 实现步骤"></a>3.10.2 实现步骤</h4><ol><li>创建10名员工，放到vector中</li><li>遍历vector容器，取出每个员工，进行随机分组</li><li>分组后，将员工部门编号作为key，具体员工为value，放入到multimap容器中</li><li>分部门显示员工信息</li></ol><p>实现代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;ctime&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line"></span><br><span class="line">#define CEHUA  0</span><br><span class="line">#define MEISHU 1</span><br><span class="line">#define YANFA  2</span><br><span class="line"></span><br><span class="line">class Worker</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">string m_Name;</span><br><span class="line">int m_Salary;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void createWorker(vector&lt;Worker&gt;&amp; v)</span><br><span class="line">&#123;</span><br><span class="line">string nameSeed &#x3D; &quot;ABCDEFGHIJ&quot;;</span><br><span class="line">for (int i &#x3D; 0; i &lt; 10; i++)</span><br><span class="line">&#123;</span><br><span class="line">Worker worker;</span><br><span class="line">worker.m_Name &#x3D; &quot;员工&quot;;</span><br><span class="line">worker.m_Name +&#x3D; nameSeed[i];</span><br><span class="line"></span><br><span class="line">worker.m_Salary &#x3D; rand() % 10001 + 10000;</span><br><span class="line"></span><br><span class="line">v.push_back(worker);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;员工分组</span><br><span class="line">void setGroup(vector&lt;Worker&gt;&amp; v, multimap&lt;int, Worker&gt;&amp; m)</span><br><span class="line">&#123;</span><br><span class="line">for (vector&lt;Worker&gt;::iterator it &#x3D; v.begin(); it !&#x3D; v.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line">&#x2F;&#x2F;产生随机部门编号</span><br><span class="line">int deptId &#x3D; rand() % 3;  &#x2F;&#x2F;0 1 2</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;将员工插入到分组中</span><br><span class="line">m.insert(make_pair(deptId, *it));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">void showWorkerByGroup(multimap&lt;int, Worker&gt;&amp; m)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;策划部门：&quot; &lt;&lt; endl;</span><br><span class="line">multimap&lt;int, Worker&gt;::iterator pos &#x3D; m.find(CEHUA);</span><br><span class="line">int count &#x3D; m.count(CEHUA);&#x2F;&#x2F;统计具体人数</span><br><span class="line">int index &#x3D; 0;</span><br><span class="line">for (; pos !&#x3D; m.end() &amp;&amp; index &lt; count; pos++, index++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; pos-&gt;second.m_Name &lt;&lt; &quot; 工资：&quot; &lt;&lt; pos-&gt;second.m_Salary &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; &quot;------------------------------------&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;美术部门：&quot; &lt;&lt; endl;</span><br><span class="line">pos &#x3D; m.find(MEISHU);</span><br><span class="line">count &#x3D; m.count(MEISHU);&#x2F;&#x2F;统计具体人数</span><br><span class="line">index &#x3D; 0;</span><br><span class="line">for (; pos !&#x3D; m.end() &amp;&amp; index &lt; count; pos++, index++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; pos-&gt;second.m_Name &lt;&lt; &quot; 工资：&quot; &lt;&lt; pos-&gt;second.m_Salary &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; &quot;------------------------------------&quot; &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; &quot;研发部门：&quot; &lt;&lt; endl;</span><br><span class="line">pos &#x3D; m.find(YANFA);</span><br><span class="line">count &#x3D; m.count(YANFA);&#x2F;&#x2F;统计具体人数</span><br><span class="line">index &#x3D; 0;</span><br><span class="line">for (; pos !&#x3D; m.end() &amp;&amp; index &lt; count; pos++, index++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; pos-&gt;second.m_Name &lt;&lt; &quot; 工资：&quot; &lt;&lt; pos-&gt;second.m_Salary &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">srand((unsigned int)time(NULL));</span><br><span class="line">&#x2F;&#x2F;1.创建员工</span><br><span class="line">vector&lt;Worker&gt;vWorker;</span><br><span class="line">createWorker(vWorker);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;&#x2F;&#x2F;测试</span><br><span class="line">&#x2F;&#x2F;for (vector&lt;Worker&gt;::iterator it &#x3D; vWorker.begin(); it !&#x3D; vWorker.end(); it++)</span><br><span class="line">&#x2F;&#x2F;&#123;</span><br><span class="line">&#x2F;&#x2F;cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot; 工资：&quot; &lt;&lt; it-&gt;m_Salary &lt;&lt; endl;</span><br><span class="line">&#x2F;&#x2F;&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;2.员工分组</span><br><span class="line">multimap&lt;int, Worker&gt;mWorker;</span><br><span class="line">setGroup(vWorker,mWorker);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;3.分组显示员工</span><br><span class="line">showWorkerByGroup(mWorker);</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-STL-函数对象"><a href="#4-STL-函数对象" class="headerlink" title="4 STL-函数对象"></a>4 STL-函数对象</h2><h3 id="4-1-函数对象"><a href="#4-1-函数对象" class="headerlink" title="4.1 函数对象"></a>4.1 函数对象</h3><h4 id="4-4-1函数对象概念"><a href="#4-4-1函数对象概念" class="headerlink" title="4.4.1函数对象概念"></a>4.4.1函数对象概念</h4><p>概念：</p><ul><li><strong>重载函数调用操作符</strong>的类，其对象常称为<strong>函数对象</strong></li><li>函数对象使用重载的()时，行为类似函数调用，也叫仿函数。</li></ul><p>本质：</p><p>函数对象（仿函数）是一个类，不是一个函数</p><h4 id="4-1-2-函数对象使用"><a href="#4-1-2-函数对象使用" class="headerlink" title="4.1.2 函数对象使用"></a>4.1.2 函数对象使用</h4><p>特点：</p><ul><li>函数在使用时，可以像普通函数那样调用，可以有参数，可以有返回值</li><li>函数对象超出普通函数的概念，函数对象可以有自己的状态</li><li>函数对象可以作为参数传递</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">class MyAdd</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">int operator()(int v1, int v2)</span><br><span class="line">&#123;</span><br><span class="line">return v1 + v2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;1.函数对象在使用时，可以像普通函数那样调用，可以有参数，可以有返回值</span><br><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">MyAdd myAdd;</span><br><span class="line">cout &lt;&lt; myAdd(10, 10) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;2.函数对象超出普通函数的概念，函数对象可以有自己的状态</span><br><span class="line">class MyPrint</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">MyPrint()</span><br><span class="line">&#123;</span><br><span class="line">this-&gt;count &#x3D; 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void operator()(string test)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; test &lt;&lt; endl;</span><br><span class="line">this-&gt;count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int count;&#x2F;&#x2F;内部自己状态</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void test02()</span><br><span class="line">&#123;</span><br><span class="line">MyPrint myPrint;</span><br><span class="line">myPrint(&quot;hello world&quot;);</span><br><span class="line">myPrint(&quot;hello world&quot;);</span><br><span class="line">myPrint(&quot;hello world&quot;);</span><br><span class="line">myPrint(&quot;hello world&quot;);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt;&quot;myPrint调用次数为：&quot;&lt;&lt; myPrint.count &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;3.函数对象可以作为参数传递</span><br><span class="line">void doPrint(MyPrint&amp; mp, string test)</span><br><span class="line">&#123;</span><br><span class="line">mp(test);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void test03()</span><br><span class="line">&#123;</span><br><span class="line">MyPrint myPrint;</span><br><span class="line">doPrint(myPrint, &quot;Hello c++&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-谓词"><a href="#4-2-谓词" class="headerlink" title="4.2 谓词"></a>4.2 谓词</h3><h4 id="4-2-1-谓词概念"><a href="#4-2-1-谓词概念" class="headerlink" title="4.2.1 谓词概念"></a>4.2.1 谓词概念</h4><p>概念：</p><ul><li>返回bool类型的仿函数成为谓词</li><li>如果operator()接受一个参数，那么叫做一元谓词</li><li>如果operator()接受两个参数，那么叫做二元谓词</li></ul><h4 id="4-2-2-一元谓词"><a href="#4-2-2-一元谓词" class="headerlink" title="4.2.2 一元谓词"></a>4.2.2 一元谓词</h4><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">class GreaterFive</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">bool operator()(int val)</span><br><span class="line">&#123;</span><br><span class="line">return val &gt; 5;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;int&gt;v;</span><br><span class="line">for (int i &#x3D; 0; i &lt; 10; i++)</span><br><span class="line">&#123;</span><br><span class="line">v.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;查找容器中 有没有大于5的数字</span><br><span class="line">&#x2F;&#x2F;GreaterFive()匿名对象</span><br><span class="line">vector&lt;int&gt;::iterator it &#x3D; find_if(v.begin(), v.end(), GreaterFive());</span><br><span class="line">if (it &#x3D;&#x3D; v.end())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;未找到&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;找到大于5的数为：&quot; &lt;&lt; *it &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-3-二元谓词"><a href="#4-2-3-二元谓词" class="headerlink" title="4.2.3 二元谓词"></a>4.2.3 二元谓词</h4><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">class MyCompare</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">bool operator()(int v1, int v2)</span><br><span class="line">&#123;</span><br><span class="line">return v1 &gt; v2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;int&gt;v;</span><br><span class="line"></span><br><span class="line">v.push_back(10);</span><br><span class="line">v.push_back(50);</span><br><span class="line">v.push_back(30);</span><br><span class="line">v.push_back(20);</span><br><span class="line">v.push_back(40);</span><br><span class="line"></span><br><span class="line">sort(v.begin(), v.end());</span><br><span class="line">for (vector&lt;int&gt;::iterator it &#x3D; v.begin(); it !&#x3D; v.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;按降序排列</span><br><span class="line">sort(v.begin(), v.end(), MyCompare());</span><br><span class="line">for (vector&lt;int&gt;::iterator it &#x3D; v.begin(); it !&#x3D; v.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：参数只有两个的谓词，称为二元谓词</p><h3 id="4-3-內建函数对象"><a href="#4-3-內建函数对象" class="headerlink" title="4.3 內建函数对象"></a>4.3 內建函数对象</h3><h4 id="4-3-1-內建函数对象意义"><a href="#4-3-1-內建函数对象意义" class="headerlink" title="4.3.1 內建函数对象意义"></a>4.3.1 內建函数对象意义</h4><p>概念：</p><ul><li>STL內建了一些函数对象</li></ul><p>分类：</p><ul><li>算数仿函数</li><li>关系仿函数</li><li>逻辑仿函数</li></ul><p>用法：</p><ul><li>这些仿函数所产生的对象，用法和一般函数完全相同</li><li>使用內建函数对象，需要引入头文件<code>#include&lt;functional&gt;</code></li></ul><h4 id="4-3-2-算术仿函数"><a href="#4-3-2-算术仿函数" class="headerlink" title="4.3.2 算术仿函数"></a>4.3.2 算术仿函数</h4><p>功能描述：</p><ul><li>实现四则运算</li><li>其中negate是一元运算，其他都是二元运算</li></ul><p>仿函数原型：</p><ul><li><code>template&lt;class T&gt; T plus&lt;T&gt; </code>                          //加法仿函数</li><li><code>template&lt;class T&gt; T minus&lt;T&gt; </code>                        //减法仿函数</li><li><code>template&lt;class T&gt; T multiplies&lt;T&gt; </code>              //乘法仿函数</li><li><code>template&lt;class T&gt; T divides&lt;T&gt;</code>                    //除法仿函数</li><li><code>template&lt;class T&gt; T modulus&lt;T&gt; </code>                    //取模仿函数</li><li><code>template&lt;class T&gt; T negate&lt;T&gt;</code>                       //取反仿函数</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;nagate 一元仿函数 取反仿函数</span><br><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">negate&lt;int&gt;n;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; n(50) &lt;&lt; endl;</span><br><span class="line">&#x2F;&#x2F;out_put:-50</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;plus 二元仿函数 加法</span><br><span class="line">void test02()</span><br><span class="line">&#123;</span><br><span class="line">plus&lt;int&gt;p;</span><br><span class="line">cout &lt;&lt; p(10, 20) &lt;&lt; endl;</span><br><span class="line">&#x2F;&#x2F;out_put:30</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：使用內建函数对象时，需要引入头文件<code>#include&lt;functional&gt;</code></p><h4 id="4-3-3-关系仿函数"><a href="#4-3-3-关系仿函数" class="headerlink" title="4.3.3 关系仿函数"></a>4.3.3 关系仿函数</h4><p>功能描述：</p><ul><li>实现关系对比</li></ul><p>仿函数原型：</p><ul><li><code>template&lt;class T&gt; bool equal_to&lt;T&gt; </code>                       //等于</li><li><code>template&lt;class T&gt; bool not_equal_to&lt;T&gt; </code>              //不等于</li><li><code>template&lt;class T&gt; bool greater&lt;T&gt;</code>                        //大于</li><li><code>template&lt;class T&gt; bool greater_equal&lt;T&gt;</code>            //小于等于</li><li><code>template&lt;class T&gt; bool less&lt;T&gt; </code>                              //小于</li><li><code>template&lt;class T&gt; bool less_equal&lt;T&gt;</code>                  //小于等于 </li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;int&gt;v;</span><br><span class="line"></span><br><span class="line">v.push_back(10);</span><br><span class="line">v.push_back(30);</span><br><span class="line">v.push_back(40);</span><br><span class="line">v.push_back(20);</span><br><span class="line">v.push_back(50);</span><br><span class="line"></span><br><span class="line">for (vector&lt;int&gt;::iterator it &#x3D; v.begin(); it !&#x3D; v.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;*it&lt;&lt;&quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;降序</span><br><span class="line">&#x2F;&#x2F;內建函数对象</span><br><span class="line">sort(v.begin(), v.end(), greater&lt;int&gt;());</span><br><span class="line">for (vector&lt;int&gt;::iterator it &#x3D; v.begin(); it !&#x3D; v.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：关系仿函数中最常用的就是greater&lt;&gt;大于</p><h4 id="4-3-4-逻辑仿函数"><a href="#4-3-4-逻辑仿函数" class="headerlink" title="4.3.4 逻辑仿函数"></a>4.3.4 逻辑仿函数</h4><p>功能描述：</p><ul><li>实现逻辑运算</li></ul><p>函数原型：</p><ul><li><code>template&lt;class T&gt; bool logical_and&lt;T&gt;</code>          //逻辑与</li><li><code>template&lt;class T&gt; bool logical_or&lt;T&gt;</code>            //逻辑或</li><li><code>template&lt;class T&gt; bool logical_not&lt;T&gt;</code>          //逻辑非</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;bool&gt;v;</span><br><span class="line"></span><br><span class="line">v.push_back(true);</span><br><span class="line">v.push_back(false);</span><br><span class="line">v.push_back(true);</span><br><span class="line">v.push_back(false);</span><br><span class="line"></span><br><span class="line">for (vector&lt;bool&gt;::iterator it &#x3D; v.begin(); it !&#x3D; v.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;*it&lt;&lt;&quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;利用逻辑非 将容器v搬运到 容器v2中，并执行取反操作</span><br><span class="line">vector&lt;bool&gt;v2;</span><br><span class="line">v2.resize(v.size());</span><br><span class="line"></span><br><span class="line">transform(v.begin(), v.end(), v2.begin(), logical_not&lt;bool&gt;());</span><br><span class="line">for (vector&lt;bool&gt;::iterator it &#x3D; v2.begin(); it !&#x3D; v2.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：逻辑仿函数实际应用较少，了解即可</p><h2 id="5-STL-常用算法"><a href="#5-STL-常用算法" class="headerlink" title="5 STL-常用算法"></a>5 STL-常用算法</h2><p>概述：</p><ul><li>算法主要由头文件<code>&lt;algorithm&gt;&lt;functional&gt;&lt;numeric&gt;</code>组成。</li><li><code>&lt;algorithm&gt;</code>是所有STL头文件中最大的一个，范围涉及到比较，交换，查找，遍历操作，复制，修改等等。</li><li><code>&lt;numeric&gt;</code>体积较小，只包括几个在序列上面进行简单数学运算的模板函数。</li><li><code>&lt;functional&gt;</code>定义了一些模板类，用以声明的函数对象。</li></ul><h3 id="5-1-常用遍历算法"><a href="#5-1-常用遍历算法" class="headerlink" title="5.1 常用遍历算法"></a>5.1 常用遍历算法</h3><p>学习目标：</p><ul><li>掌握常用的遍历算法</li></ul><p>算法简介：</p><ul><li><code>for_each</code>                //遍历容器</li><li><code>transform</code>              //搬运容器到另一个容器中</li></ul><h4 id="5-1-1-for-each"><a href="#5-1-1-for-each" class="headerlink" title="5.1.1 for_each"></a>5.1.1 for_each</h4><p>功能描述：</p><ul><li>实现遍历容器</li></ul><p>函数原型：</p><ul><li><p><code>for_each(iterator beg, iterator end,  _func);</code></p><p>//遍历算法 遍历容器元素</p><p>//beg开始迭代器</p><p>//end结束迭代器</p><p>//_func函数或者函数对象</p></li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;普通函数</span><br><span class="line">void print01(int val)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; val &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;仿函数</span><br><span class="line">class print02</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">void operator()(int val)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; val &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;int&gt;v;</span><br><span class="line">for (int i &#x3D; 0; i &lt; 10; i++)</span><br><span class="line">&#123;</span><br><span class="line">v.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;普通函数遍历</span><br><span class="line">for_each(v.begin(), v.end(), print01);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;仿函数遍历</span><br><span class="line">for_each(v.begin(), v.end(), print02());&#x2F;&#x2F;print02()匿名函数对象</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：for_each在实际开发中是最常用的遍历算法，需要熟练掌握</p><h4 id="5-1-2-transform"><a href="#5-1-2-transform" class="headerlink" title="5.1.2 transform"></a>5.1.2 transform</h4><p>功能描述：</p><ul><li>搬运容器到另一个容器中</li></ul><p>函数原型：</p><ul><li><p><code>transform(iterator beg1, iterator end1, iterator beg2, _func);</code></p><p>//beg1 源容器开始迭代器</p><p>//end1 源容器结束迭代器</p><p>//beg2 目标容器开始迭代器</p><p>//_func 函数或函数对象</p></li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;常用遍历算法 transform</span><br><span class="line">class Transform</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">int operator()(int v)</span><br><span class="line">&#123;</span><br><span class="line">return v + 100;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">class MyPrint</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">void operator()(int val)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; val &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;int&gt;v;</span><br><span class="line">for (int i &#x3D; 0; i &lt; 10; i++)</span><br><span class="line">&#123;</span><br><span class="line">v.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;int&gt;vTarget;  &#x2F;&#x2F;目标容器</span><br><span class="line">vTarget.resize(v.size());   &#x2F;&#x2F;目标容器，需要提前开辟空间</span><br><span class="line"></span><br><span class="line">transform(v.begin(), v.end(), vTarget.begin(), Transform());</span><br><span class="line">for_each(vTarget.begin(), vTarget.end(),MyPrint());</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：搬运的目标容器必须要提前开辟空间，否则无法正常搬运。</p><h3 id="5-2-常用查找算法"><a href="#5-2-常用查找算法" class="headerlink" title="5.2 常用查找算法"></a>5.2 常用查找算法</h3><p>学习目标：</p><ul><li>掌握常用的查找算法</li></ul><p>算法简介：</p><ul><li><code>find</code>                                   //查找元素</li><li><code>find_if </code>                             //按条件查找元素</li><li><code>adjacent_find </code>                //查找相邻重复元素</li><li><code>binary_search</code>                //二分法查找</li><li><code>count</code>                                 //统计元素个数</li><li><code>count_if</code>                           //按条件统计元素个数</li></ul><h4 id="5-2-1-find"><a href="#5-2-1-find" class="headerlink" title="5.2.1 find"></a>5.2.1 find</h4><p>功能描述：</p><ul><li>查找指定元素，找到返回指定元素的迭代器，找不到返回结束迭代器end();</li></ul><p>函数原型：</p><ul><li><p><code>find(iterator beg, iterator end, value);</code></p><p>//按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p><p>//beg开始迭代器</p><p>//end结束迭代器</p><p>//value查找的元素</p></li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;常用遍历算法 transform</span><br><span class="line">class Transform</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">int operator()(int v)</span><br><span class="line">&#123;</span><br><span class="line">return v + 100;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">class MyPrint</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">void operator()(int val)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; val &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;int&gt;v;</span><br><span class="line">for (int i &#x3D; 0; i &lt; 10; i++)</span><br><span class="line">&#123;</span><br><span class="line">v.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;查找容器中是否有5这个元素</span><br><span class="line">vector&lt;int&gt;::iterator it &#x3D; find(v.begin(), v.end(), 5);</span><br><span class="line">if (it &#x3D;&#x3D; v.end())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;没有找到！&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;找到：&quot; &lt;&lt; *it &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">Person(string name, int age)</span><br><span class="line">&#123;</span><br><span class="line">m_name &#x3D; name;</span><br><span class="line">m_age &#x3D; age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;重载&#x3D;&#x3D; 让底层find知道如何对比person数据类型</span><br><span class="line">bool operator&#x3D;&#x3D;(const Person&amp; p)</span><br><span class="line">&#123;</span><br><span class="line">if (this-&gt;m_name &#x3D;&#x3D; p.m_name &amp;&amp; this-&gt;m_age &#x3D;&#x3D; p.m_age)</span><br><span class="line">&#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">string m_name;</span><br><span class="line">int m_age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void test02()</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;Person&gt;v;</span><br><span class="line">&#x2F;&#x2F;创建数据类型</span><br><span class="line">Person p1(&quot;aaa&quot;, 10);</span><br><span class="line">Person p2(&quot;bbb&quot;, 20);</span><br><span class="line">Person p3(&quot;ccc&quot;, 30);</span><br><span class="line">Person p4(&quot;ddd&quot;, 40);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;放到容器中</span><br><span class="line">v.push_back(p1);</span><br><span class="line">v.push_back(p2);</span><br><span class="line">v.push_back(p3);</span><br><span class="line">v.push_back(p4);</span><br><span class="line"></span><br><span class="line">Person h(&quot;bbb&quot;, 20);</span><br><span class="line">vector&lt;Person&gt;::iterator it &#x3D; find(v.begin(), v.end(), h);</span><br><span class="line">if (it &#x3D;&#x3D; v.end())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;没有找到！&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;找到元素，姓名：&quot; &lt;&lt; it-&gt;m_name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; it-&gt;m_age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：利用find可以在容器中找指定的元素，返回值是<strong>迭代器</strong></p><h4 id="5-2-2-find-if"><a href="#5-2-2-find-if" class="headerlink" title="5.2.2 find_if"></a>5.2.2 find_if</h4><p>功能描述：</p><ul><li>按条件查找元素</li></ul><p>函数原型：</p><ul><li><p><code>find_if(iterator beg, iterator end, _Pred);</code></p><p>//按值查找元素，找到返回指定位置迭代器，找不大返回结束迭代器位置</p><p>//beg开始迭代器</p><p>//end结束迭代器</p><p>//_Pred 函数或者谓词（返回bool类型的仿函数）</p></li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;1.查找内置数据类型</span><br><span class="line">class GreaterFive</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">bool operator()(int val)</span><br><span class="line">&#123;</span><br><span class="line">return val &gt; 5;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;int&gt;v;</span><br><span class="line">for (int i &#x3D; 0; i &lt; 10; i++)</span><br><span class="line">&#123;</span><br><span class="line">v.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;int&gt;::iterator it &#x3D; find_if(v.begin(), v.end(), GreaterFive());</span><br><span class="line">if (it &#x3D;&#x3D; v.end())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;没有找到！&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;找到大于5的数字为：&quot; &lt;&lt; *it &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">Person(string name, int age)</span><br><span class="line">&#123;</span><br><span class="line">m_name &#x3D; name;</span><br><span class="line">m_age &#x3D; age;</span><br><span class="line">&#125;</span><br><span class="line">string m_name;</span><br><span class="line">int m_age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Greater20</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">bool operator()(Person&amp; p)</span><br><span class="line">&#123;</span><br><span class="line">return p.m_age &gt; 20;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">void test02()</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;Person&gt;v;</span><br><span class="line">&#x2F;&#x2F;创建数据类型</span><br><span class="line">Person p1(&quot;aaa&quot;, 10);</span><br><span class="line">Person p2(&quot;bbb&quot;, 20);</span><br><span class="line">Person p3(&quot;ccc&quot;, 30);</span><br><span class="line">Person p4(&quot;ddd&quot;, 40);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;放到容器中</span><br><span class="line">v.push_back(p1);</span><br><span class="line">v.push_back(p2);</span><br><span class="line">v.push_back(p3);</span><br><span class="line">v.push_back(p4);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;找年龄大于20的人</span><br><span class="line">vector&lt;Person&gt;::iterator it &#x3D; find_if(v.begin(), v.end(), Greater20());</span><br><span class="line">if (it &#x3D;&#x3D; v.end())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;没有找到！&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;找到元素，姓名：&quot; &lt;&lt; it-&gt;m_name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; it-&gt;m_age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-3-adjacent-find"><a href="#5-2-3-adjacent-find" class="headerlink" title="5.2.3 adjacent_find"></a>5.2.3 adjacent_find</h4><p>功能描述：</p><ul><li>查找相邻重复元素</li></ul><p>函数原型：</p><ul><li><p><code>adjacent_find&lt;iterator beg, iterator end&gt;;</code></p><p>//查找相邻重复元素，返回相邻元素的第一个位置的迭代器</p><p>//beg开始迭代器</p><p>//end结束迭代器</p></li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;int&gt;v;</span><br><span class="line">v.push_back(0);</span><br><span class="line">v.push_back(2);</span><br><span class="line">v.push_back(0);</span><br><span class="line">v.push_back(3);</span><br><span class="line">v.push_back(1);</span><br><span class="line">v.push_back(4);</span><br><span class="line">v.push_back(3);</span><br><span class="line">v.push_back(3);</span><br><span class="line"></span><br><span class="line">vector&lt;int&gt;::iterator it &#x3D; adjacent_find(v.begin(), v.end());</span><br><span class="line">if (it &#x3D;&#x3D; v.end())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;没有找到！&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;找到相邻重复元素：&quot; &lt;&lt; *it &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-4-binary-search"><a href="#5-2-4-binary-search" class="headerlink" title="5.2.4 binary_search"></a>5.2.4 binary_search</h4><p>功能描述：</p><ul><li>查找指定元素是否存在</li></ul><p>函数原型:</p><ul><li><p><code>bool binary_search(iterator beg, iterator end, value);</code></p><p>//查找指定元素，查到返回true，否则false</p><p>//ps：在<strong>无序序列中不可用</strong></p><p>//beg开始迭代器</p><p>//end结束迭代器</p><p>//value查找的元素</p></li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;int&gt;v;</span><br><span class="line">for (int i &#x3D; 0; i &lt; 9; i++)</span><br><span class="line">&#123;</span><br><span class="line">v.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;查找容器中是否有9</span><br><span class="line">bool ret &#x3D; binary_search(v.begin(), v.end(), 9);</span><br><span class="line">if (ret)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;找到！&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;未找到！&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：二分法查找效率高，但查找的容器中元素必须是有序序列</p><h4 id="5-2-5-count"><a href="#5-2-5-count" class="headerlink" title="5.2.5 count"></a>5.2.5 count</h4><p>功能描述：</p><ul><li>统计元素个数</li></ul><p>函数原型：</p><ul><li><p><code>count(iterator beg, iterator end, value);</code></p><p>//beg开始迭代器</p><p>//end结束迭代器</p><p>//value统计的元素</p></li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;int&gt;v;</span><br><span class="line">v.push_back(0);</span><br><span class="line">v.push_back(40);</span><br><span class="line">v.push_back(40);</span><br><span class="line">v.push_back(40);</span><br><span class="line">v.push_back(1);</span><br><span class="line">v.push_back(4);</span><br><span class="line">v.push_back(3);</span><br><span class="line">v.push_back(3);</span><br><span class="line">&#x2F;&#x2F;查找容器中40的个数</span><br><span class="line">int num &#x3D; count(v.begin(), v.end(), 40);</span><br><span class="line">cout &lt;&lt; &quot;40的个数为：&quot; &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">Person(string name, int age)</span><br><span class="line">&#123;</span><br><span class="line">m_name &#x3D; name;</span><br><span class="line">m_age &#x3D; age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;重载&#x3D;&#x3D; 让底层find知道如何对比person数据类型</span><br><span class="line">bool operator&#x3D;&#x3D;(const Person&amp; p)</span><br><span class="line">&#123;</span><br><span class="line">if ( this-&gt;m_age &#x3D;&#x3D; p.m_age)</span><br><span class="line">&#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">string m_name;</span><br><span class="line">int m_age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Greater20</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">bool operator()(Person&amp; p)</span><br><span class="line">&#123;</span><br><span class="line">return p.m_age &gt; 20;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">void test02()</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;Person&gt;v;</span><br><span class="line">&#x2F;&#x2F;创建数据类型</span><br><span class="line">Person p1(&quot;aaa&quot;, 10);</span><br><span class="line">Person p2(&quot;bbb&quot;, 30);</span><br><span class="line">Person p3(&quot;ccc&quot;, 30);</span><br><span class="line">Person p4(&quot;ddd&quot;, 30);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;放到容器中</span><br><span class="line">v.push_back(p1);</span><br><span class="line">v.push_back(p2);</span><br><span class="line">v.push_back(p3);</span><br><span class="line">v.push_back(p4);</span><br><span class="line"></span><br><span class="line">Person p5(&quot;hhh&quot;, 30);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;统计与hhh同龄的人数</span><br><span class="line">int num &#x3D; count(v.begin(), v.end(), p5);</span><br><span class="line">cout &lt;&lt; &quot;和hhh同龄的人数为：&quot; &lt;&lt; num &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：统计自定义数据类型，需要配合重载operator==</p><h4 id="5-2-6-count-if"><a href="#5-2-6-count-if" class="headerlink" title="5.2.6 count_if"></a>5.2.6 count_if</h4><p>功能描述：</p><ul><li>按条件统计元素个数</li></ul><p>函数原型：</p><ul><li><p><code>count_if(iterator beg, iterator end, _Pred);</code></p><p>//按条件统计元素出现的次数</p><p>//beg开始迭代器</p><p>//end结束迭代器</p><p>//_Pred谓词</p></li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;1.统计内置数据类型</span><br><span class="line">class Greater20</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">bool operator()(int val)</span><br><span class="line">&#123;</span><br><span class="line">return val &gt; 20;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;int&gt;v;</span><br><span class="line">v.push_back(0);</span><br><span class="line">v.push_back(40);</span><br><span class="line">v.push_back(40);</span><br><span class="line">v.push_back(40);</span><br><span class="line">v.push_back(1);</span><br><span class="line">v.push_back(4);</span><br><span class="line">v.push_back(3);</span><br><span class="line">v.push_back(3);</span><br><span class="line">&#x2F;&#x2F;查找容器中大于20的个数</span><br><span class="line">int num &#x3D; count_if(v.begin(), v.end(), Greater20());</span><br><span class="line">cout &lt;&lt; &quot;大于20的个数为：&quot; &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">Person(string name, int age)</span><br><span class="line">&#123;</span><br><span class="line">m_name &#x3D; name;</span><br><span class="line">m_age &#x3D; age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;重载&#x3D;&#x3D; 让底层find知道如何对比person数据类型</span><br><span class="line">bool operator&#x3D;&#x3D;(const Person&amp; p)</span><br><span class="line">&#123;</span><br><span class="line">if ( this-&gt;m_age &#x3D;&#x3D; p.m_age)</span><br><span class="line">&#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">string m_name;</span><br><span class="line">int m_age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class AgeGreater20</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">bool operator()(Person&amp; p)</span><br><span class="line">&#123;</span><br><span class="line">return p.m_age &gt; 20;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">void test02()</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;Person&gt;v;</span><br><span class="line">&#x2F;&#x2F;创建数据类型</span><br><span class="line">Person p1(&quot;aaa&quot;, 10);</span><br><span class="line">Person p2(&quot;bbb&quot;, 30);</span><br><span class="line">Person p3(&quot;ccc&quot;, 30);</span><br><span class="line">Person p4(&quot;ddd&quot;, 30);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;放到容器中</span><br><span class="line">v.push_back(p1);</span><br><span class="line">v.push_back(p2);</span><br><span class="line">v.push_back(p3);</span><br><span class="line">v.push_back(p4);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;统计年龄大于20的人数</span><br><span class="line">int num &#x3D; count_if(v.begin(), v.end(), AgeGreater20());</span><br><span class="line">cout &lt;&lt; &quot;大于20的人数为：&quot; &lt;&lt; num &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-常用排序算法"><a href="#5-3-常用排序算法" class="headerlink" title="5.3 常用排序算法"></a>5.3 常用排序算法</h3><p>学习目标：</p><ul><li>掌握常用的排序算法：</li></ul><p>算法简介：</p><ul><li><p><code>sort</code>                                      //对容器内元素进行排序</p></li><li><p><code>random_shuffle </code>                 //洗牌，对指定范围内的元素随机调整次序</p></li><li><p><code>merge</code>                                    //容器元素合并，并存储到另一容器中</p></li><li><p><code>reverse</code>                                //反转指定范围的元素</p></li></ul><h4 id="5-3-1-sort"><a href="#5-3-1-sort" class="headerlink" title="5.3.1 sort"></a>5.3.1 sort</h4><p>功能描述：</p><ul><li>对容器内元素进行排序</li></ul><p>函数原型:</p><ul><li><p><code>sort(iterator beg, iterator end, _Pred);</code></p><p>//按值查找元素，找到返回指定位置迭代器，找不到返回结束迭代器位置</p><p>//beg开始迭代器</p><p>//end结束迭代器</p><p>//_Pred谓词</p></li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">void myPrint(int val)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; val &lt;&lt; &quot;　&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;int&gt;v;</span><br><span class="line">v.push_back(0);</span><br><span class="line">v.push_back(40);</span><br><span class="line">v.push_back(40);</span><br><span class="line">v.push_back(40);</span><br><span class="line">v.push_back(1);</span><br><span class="line">v.push_back(4);</span><br><span class="line">v.push_back(3);</span><br><span class="line">v.push_back(3);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;利用sort进行升序</span><br><span class="line">sort(v.begin(), v.end());</span><br><span class="line">for_each(v.begin(), v.end(), myPrint);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;改为降序</span><br><span class="line">&#x2F;&#x2F;greater内置函数对象，需要包含头文件&lt;functional&gt;</span><br><span class="line">sort(v.begin(), v.end(), greater&lt;int&gt;());</span><br><span class="line">for_each(v.begin(), v.end(), myPrint);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-3-2-random-shuffle"><a href="#5-3-2-random-shuffle" class="headerlink" title="5.3.2 random_shuffle"></a>5.3.2 random_shuffle</h4><p>功能描述：</p><ul><li>洗牌 指定范围内的元素随机调整次序</li></ul><p>函数原型：</p><ul><li><p><code>random_shuffle(iterator beg, iterator end);</code></p><p>//指定范围内的元素随机调整次序</p><p>//beg开始迭代器</p><p>//end结束迭代器</p></li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">srand((unsigned int)time(NULL));&#x2F;&#x2F;要加随机数种子</span><br><span class="line"></span><br><span class="line">vector&lt;int&gt;v;</span><br><span class="line">for (int i &#x3D; 0; i &lt; 9; i++)</span><br><span class="line">&#123;</span><br><span class="line">v.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;利用洗牌算法，打乱顺序</span><br><span class="line">random_shuffle(v.begin(), v.end());</span><br><span class="line"></span><br><span class="line">for_each(v.begin(), v.end(), myPrint);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-3-3-merge"><a href="#5-3-3-merge" class="headerlink" title="5.3.3 merge"></a>5.3.3 merge</h4><p>功能描述：</p><ul><li>两个容器元素合并，并存储到另一个容器中</li></ul><p>函数原型：</p><ul><li><p><code>merge(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);</code></p><p>//容器元素合并，并存储到另一容器中</p><p>//ps：两个容器必须是有序的</p><p>//beg1：  容器1开始迭代器</p><p>//end1： 容器1结束迭代器</p><p>//beg2:    容器2开始迭代器</p><p>//end2： 容器2结束迭代器</p><p>//dest:      目标容器开始迭代器</p></li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;int&gt;v1;</span><br><span class="line">vector&lt;int&gt;v2;</span><br><span class="line">for (int i &#x3D; 0; i &lt; 9; i++)</span><br><span class="line">&#123;</span><br><span class="line">v1.push_back(i);</span><br><span class="line">v1.push_back(i + 1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;目标容器</span><br><span class="line">vector&lt;int&gt;vTarget;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;提前给目标容器分配空间</span><br><span class="line">vTarget.resize(v1.size() + v2.size());</span><br><span class="line"></span><br><span class="line">merge(v1.begin(), v1.end(), v2.begin(), v2.end(), vTarget.begin());</span><br><span class="line"></span><br><span class="line">for_each(vTarget.begin(), vTarget.end(), myPrint);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>out_put:</p><p>0　1　1　2　2　3　3　4　4　5　5　6　6　7　7　8　8　9</p><p>总结：</p><ul><li>merge合并两个容器必须都是有序序列</li><li>目标容器必须提前开辟空间</li></ul><h4 id="5-3-4-reverse"><a href="#5-3-4-reverse" class="headerlink" title="5.3.4 reverse"></a>5.3.4 reverse</h4><p>功能描述：</p><ul><li>将容器内元素进行反转</li></ul><p>函数原型：</p><ul><li><p><code>reverse(iterator beg, iterator end);</code></p><p>//反转指定范围的元素</p><p>//beg开始迭代器</p><p>//end结束迭代器</p></li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reverse(v.begin(),v.end());</span><br></pre></td></tr></table></figure><p>总结：面试题可以会用到</p><h3 id="5-4-常用拷贝和替换算法"><a href="#5-4-常用拷贝和替换算法" class="headerlink" title="5.4 常用拷贝和替换算法"></a>5.4 常用拷贝和替换算法</h3><p>学习目标：</p><ul><li>掌握常用的拷贝和替换算法</li></ul><p>算法简介：</p><ul><li><code>copy </code>                                    //容器内指定范围内的元素拷贝到另一容器中</li><li><code>replace</code>                              //将容器内指定范围的旧元素修改为新元素</li><li><code>replace_if </code>                        //容器内指定范围元素满足条件的元素替换为新元素</li><li><code>swap</code>                                     //互换两个容器的元素</li></ul><h4 id="5-4-1-copy"><a href="#5-4-1-copy" class="headerlink" title="5.4.1 copy"></a>5.4.1 copy</h4><p>功能描述：</p><ul><li>容器内指定范围的元素拷贝到另一容器中</li></ul><p>函数原型：</p><ul><li><p><code>copy(iterator beg, iterator end, iterator dest);</code></p><p>//dest 目标起始迭代器</p></li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;int&gt;v1;</span><br><span class="line"></span><br><span class="line">for (int i &#x3D; 0; i &lt; 9; i++)</span><br><span class="line">&#123;</span><br><span class="line">v1.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;目标容器</span><br><span class="line">vector&lt;int&gt;v2;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;提前给目标容器分配空间</span><br><span class="line">v2.resize(v1.size());</span><br><span class="line"></span><br><span class="line">copy(v1.begin(), v1.end(), v2.begin());</span><br><span class="line"></span><br><span class="line">for_each(v2.begin(), v2.end(), myPrint);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 总结：</p><p>目标容器要提前开辟空间</p><h4 id="5-4-2-replace"><a href="#5-4-2-replace" class="headerlink" title="5.4.2  replace"></a>5.4.2  replace</h4><p>功能描述：</p><ul><li>将容器内指定范围的旧元素修改为新元素</li></ul><p>函数原型：</p><ul><li><p>replace(iterator beg, iterator end, oldvalue, newvalue);</p><p>//将区间内旧元素替换成新元素</p><p>//oldvalue旧元素</p><p>//newvalue新元素</p></li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;int&gt;v;</span><br><span class="line">v.push_back(0);</span><br><span class="line">v.push_back(40);</span><br><span class="line">v.push_back(40);</span><br><span class="line">v.push_back(40);</span><br><span class="line">v.push_back(1);</span><br><span class="line">v.push_back(4);</span><br><span class="line">v.push_back(3);</span><br><span class="line">v.push_back(3);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; &quot;替换前：&quot; &lt;&lt; endl;</span><br><span class="line">for_each(v.begin(), v.end(), myPrint);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">replace(v.begin(), v.end(), 40, 666);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; &quot;替换后：&quot; &lt;&lt; endl;</span><br><span class="line">for_each(v.begin(), v.end(), myPrint);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-4-3-replace-if"><a href="#5-4-3-replace-if" class="headerlink" title="5.4.3 replace_if"></a>5.4.3 replace_if</h4><p>功能描述：</p><ul><li>将区间内满足条件的元素，替换成指定元素</li></ul><p>函数原型：</p><ul><li><p><code>replace_if(iterator beg, iterator end, _pred, newvalue);</code></p><p>//    _pred谓词</p><p>//newvalue 替换的新元素</p></li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">class Greater20</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">bool operator()(int val)</span><br><span class="line">&#123;</span><br><span class="line">return val &gt; 20;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;int&gt;v;</span><br><span class="line">v.push_back(0);</span><br><span class="line">v.push_back(40);</span><br><span class="line">v.push_back(40);</span><br><span class="line">v.push_back(40);</span><br><span class="line">v.push_back(1);</span><br><span class="line">v.push_back(50);</span><br><span class="line">v.push_back(3);</span><br><span class="line">v.push_back(3);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; &quot;替换前：&quot; &lt;&lt; endl;</span><br><span class="line">for_each(v.begin(), v.end(), myPrint);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">replace_if(v.begin(), v.end(), Greater20(), 666);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; &quot;替换后：&quot; &lt;&lt; endl;</span><br><span class="line">for_each(v.begin(), v.end(), myPrint);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.4.4 swap</p><p>功能描述：</p><ul><li>互换两个容器的元素</li></ul><p>函数原型：</p><ul><li><p><code>swap(container c1,  container c2);</code></p><p>//c1 容器1</p><p>//c2 容器2</p></li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;int&gt;v1;</span><br><span class="line">vector&lt;int&gt;v2;</span><br><span class="line"></span><br><span class="line">for (int i &#x3D; 0; i &lt; 10; i++)</span><br><span class="line">&#123;</span><br><span class="line">v1.push_back(i);</span><br><span class="line">v2.push_back(i + 100);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; &quot;替换前：&quot; &lt;&lt; endl;</span><br><span class="line">for_each(v1.begin(), v1.end(), myPrint);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">for_each(v2.begin(), v2.end(), myPrint);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">swap(v1, v2);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; &quot;替换后：&quot; &lt;&lt; endl;</span><br><span class="line">for_each(v1.begin(), v1.end(), myPrint);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">for_each(v2.begin(), v2.end(), myPrint);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：两个容器必须同种类型</p><h3 id="5-5-常用算术生成算法"><a href="#5-5-常用算术生成算法" class="headerlink" title="5.5 常用算术生成算法"></a>5.5 常用算术生成算法</h3><p>学习目标：</p><ul><li>掌握常用的算术生成算法</li></ul><p>注意：</p><ul><li>算术生成算法属于小型算法，使用时包含头文件为<code>#include&lt;numeric&gt;</code></li></ul><p>算法简介：</p><ul><li><code>accumulate</code>                  //计算容器元素累计总和</li><li><code>fill</code>                              //向容器中添加元素</li></ul><h4 id="5-5-1-accumulate"><a href="#5-5-1-accumulate" class="headerlink" title="5.5.1 accumulate"></a>5.5.1 accumulate</h4><p>功能描述：</p><ul><li>计算区间内容器元素累计总和</li></ul><p>函数原型：</p><ul><li><p><code>accumulate(iterator beg, iterator end, value);</code></p><p>//计算容器元素累计总和</p><p>//value起始值</p></li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;int&gt;v1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for (int i &#x3D; 0; i &lt;&#x3D; 100; i++)</span><br><span class="line">&#123;</span><br><span class="line">v1.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int total &#x3D; accumulate(v1.begin(), v1.end(), 1000);&#x2F;&#x2F;最后一个参数是起始累加值</span><br><span class="line">cout &lt;&lt; total &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>out_put:</p><p>6050</p><h4 id="5-5-2-fill"><a href="#5-5-2-fill" class="headerlink" title="5.5.2 fill"></a>5.5.2 fill</h4><p>功能描述：</p><ul><li>向容器中填充指定的元素</li></ul><p>函数原型:</p><ul><li><p><code>fill(iterator beg, iterator end, value);</code></p><p>//value填充的值</p></li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;int&gt;v1;</span><br><span class="line">v1.resize(10);</span><br><span class="line"></span><br><span class="line">for_each(v1.begin(), v1.end(), myPrint);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#x2F;&#x2F;后期重新填充</span><br><span class="line">fill(v1.begin(), v1.end(), 100);</span><br><span class="line"></span><br><span class="line">for_each(v1.begin(), v1.end(), myPrint);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-6-常用集合算法"><a href="#5-6-常用集合算法" class="headerlink" title="5.6 常用集合算法"></a>5.6 常用集合算法</h3><p>学习目标：</p><ul><li>掌握常用的集合算法</li></ul><p>算法简介：</p><ul><li><code>set_intersection</code>              //求两个容器的交集</li><li><code>set_union</code>                            //求两个容器的并集</li><li><code>set_difference</code>                  //求两个容器的差集</li></ul><h4 id="5-6-1-set-intersection"><a href="#5-6-1-set-intersection" class="headerlink" title="5.6.1 set_intersection"></a>5.6.1 set_intersection</h4><p>功能描述：</p><ul><li>求两个容器的交集</li></ul><p>函数原型：</p><ul><li><p><code>set_intersection(iterator beg1, iterator end1, iterator beg2, iterator dest);</code></p><p>//ps：两个集合必须是有序序列</p><p>//dest 目标容器开始迭代器</p></li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;int&gt;v1;</span><br><span class="line">vector&lt;int&gt;v2;</span><br><span class="line"></span><br><span class="line">for (int i &#x3D; 0; i &lt; 10; i++)</span><br><span class="line">&#123;</span><br><span class="line">v1.push_back(i);</span><br><span class="line">v2.push_back(i + 5);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;int&gt;vTarget;</span><br><span class="line">&#x2F;&#x2F;目标容器需要提前开辟空间</span><br><span class="line">&#x2F;&#x2F;最特殊情况，大容器包含小容器 开辟空间，取小容器size即可</span><br><span class="line">vTarget.resize(min(v1.size(), v2.size()));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;获取交集</span><br><span class="line">vector&lt;int&gt;::iterator itEnd &#x3D; set_intersection(v1.begin(), v1.end(), v2.begin(), v2.end(), vTarget.begin());</span><br><span class="line">for_each(vTarget.begin(), itEnd, myPrint);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>求交集的两个容器必须都是有序序列</li><li>目标容器开辟空间需要从两个容器中取较小值</li><li>set_intersecton返回值是交集中最后一个元素的位置</li></ul><h4 id="5-6-2-set-union"><a href="#5-6-2-set-union" class="headerlink" title="5.6.2 set_union"></a>5.6.2 set_union</h4><p>功能描述：</p><ul><li><p>求两个集合的并集</p></li><li><p>函数原型：<br><code>set_union(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);</code></p><p>//求两个集合的并集</p><p>//PS：两个集合必须是有序序列</p><p>//dest 目标容器开始迭代器</p></li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;int&gt;v1;</span><br><span class="line">vector&lt;int&gt;v2;</span><br><span class="line"></span><br><span class="line">for (int i &#x3D; 0; i &lt; 10; i++)</span><br><span class="line">&#123;</span><br><span class="line">v1.push_back(i);</span><br><span class="line">v2.push_back(i + 5);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;int&gt;vTarget;</span><br><span class="line">&#x2F;&#x2F;目标容器需要提前开辟空间</span><br><span class="line">&#x2F;&#x2F;最特殊情况，两个容器没有交集，取两个容器的容量之和</span><br><span class="line">vTarget.resize(v1.size() + v2.size());</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;获取并集</span><br><span class="line">vector&lt;int&gt;::iterator itEnd &#x3D; set_union(v1.begin(), v1.end(), v2.begin(), v2.end(), vTarget.begin());</span><br><span class="line">for_each(vTarget.begin(), itEnd, myPrint);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>求并集的两个容器必须都是有序序列</li><li>目标容器开辟空间需要两个容器相加</li><li>set_union返回值是并集中最后一个元素的位置</li></ul><h4 id="5-6-3-set-difference"><a href="#5-6-3-set-difference" class="headerlink" title="5.6.3 set_difference"></a>5.6.3 set_difference</h4><p>功能描述：</p><ul><li>求两个集合的差集</li></ul><p>函数原型：</p><ul><li><p><code>set_difference(iterator beg1, iterator end1, iterator beg2, iterator end2, iterator dest);</code></p><p>//求两个集合的差集</p><p>//ps:两个集合必须是有序序列</p><p>//dest 目标容器开始迭代器</p></li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;int&gt;v1;</span><br><span class="line">vector&lt;int&gt;v2;</span><br><span class="line"></span><br><span class="line">for (int i &#x3D; 0; i &lt; 10; i++)</span><br><span class="line">&#123;</span><br><span class="line">v1.push_back(i);</span><br><span class="line">v2.push_back(i + 5);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;int&gt;vTarget;</span><br><span class="line">&#x2F;&#x2F;目标容器需要提前开辟空间</span><br><span class="line">&#x2F;&#x2F;最特殊情况，两个容器没有交集，取两个容器大的size作为目标容器开辟空间</span><br><span class="line">vTarget.resize(max(v1.size() , v2.size()));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;获取差集</span><br><span class="line">cout &lt;&lt; &quot;v1和v2的差集：&quot; &lt;&lt; endl;</span><br><span class="line">vector&lt;int&gt;::iterator itEnd &#x3D; set_difference(v1.begin(), v1.end(), v2.begin(), v2.end(), vTarget.begin());</span><br><span class="line">for_each(vTarget.begin(), itEnd, myPrint);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; &quot;v2和v1的差集：&quot; &lt;&lt; endl;</span><br><span class="line">itEnd &#x3D; set_difference(v2.begin(), v2.end(), v1.begin(), v1.end(), vTarget.begin());</span><br><span class="line">for_each(vTarget.begin(), itEnd, myPrint);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>out_put:</p><p>v1和v2的差集：<br>0　1　2　3　4　<br>v2和v1的差集：<br>10　11　12　13　14　</p><h3 id="6-异常处理"><a href="#6-异常处理" class="headerlink" title="6 异常处理"></a>6 异常处理</h3><h4 id="6-1-异常处理语法"><a href="#6-1-异常处理语法" class="headerlink" title="6.1 异常处理语法"></a>6.1 异常处理语法</h4><p>异常接口声明：</p><p>一个函数显示声明可能抛出的异常</p><p>有利于函数调用者为异常 处理做好准备</p><p>可以在函数声明中列出此函数可能抛出的所有异常类型</p><p>eg：<code>void fun() throw(A,B,C,D);</code></p><p>若无异常接口声明，则此函数可以抛出任何类型的异常</p><p>eg：<code>void fun() throw();</code></p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int divide(int x, int y)</span><br><span class="line">&#123;</span><br><span class="line">if (y &#x3D;&#x3D; 0)</span><br><span class="line">&#123;</span><br><span class="line">throw x;</span><br><span class="line">&#125;</span><br><span class="line">return x &#x2F; y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">try</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;5 &#x2F; 2 &#x3D; &quot; &lt;&lt; divide(5, 2) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;8 &#x2F; 0 &#x3D; &quot; &lt;&lt; divide(8, 0) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;7 &#x2F; 1 &#x3D; &quot; &lt;&lt; divide(7, 1) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">catch (int e)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; e &lt;&lt; &quot; is devided by zero!&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; &quot;That is ok.&quot; &lt;&lt; endl;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>out_put:</p><p>5 / 2 = 2<br>8 is devided by zero!<br>That is ok.</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++文件操作</title>
      <link href="2021/02/06/C-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
      <url>2021/02/06/C-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><p>程序运行时产生的数据都属于临时数据，程序一旦运行结束都会被释放。</p><p>通过<strong>文件可以将数据持久化</strong></p><p>C++中对文件的操作需要包含头文件<fstream></p><p>文件类型分为两种：</p><p>1.<strong>文本文件</strong>：文件以文本的ASII码形式存储在计算机中。</p><p>2.<strong>二进制文件</strong>：文件以文本的二进制形式存储在计算机中，用户一般不能直接读懂它们。</p><p>操作文件的三大类：</p><p>1.ofstream：写操作—-output（输出到文件中）</p><p>2.ifstream：读操作—–intput（输入到程序中）</p><p>3.fstream：读写操作</p><h2 id="文本文件"><a href="#文本文件" class="headerlink" title="文本文件"></a>文本文件</h2><h3 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h3><p>写文件步骤如下：</p><p>1.包含头文件</p><p>​    #include<ftream></p><p>2.创建流对象</p><p>​    ofstream ofs;</p><p>3.打开文件</p><p>​    ofs.open(“文件路径”，打开方式);</p><p>4.写数据</p><p>​    ofs &lt;&lt; “写入的数据”;</p><p>5.关闭文件</p><p>​    ofs.close();</p><p>文件打开方式：</p><table><thead><tr><th>打开方式</th><th>解释</th></tr></thead><tbody><tr><td>ios::in</td><td>为读文件而打开文件</td></tr><tr><td>ios::out</td><td>为写文件而打开文件</td></tr><tr><td>ios::ate</td><td>初始位置：文件尾</td></tr><tr><td>ios::app</td><td>追加方式写文件</td></tr><tr><td>ios::trunc</td><td>如果文件存在先删除，再创建</td></tr><tr><td>ios::binary</td><td>二进制方式</td></tr></tbody></table><p>注意：文件操作可以配合使用，利用 | 操作符</p><p>例如：用二进制方式写文件  <code>ios::binary | ios ::out</code></p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;创建流对象</span><br><span class="line">ofstream ofs;</span><br><span class="line"></span><br><span class="line">ofs.open(&quot;test.txt&quot;,ios::out);</span><br><span class="line">ofs &lt;&lt; &quot;姓名：张三&quot; &lt;&lt; endl;</span><br><span class="line">ofs &lt;&lt; &quot;性别：男&quot; &lt;&lt; endl;</span><br><span class="line">ofs &lt;&lt; &quot;年龄：18&quot; &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">ofs.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打开源文件所在目录，即可发现新创建的文本文件。</p><p><strong>总结：</strong></p><ul><li>文件操作必须包含头文件fstream</li><li>读文件可以利用ofstream，或者fstream类</li><li>打开文件时候需要指定操作文件的路径，以及打开方式（只写文件名默认在和当前.cpp文件相同的路径下）</li><li>利用&lt;&lt;可以向文件中写数据</li><li>操作完毕，要关闭文件</li></ul><h3 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h3><p>读文件与写文件步骤相似，但是读取方式相对较多</p><p>读文件步骤：</p><p>1.包含头文件</p><p>​    #include<fstream></p><p>2.创建流对象</p><p>​    ifstream ifs；</p><p>3.打开文件并判断文件是否打开成功</p><p>​    ifs.open(“文件路径”，打开方式)；</p><p>4.读数据</p><p>​    四种方式读取</p><p>5.关闭文件</p><p>​    ifs.close();</p><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.open(&quot;test.txt&quot;, ios::in);</span><br><span class="line">if (!ifs.is_open())           &#x2F;&#x2F;打开失败返回假</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;文件打开失败!&quot; &lt;&lt; endl;</span><br><span class="line">return ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;第一种  会把空格输出成换行</span><br><span class="line">&#x2F;*char buf[1024] &#x3D; &#123; 0 &#125;;</span><br><span class="line">while (ifs &gt;&gt; buf)             &#x2F;&#x2F;一行一行读，读到头会返回一个假的标志</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; buf &lt;&lt; endl;</span><br><span class="line">&#125;*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;第二种  照常输出</span><br><span class="line">&#x2F;*char buf[1024] &#x3D; &#123; 0 &#125;;</span><br><span class="line">while (ifs.getline(buf, sizeof(buf)))</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; buf &lt;&lt; endl;</span><br><span class="line">&#125;*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;第三种</span><br><span class="line">&#x2F;*string buf;</span><br><span class="line"></span><br><span class="line">while ( getline(ifs,buf ))</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; buf &lt;&lt; endl;</span><br><span class="line">&#125;*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;第四种</span><br><span class="line">char c;</span><br><span class="line">&#x2F;&#x2F;如果没有读到文件尾就一直读下去。</span><br><span class="line">while ((c &#x3D; ifs.get()) !&#x3D; EOF)      &#x2F;&#x2F;get一次只读一个字符</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; c;                      &#x2F;&#x2F;不要加endl，会出现乱码，它自己会读换行符</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ifs.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><ul><li>读文件可以利用ifstream，或者fstream类</li><li>利用is_open函数可以判断文件是否打开成功</li><li>close 关闭文件</li></ul><h2 id="二进制文件"><a href="#二进制文件" class="headerlink" title="二进制文件"></a>二进制文件</h2><p>以二进制的方式对文件进行读写操作</p><p>打开方式要指定为ios::binary</p><h3 id="写文件-1"><a href="#写文件-1" class="headerlink" title="写文件"></a>写文件</h3><p>二进制方式写文件主要利用流对象调用成员函数write</p><p>函数原型：<code>ostream&amp; write(const char * buffer,int len);</code></p><p>函数解释：字符指针buffer指向内存中一段存储空间，len是读写的字节数</p><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">void test01(void)</span><br><span class="line">&#123;</span><br><span class="line">ofstream ofs;</span><br><span class="line">ofs.open(&quot;person.txt&quot;, ios::out |ios::binary);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;上面两步可以合并为一步</span><br><span class="line">&#x2F;*ofstream ofs(&quot;person.txt&quot;, ios::out | ios::binary);*&#x2F;</span><br><span class="line"></span><br><span class="line">Person p &#x3D; &#123; &quot;张三&quot;, 18 &#125;;            &#x2F;&#x2F;注意这里是大括号</span><br><span class="line">ofs.write((const char*)&amp;p, sizeof(Person));</span><br><span class="line"></span><br><span class="line">ofs.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>文件输出流对象，可以通过write函数，以二进制方式写数据</li></ul><h3 id="读文件-1"><a href="#读文件-1" class="headerlink" title="读文件"></a>读文件</h3><p>二进制方式读文件主要利用流对象调用成员函数read</p><p>函数原型：<code>istream&amp; read(char *buffer,int len);</code></p><p>函数解释：字符指针buffer指向内存中一段存储空间，len是读写的字节数。</p><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;二进制文件最好不要用string类型，容易出问题</span><br><span class="line">char m_Name[64];   </span><br><span class="line">int m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void test01(void)</span><br><span class="line">&#123;</span><br><span class="line">ifstream ifs;</span><br><span class="line">ifs.open(&quot;Person.txt&quot;, ios::in | ios::binary);</span><br><span class="line">if (!ifs.is_open())</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;&quot;文件打开失败！&quot;&lt;&lt;endl;</span><br><span class="line">return ;</span><br><span class="line">&#125;</span><br><span class="line">Person p;</span><br><span class="line">ifs.read((char*)&amp;p, sizeof(Person));</span><br><span class="line">cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; p.m_Name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; p.m_Age &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">ifs.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈和队列</title>
      <link href="2021/02/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>2021/02/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="2-栈和队列"><a href="#2-栈和队列" class="headerlink" title="2.栈和队列"></a>2.栈和队列</h2><h3 id="2-1-堆栈"><a href="#2-1-堆栈" class="headerlink" title="2.1 堆栈"></a>2.1 堆栈</h3><h4 id="2-1-1-顺序栈"><a href="#2-1-1-顺序栈" class="headerlink" title="2.1.1 顺序栈"></a>2.1.1 顺序栈</h4><p>​    <strong>1.栈的概念</strong></p><ul><li><p>​    栈（Stack）是操作受限的线性表，插入和删除数据元素的操作只能在线性表的一端进行。</p><p><strong>2.栈的主要操作</strong></p></li><li><p>入栈(Push)</p></li><li><p>出栈(Pop)</p></li></ul><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="/noteimg/stack.png"></p><p>栈的操作特性：<strong>后进先出</strong>（Last In First Out, <strong>LIFO</strong> ）</p><ul><li>顺序栈———栈的顺序存储结构</li></ul><p>确定栈底：设top为栈顶元素索引（下标）</p><ul><li>栈的顺序存储结构及实现</li></ul><p>进栈：top先 + 1，然后在top指向的位置压入数据。</p><p>出栈：先top所指向的元素弹出，然后top - 1。</p><p>栈空：top = -1；</p><p>栈满：top = MAX_SIZE - 1;  PS：MAX_SIZE———栈的最大容量</p><p>上溢：栈顶指针或栈顶元素下标指出栈的外面。——-Push 时要先判断是否上溢</p><p>下溢：表示栈为空栈，却仍要执行弹栈操作。———–pop时要先判断是否下溢</p><p><strong>示例：</strong></p><p>字符类：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_SIZE = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 定义栈类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">char</span>* data;            <span class="comment">//保存栈数组的首地址</span></span><br><span class="line"><span class="keyword">int</span> size;</span><br><span class="line"><span class="keyword">int</span> top;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">Stack</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">Stack</span>(<span class="keyword">int</span> s);</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Stack</span>();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">char</span> ch)</span></span>;  <span class="comment">//入栈</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Pop</span><span class="params">()</span></span>;              <span class="comment">//出栈，并返回栈顶元素</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">getTop</span><span class="params">()</span></span>;         <span class="comment">//获得栈顶元素，不出栈</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">()</span></span>;       <span class="comment">//判断栈是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isFull</span><span class="params">()</span></span>;           <span class="comment">//判断栈是否满了</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setNull</span><span class="params">()</span></span>;        <span class="comment">//设置栈为空</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Stack::<span class="built_in">Stack</span>()</span><br><span class="line">&#123;</span><br><span class="line">size = MAX_SIZE;</span><br><span class="line">top = <span class="number">-1</span>;</span><br><span class="line">data = <span class="keyword">new</span> <span class="keyword">char</span>[MAX_SIZE];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Stack::<span class="built_in">Stack</span>(<span class="keyword">int</span> s)</span><br><span class="line">&#123;</span><br><span class="line">size = s;</span><br><span class="line">top = <span class="number">-1</span>;</span><br><span class="line">data = <span class="keyword">new</span> <span class="keyword">char</span>[size];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Stack::~<span class="built_in">Stack</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[] data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Stack::setNull</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">top = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Stack::push</span><span class="params">(<span class="keyword">char</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">isFull</span>())</span><br><span class="line">&#123;</span><br><span class="line">top++;</span><br><span class="line">data[top] = ch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Stack::Pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">isEmpty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> data[top--];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Stack::getTop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">isEmpty</span>())</span><br><span class="line"><span class="keyword">return</span> data[top];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Stack::isEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (top == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Stack::isFull</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (top + <span class="number">1</span> == size)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//测试代码：</span></span><br><span class="line"><span class="function">Stack <span class="title">s1</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">s1.<span class="built_in">push</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">s1.<span class="built_in">push</span>(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; s1.<span class="built_in">isFull</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; s1.<span class="built_in">getTop</span> ()&lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; s1.<span class="built_in">Pop</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; s1.<span class="built_in">Pop</span>()&lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; s1.<span class="built_in">isEmpty</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-1-2-异常捕获优化顺序栈"><a href="#2-1-2-异常捕获优化顺序栈" class="headerlink" title="2.1.2 异常捕获优化顺序栈"></a>2.1.2 异常捕获优化顺序栈</h4><p><strong>C++异常处理</strong></p><ul><li><p>try…catch语句语法如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//try块包含可能抛出异常的语句</span></span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">   &#123;</span><br><span class="line">语句<span class="number">1</span>;</span><br><span class="line">语句<span class="number">2</span>;</span><br><span class="line">语句<span class="number">3</span>;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//catch块捕获异常，但可以有多个，但至少有一个</span></span><br><span class="line"><span class="built_in"><span class="keyword">catch</span></span>(异常类型)</span><br><span class="line">&#123;</span><br><span class="line">异常处理代码</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="built_in"><span class="keyword">catch</span></span>(异常类型)</span><br><span class="line">&#123;</span><br><span class="line">异常处理代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>（1）try块语句在执行过程中没有抛出异常</li></ul><p>语句1,2,3均正常，则执行最后一个catch块后面的语句，所有catch块中的语句都不被执行。</p><ul><li>（2）try块执行的过程中抛出了异常（被捕获）</li></ul><p>如果语句2发生异常，那么抛出异常后立即跳转到第一个异常类型和抛出的异常类型匹配的catch块中执行。</p><p>语句3和try块中位于语句2下面的其他语句将会被跳过，不再执行。</p><ul><li>try块执行的过程中抛出了异常（未捕获）</li></ul><p>假设语句2发生异常，那么抛出异常，跳出try块，假设没有catch块可以捕获此错误，跳转到最后一个catch块后面的语句，造成程序终止。</p></li></ul><p><strong>什么时候会出现异常？</strong></p><ul><li><p>程序有错误会产生异常，eg：</p><ul><li>除法中分母是0；</li><li>用new运算动态分配内存空间时，空间不够导致无法分配；</li><li>访问数组元素，下标越界；</li><li>打开文件读取时，文件不存在。</li></ul></li><li><p>程序主动抛出异常，eg：</p><ul><li>用throw语句抛出异常，throw“栈空”</li></ul></li></ul><p><strong>自定义异常类的使用</strong></p><ul><li><p>定义异常内部类（在类的声明部分定义）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class Empty&#123;&#125;;&#x2F;&#x2F;在Stack类内部定义空类，大括号里面什么都没有</span><br></pre></td></tr></table></figure></li><li><p>抛出异常类（在pop函数遇到空栈时的语句）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">throw Empty();   &#x2F;&#x2F;注意这里是小括号</span><br></pre></td></tr></table></figure></li><li><p>捕获异常类（在调用pop函数时，用try/catch捕获）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">stack.<span class="built_in">pop</span>();   <span class="comment">//如果pop抛出来的类型是Empty类这个类型</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in"><span class="keyword">catch</span></span>(Stack::Empty) <span class="comment">//输出提示语句</span></span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Stack Empty!!&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>优化顺序栈后：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_SIZE = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 定义栈类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">char</span>* data;          <span class="comment">//保存栈数组的首地址</span></span><br><span class="line"><span class="keyword">int</span> size;</span><br><span class="line"><span class="keyword">int</span> top;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">Stack</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">Stack</span>(<span class="keyword">int</span> s);</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Stack</span>();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">char</span> ch)</span></span>;<span class="comment">//入栈</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Pop</span><span class="params">()</span></span>;        <span class="comment">//出栈，并返回栈顶元素</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">getTop</span><span class="params">()</span></span>;     <span class="comment">//获得栈顶元素，不出栈</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">()</span></span>;    <span class="comment">//判断栈是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isFull</span><span class="params">()</span></span>;     <span class="comment">//判断栈是否满了</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setNull</span><span class="params">()</span></span>;    <span class="comment">//设置栈为空</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Full</span>&#123;</span>&#125;;   <span class="comment">//声明异常对象Full类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Empty</span>&#123;</span>&#125;;     <span class="comment">//声明异常对象Class类</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Stack::<span class="built_in">Stack</span>()</span><br><span class="line">&#123;</span><br><span class="line">size = MAX_SIZE;</span><br><span class="line">top = <span class="number">-1</span>;</span><br><span class="line">data = <span class="keyword">new</span> <span class="keyword">char</span>[MAX_SIZE];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Stack::<span class="built_in">Stack</span>(<span class="keyword">int</span> s)</span><br><span class="line">&#123;</span><br><span class="line">size = s;</span><br><span class="line">top = <span class="number">-1</span>;</span><br><span class="line">data = <span class="keyword">new</span> <span class="keyword">char</span>[size];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Stack::~<span class="built_in">Stack</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[] data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Stack::setNull</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">top = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Stack::push</span><span class="params">(<span class="keyword">char</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isFull</span>())   <span class="comment">//当栈满时，创建异常对象，并抛出</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="built_in">Full</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">data[++top] = ch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Stack::Pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isEmpty</span>())  <span class="comment">//当栈空时，创建异常对象，并抛出</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="built_in">Empty</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> data[top--];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">Stack::getTop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">isEmpty</span>())</span><br><span class="line"><span class="keyword">return</span> data[top];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Stack::isEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (top == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Stack::isFull</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (top + <span class="number">1</span> == size)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//测试代码：</span></span><br><span class="line"><span class="function">Stack <span class="title">s1</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">s1.<span class="built_in">push</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">s1.<span class="built_in">push</span>(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">s1.<span class="built_in">push</span>(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in"><span class="keyword">catch</span></span> (Stack::Full)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Stack Full!!!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">ch = s1.<span class="built_in">Pop</span>();</span><br><span class="line">cout &lt;&lt; ch &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">ch = s1.<span class="built_in">Pop</span>();</span><br><span class="line">cout &lt;&lt; ch &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">ch = s1.<span class="built_in">Pop</span>();</span><br><span class="line">cout &lt;&lt; ch &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in"><span class="keyword">catch</span></span> (Stack::Empty)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Stack Empty!!!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p>Stack Full!!!<br>b<br>a<br>Stack Empty!!!</p><p>分析：数组只定义了2个长度，却压入三个数据，当压入第三个数据时，执行创建Full类并抛出，被catch捕获，因此输出”Stack Full!!!”，结束执行pop函数，当弹出第2个元素以后，栈已经空了，但main函数中仍要弹出第三个数据，因此执行创建Empty类并抛出，被catch捕获输出“Stack Empty!!!”。</p><h4 id="2-1-3-用类模板实现顺序栈"><a href="#2-1-3-用类模板实现顺序栈" class="headerlink" title="2.1.3 用类模板实现顺序栈"></a>2.1.3 用类模板实现顺序栈</h4><ul><li><p>类模板是用于设计结构和成员函数完全相同，但所处理的数据类型不同的<strong>通用类</strong>。</p><p>类模板定义形式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="keyword">class</span> <span class="title">T2</span>,...&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> 类名</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p><strong>编写通用的栈类</strong></p><p>将上面的代码声明部分改为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">DataType</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">DataType* data;          <span class="comment">//保存栈数组的首地址</span></span><br><span class="line"><span class="keyword">int</span> size;</span><br><span class="line"><span class="keyword">int</span> top;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">Stack</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">Stack</span>(<span class="keyword">int</span> s);</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Stack</span>();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(DataType e)</span></span>;<span class="comment">//入栈</span></span><br><span class="line"><span class="function">DataType <span class="title">Pop</span><span class="params">()</span></span>;        <span class="comment">//出栈，并返回栈顶元素</span></span><br><span class="line"><span class="function">DataType <span class="title">getTop</span><span class="params">()</span></span>;     <span class="comment">//获得栈顶元素，不出栈</span></span><br><span class="line">...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>成员函数每一项前加上 **<code>template&lt;class DataType&gt;</code>**，并把字符类型改为DataType，eg：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;析构函数</span><br><span class="line">template&lt;class DataType&gt;</span><br><span class="line">Stack&lt;DataType&gt;::~Stack()</span><br><span class="line">&#123;</span><br><span class="line">delete[] data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;入栈</span><br><span class="line">template&lt;class DataType&gt;</span><br><span class="line">void Stack&lt;DataType&gt;::push(DataType ch)</span><br><span class="line">&#123;</span><br><span class="line">if (isFull())   &#x2F;&#x2F;当栈满时，创建异常对象，并抛出</span><br><span class="line">&#123;</span><br><span class="line">throw Full();</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">data[++top] &#x3D; ch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>类模板</p><p>为了使用类模板对象，必须显示地指定模板参数，eg：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Stack&lt;char&gt; charStack;</span><br><span class="line">Stack&lt;int&gt; intStack;</span><br></pre></td></tr></table></figure><p>分别创建了charStack和intStack的堆栈对象。这两个堆栈对象分别可以处理字符类型和整数类型的数据。</p></li></ul><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><h3 id="树的定义"><a href="#树的定义" class="headerlink" title="树的定义"></a>树的定义</h3><p>树是一种数据结构，它是由n（n&gt;=1）个有限结点组成一个具有层次关系的集合。</p><p>树具有的特点有：</p><p>（1）每个结点有零个或多个子结点</p><p>（2）没有父节点的结点称为根节点</p><p>（3）每一个非根结点有且只有一个父节点</p><p>（4）除了根结点外，每个子结点可以分为多个<strong>互不相交</strong>的子树。</p><h3 id="树的基本术语"><a href="#树的基本术语" class="headerlink" title="树的基本术语"></a>树的基本术语</h3><p>结点的度：结点所拥有的子树的个数。</p><p>树的度：树中个结点度的最大值。</p><p>叶子结点：度为0的点，也叫终端结点。</p><p>分支结点：度不为0的结点，也称为非终端结点。</p><p>孩子、双亲：略。</p><p>兄弟：略。</p><p>树的遍历操作</p><p>从根结点出发，按照某种次序访问树中所有结点，使每个结点被访问一次且仅被访问一次</p><p>遍历的类型：</p><ul><li><p>前序遍历（根结点最先被遍历）</p><p>  若树为空，则空操作返回</p><p>  否则：</p><p>  访问根结点，按照从左到右的顺序前序遍历根结点的每一颗子树。</p><p>  <img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/image-20210711195507408.png" alt="image-20210711195507408"></p></li></ul><p>前序遍历：ABDEHIFCG</p><ul><li><p>后序遍历</p><p>  若树为空，则空操作返回。</p><p>  否则：</p><p>  按照从左到右的顺序遍历根节点的每一棵子树</p><p>  访问根结点</p><p>  后序遍历：DHIEFBGCA</p></li><li><p>层序遍历：</p><p>  从第一层（即从根结点开始），自上而下逐层遍历，在同一层中，按从左到右的顺序对结点逐个访问。</p><p>  ABCDEFGHI</p></li></ul><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/image-20210711201216230.png" alt="image-20210711201216230"></p><p>前序：ABEFCDGHIJK</p><p>后序：EFBCIJKHGDA</p><p>层序：ABCDEFGHIJK</p><h3 id="树的存储结构"><a href="#树的存储结构" class="headerlink" title="树的存储结构"></a>树的存储结构</h3><p>双亲孩子表示法</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/image-20210711204624833.png" alt="image-20210711204624833"></p><p>孩子兄弟表示法</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/image-20210711205242337.png" alt="image-20210711205242337"></p><p>二叉树：</p><p>基本性质：</p><ul><li><p>  叶子结点数等于度为2的结点数+1（n0=n2+1）</p></li><li><p>  二叉树第i层上最多有2^(i-1)个结点（i&gt;=1）</p></li><li><p>  一棵深度为K的二叉树中，最多有2^k-1个结点（已知深度，可以知道要为二叉树分配多少内存空间），最少有k个结点（斜树）</p></li><li><p>  假设具有n个结点的完全二叉树的深度为k，k=[log2n]+1(不大于log2n的整数加1)</p></li><li><p>对n个结点的完全二叉树从1开始按层序编号，则</p><ul><li>  结点i的双亲结点为i/2</li><li>  结点i的为2i</li><li>  结点i的右孩子为2i+1</li></ul><p>  <img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/@9LA%5B@U%7BX@QW%7DN@K%5BFL9OMI.png" alt="img"></p></li></ul><p>二叉树的存储结构：</p><ul><li>  数组</li></ul><p>二叉树的顺序存储结构一般仅存储完全二叉树，否则会造成很大的浪费</p><ul><li>  二叉链表</li></ul><p>结点结构：</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/%E4%BA%8C%E5%8F%89%E9%93%BE%E8%A1%A8%E7%BB%93%E6%9E%84.png" alt="二叉链表结构"></p><p>具有n个结点的二叉链表中，有2n-n-1=n+1个空指针。</p><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/Y%7B1%6010%5BW_0T%7DCE9SIIMQ~79.png" alt="img"></p><p>但是二叉链表有个缺点就是没有办法找到双亲。因此我们引入三叉链表、</p><ul><li>  三叉链表</li></ul><p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/img/image-20210717160859544.png" alt="image-20210717160859544"></p><p>可以用指针表示，也可以用数组表示。</p><p>三叉链表的静态链表可以用数组存储，有点是存储方便，搜索快捷，但是它适用  于频发删除和插入的场合。最好是一个变化很少的树。</p><p>二叉树的遍历 方式：</p><ul><li>  前序遍历</li><li>  中序遍历（树的遍历没有中序）</li><li>  后序遍历</li><li>  层序遍历 </li></ul><h2 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h2><p>前置知识：</p><p><code>lowbit</code>：</p><p>lowbit(n)=n&amp;(~n+1)</p><p>因为~n+1=-n，</p><p>所以lowbit(n)=n&amp;(~n+1)=n&amp;-n</p><img src= "https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/4CE88140BB2583214E44CDF53903612D.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/BlueSgler/mycdn/树状数组1.png"><p>观察可知，</p><ul><li>  t[x]结点覆盖的长度等于lowbit(x),</li><li>  t[x]的父结点等于t[x+它自己的长度],即t[x+lowbit(x)],</li><li>  整棵树的深度为logn+1.</li></ul><p>单点修改操作：</p><p>（以加k为例）</p><p>找到要修改的点对应的下标，加k，并一层一层地往上找到它的父结点，让它的父结点加上k。代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单点修改</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(;x&lt;=n;x+=x&amp;-x)t[x]+=k;<span class="comment">//从要修改的那个点开始，一直往上找父结点，都要加上k </span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>查询操作：ask(7)从t[7]这个结点往左上走找到上一层结点，这个结点值等于x-lowbit(x)，即x-=x&amp;-x</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询前缀和</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(;x;x-=x&amp;-x)ans+=t[x];</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>其他一些操作：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单点修改//单点查询</span></span><br><span class="line"><span class="built_in">add</span>(x,k);</span><br><span class="line"><span class="built_in">ask</span>(x)-<span class="built_in">ask</span>(x<span class="number">-1</span>); </span><br><span class="line"><span class="comment">//单点修改，区间查询</span></span><br><span class="line"><span class="built_in">add</span>(x,k);</span><br><span class="line"><span class="built_in">ask</span>(r)-<span class="built_in">ask</span>(l<span class="number">-1</span>);</span><br><span class="line"><span class="comment">//区间修改，单点查询</span></span><br><span class="line"><span class="built_in">add</span>(l,d);<span class="built_in">add</span>(r+<span class="number">1</span>,-d);</span><br><span class="line">a[x]+<span class="built_in">ask</span>(x);<span class="comment">//ask[x]是a[x]的增量 </span></span><br></pre></td></tr></table></figure><p>下面来看一下模板题</p><p>题目链接：<a href="https://vjudge.net/problem/HDU-1166">https://vjudge.net/problem/HDU-1166</a></p><p>参考代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">50005</span>],t[<span class="number">50005</span>];<span class="comment">//分别对应原数组和树状数组 </span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="comment">//单点修改</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(;x&lt;=n;x+=x&amp;-x)t[x]+=k;<span class="comment">//从要修改的那个点开始，一直往上找父结点，都要加上k </span></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//查询前缀和</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(;x;x-=x&amp;-x)ans+=t[x];<span class="comment">//循环退出条件是x&gt;=1,因为数组下标是从1开始的 </span></span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> test;</span><br><span class="line">cin&gt;&gt;test;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=test;i++)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(a));</span><br><span class="line">        <span class="built_in">memset</span>(t,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(t));</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Case &quot;</span>&lt;&lt;i&lt;&lt;<span class="string">&quot;:&quot;</span>&lt;&lt;endl; </span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line"><span class="built_in">add</span>(i,a[i]);</span><br><span class="line">&#125;</span><br><span class="line">string s;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="keyword">while</span>(cin&gt;&gt;s&amp;&amp;s[<span class="number">0</span>]!=<span class="string">&#x27;E&#x27;</span>)&#123;</span><br><span class="line">cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="keyword">if</span>(s[<span class="number">0</span>]==<span class="string">&#x27;Q&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="built_in">ask</span>(y)-<span class="built_in">ask</span>(x<span class="number">-1</span>);</span><br><span class="line">cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">0</span>]==<span class="string">&#x27;A&#x27;</span>)&#123;</span><br><span class="line"><span class="built_in">add</span>(x,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">0</span>]==<span class="string">&#x27;S&#x27;</span>)&#123;<span class="comment">//减去y相当于+y的相反数 </span></span><br><span class="line"><span class="built_in">add</span>(x,-y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h2><p>同样的模板题，这是线段树的代码实现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line"><span class="keyword">int</span> v;</span><br><span class="line">&#125;tr[<span class="number">200020</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">200020</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">tr[u].v=tr[u&lt;&lt;<span class="number">1</span>].v+tr[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">tr[u]=&#123;l,r,a[r]&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">tr[u].l=l;</span><br><span class="line">tr[u].r=r;</span><br><span class="line"><span class="keyword">int</span> mid = (r+l) &gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(u&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line"><span class="built_in">build</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify_add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> x,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[u].l==x&amp;&amp;tr[u].r==x)tr[u].v+=v;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> mid=(tr[u].l+tr[u].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid)<span class="built_in">modify_add</span>(u&lt;&lt;<span class="number">1</span>,x,v);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">modify_add</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,x,v);</span><br><span class="line"><span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify_sub</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> x,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[u].l==x&amp;&amp;tr[u].r==x)tr[u].v-=v;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> mid=(tr[u].l+tr[u].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid)<span class="built_in">modify_sub</span>(u&lt;&lt;<span class="number">1</span>,x,v);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">modify_sub</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,x,v);</span><br><span class="line"><span class="built_in">pushup</span>(u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=tr[u].l&amp;&amp;r&gt;=tr[u].r)<span class="keyword">return</span> tr[u].v;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> mid=(tr[u].l+tr[u].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(r&lt;=mid)<span class="keyword">return</span> <span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(l&gt;mid)<span class="keyword">return</span> <span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> v=<span class="number">0</span>;</span><br><span class="line">v+=<span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line">v+=<span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line"><span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string op;</span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    <span class="keyword">int</span> p=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> n,len;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">    cin&gt;&gt;len;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++)<span class="comment">//结点是从1开始的 </span></span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,len);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Case %d:\n&quot;</span>,p++);</span><br><span class="line"><span class="keyword">while</span>(cin&gt;&gt;op&amp;&amp;op[<span class="number">0</span>]!=<span class="string">&#x27;E&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;l&gt;&gt;r;</span><br><span class="line"><span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">&#x27;A&#x27;</span>)<span class="built_in">modify_add</span>(<span class="number">1</span>,l,r);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op[<span class="number">0</span>]==<span class="string">&#x27;S&#x27;</span>)<span class="built_in">modify_sub</span>(<span class="number">1</span>,l,r);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">query</span>(<span class="number">1</span>,l,r));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><h3 id="前置理论知识"><a href="#前置理论知识" class="headerlink" title="前置理论知识"></a>前置理论知识</h3><p>无向完全图的边：n×(n-1)/2</p><p>有向完全图的边：n×(n-1)</p><p>TD：度</p><p>无向图度和边数之和的关系：</p><p>∑ ^n^ TD(v<del>i</del>)=2e</p><p> <del>i=1</del></p><p>有向各顶点入度出度之和与边的关系：</p><p>入度和=出度和=边数</p><p>简单路径：序列中顶点不重复出现的路径</p><p>简单回路：除了第一个顶点和最后一个顶点外，，其余顶点不重复出现的回路。</p><p>连通图：无向图中，如果任意两个顶点都是连通的，则称该图为连通图</p><p>连通分量：无向图中，非连通图的极大连通子图</p><p>强连通图：有向图中，……</p><p>强连通分量：有向图中，……</p><p>生成树：n个顶点的连通图G的生成树是包含G中全部顶点的一个极小连通子图</p><p>极小连通子图：含有n-1条边（多：构成回路；少：不连通）</p><p>生成森林：在非连通图中，由每个连通分量都可以得到一颗生成树，这些连通分量的生成树就组成了非连通图的生成森林。</p><h3 id="图的存储方式"><a href="#图的存储方式" class="headerlink" title="图的存储方式"></a>图的存储方式</h3><h4 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h4><p>基本思想：一维数组存储途中顶点的信息</p><p>二维数组（邻接数组）存储各顶点的邻接关系</p><p>arc[i] [j]=1有边</p><p>​             =0无边</p><h5 id="无向图邻接矩阵"><a href="#无向图邻接矩阵" class="headerlink" title="无向图邻接矩阵"></a>无向图邻接矩阵</h5><p>对称</p><p>速建版</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200</span>;</span><br><span class="line"><span class="keyword">int</span> Nv,Ne;</span><br><span class="line"><span class="keyword">int</span> G[maxn][maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buildGraph</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> v1,v2,w;</span><br><span class="line">cin&gt;&gt;Nv;</span><br><span class="line"><span class="comment">//建图</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;Nv;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;Nv;j++) G[i][j]=<span class="number">0x3f3f3f</span>;<span class="comment">//初始化为无穷大 </span></span><br><span class="line">&#125; </span><br><span class="line">cin&gt;&gt;Ne;</span><br><span class="line"><span class="comment">//插入边 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;Ne;i++)&#123;</span><br><span class="line">cin&gt;&gt;v1&gt;&gt;v2&gt;&gt;w;</span><br><span class="line">G[v1][v2]=w;</span><br><span class="line">G[v2][v1]=w;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="有向图邻接矩阵"><a href="#有向图邻接矩阵" class="headerlink" title="有向图邻接矩阵"></a>有向图邻接矩阵</h5><p>某顶点的出度：此行元素和</p><p>某顶点的入度：此列元素和</p><h4 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h4><p>基本思想：对于图的每个顶点v<del>i</del>，将所有邻接与v<del>i</del>的顶点连成一个单链表，称为顶点vo的边表（有向图称为：出边表），所有边表的头指针和存储顶点信息的一维数组构成了顶点表。</p><h5 id="无向图的邻接表"><a href="#无向图的邻接表" class="headerlink" title="无向图的邻接表"></a>无向图的邻接表</h5><p>待补……</p><h5 id="有向图的邻接表"><a href="#有向图的邻接表" class="headerlink" title="有向图的邻接表"></a>有向图的邻接表</h5><p>顶点i的出度：第i行的边表结点个数</p><p>顶点i的入度：找到终点为i的边表，则度+1</p><p>求顶点i的所有邻接点：第i行的边表结点个数</p><p>速建版：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">int</span> head[maxn],ne[maxn],ver[maxn],edge[maxn],tot=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span><span class="comment">//,int z)//把边长为z的y结点插入到x原来指向的地方</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ver[++tot]=y;</span><br><span class="line"><span class="comment">//edge[tot]=z;</span></span><br><span class="line">ne[tot]=head[x];<span class="comment">//新结点的下一个指向head的地x编号指向的地方 </span></span><br><span class="line">head[x]=tot;<span class="comment">//head存的是顶点编号 </span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>图的存储结构的比较</p><table><thead><tr><th></th><th>空间性能</th><th>时间性能</th><th>适用范围</th><th>唯一性</th></tr></thead><tbody><tr><td>邻接矩阵</td><td>O(n^2^)</td><td>O(n^2^)</td><td>稠密图</td><td>唯一</td></tr><tr><td>邻接表</td><td>O(n+e)</td><td>O(n+e)</td><td>稀疏图</td><td>不唯一</td></tr></tbody></table><h3 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h3><p>关键问题：</p><p>图中可能存在回路，如何避免不重复访问同一个结点？<br>解决方案：附设访问标志数组visited[n]</p><h4 id="dfs-深度优先遍历"><a href="#dfs-深度优先遍历" class="headerlink" title="dfs-深度优先遍历"></a>dfs-深度优先遍历</h4><p>基本思想：</p><ol><li> 访问顶点v；</li><li> 从v的未被访问的邻接点中选取一个顶点w，从w出发进行深度优先遍历</li><li> 重复上述两步，直至所有和v有路径相通的顶点都被访问到。</li></ol><p>伪代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span> <span class="params">(<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">visited[v]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(v的每个邻接点w)&#123;</span><br><span class="line"><span class="keyword">if</span>(!visited[w])&#123;</span><br><span class="line"><span class="built_in">DFS</span>(w);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是树的先序遍历的推广</p><h4 id="bfs-广度优先搜索"><a href="#bfs-广度优先搜索" class="headerlink" title="bfs-广度优先搜索"></a>bfs-广度优先搜索</h4><p>借助队列来实现，伪代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">visited[v]=<span class="literal">true</span>;</span><br><span class="line"><span class="built_in">Enqueue</span>(v,Q);</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">Isempty</span>(Q))&#123;</span><br><span class="line">v=<span class="built_in">Dequeue</span>(Q);</span><br><span class="line"><span class="keyword">for</span>(v的每个邻接点w)&#123;</span><br><span class="line"><span class="keyword">if</span>(!visited[w])&#123;</span><br><span class="line">visited[w]=<span class="literal">true</span>;</span><br><span class="line"><span class="built_in">Enqueue</span>(w,Q);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库的相关概念</title>
      <link href="2021/02/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/"/>
      <url>2021/02/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<ul><li>DB  ——– （Database）:存储数据的“仓库”。它保存了一系列有组织的数据。</li><li>DBMS—–(Database Management System）数据库是通过DBMS创建和操作的容器</li><li>SQL——–（Structure Query Language）结构化查询语言，专门用来与数据库通信的语言</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库的相关概念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/02/01/hello-world/"/>
      <url>2021/02/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> first </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
